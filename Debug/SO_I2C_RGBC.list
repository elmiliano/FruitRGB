
SO_I2C_RGBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000587c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005a7c  08005a7c  00015a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b00  08005b00  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b08  08005b08  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b0c  08005b0c  00015b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000068  08005b78  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08005b78  00020300  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114ad  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000218f  00000000  00000000  00031586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  00033718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ccb  00000000  00000000  00034758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b2a  00000000  00000000  00035423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a23  00000000  00000000  0005df4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe034  00000000  00000000  00071970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dc4  00000000  00000000  0016f9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00174768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08005a64 	.word	0x08005a64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08005a64 	.word	0x08005a64

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <DEV_I2C_ReadWord>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t DEV_I2C_ReadWord(uint8_t add_)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    uint8_t Buf[2]={0, 0};
 80005e6:	2300      	movs	r3, #0
 80005e8:	81bb      	strh	r3, [r7, #12]
		HAL_I2C_Mem_Read(&hi2c2, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	2310      	movs	r3, #16
 80005f0:	9302      	str	r3, [sp, #8]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	2152      	movs	r1, #82	; 0x52
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <DEV_I2C_ReadWord+0x44>)
 8000602:	f001 fb2f 	bl	8001c64 <HAL_I2C_Mem_Read>
    return ((Buf[1] << 8) | (Buf[0] & 0xff));
 8000606:	7b7b      	ldrb	r3, [r7, #13]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21a      	sxth	r2, r3
 800060c:	7b3b      	ldrb	r3, [r7, #12]
 800060e:	b21b      	sxth	r3, r3
 8000610:	4313      	orrs	r3, r2
 8000612:	b21b      	sxth	r3, r3
 8000614:	b29b      	uxth	r3, r3
} // DEV_I2C_ReadWord END
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000084 	.word	0x20000084

08000624 <TCS34725_ReadWord>:


static uint16_t TCS34725_ReadWord(uint8_t add)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
    add = add | TCS34725_CMD_BIT;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000634:	71fb      	strb	r3, [r7, #7]
    return DEV_I2C_ReadWord(add);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffcf 	bl	80005dc <DEV_I2C_ReadWord>
 800063e:	4603      	mov	r3, r0
} // TCS34725_ReadWord END
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <DEV_I2C_WriteByte>:

void DEV_I2C_WriteByte(uint8_t add_, uint8_t data_)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af04      	add	r7, sp, #16
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	uint8_t Buf[1] = {0};
 8000658:	2300      	movs	r3, #0
 800065a:	733b      	strb	r3, [r7, #12]
	Buf[0] = data_;
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c2, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	b29a      	uxth	r2, r3
 8000664:	2310      	movs	r3, #16
 8000666:	9302      	str	r3, [sp, #8]
 8000668:	2301      	movs	r3, #1
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	2152      	movs	r1, #82	; 0x52
 8000676:	4803      	ldr	r0, [pc, #12]	; (8000684 <DEV_I2C_WriteByte+0x3c>)
 8000678:	f001 f9e0 	bl	8001a3c <HAL_I2C_Mem_Write>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000084 	.word	0x20000084

08000688 <TCS34725_WriteByte>:

void TCS34725_WriteByte(uint8_t add, uint8_t data)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
    add = add | TCS34725_CMD_BIT;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800069e:	71fb      	strb	r3, [r7, #7]
    DEV_I2C_WriteByte(add, data);
 80006a0:	79ba      	ldrb	r2, [r7, #6]
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ffce 	bl	8000648 <DEV_I2C_WriteByte>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <TCS34725_Init>:

void TCS34725_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 80006b8:	2101      	movs	r1, #1
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff ffe4 	bl	8000688 <TCS34725_WriteByte>
	HAL_Delay(3);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 fe43 	bl	800134c <HAL_Delay>
	TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 80006c6:	2103      	movs	r1, #3
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff ffdd 	bl	8000688 <TCS34725_WriteByte>
	HAL_Delay(3);
 80006ce:	2003      	movs	r0, #3
 80006d0:	f000 fe3c 	bl	800134c <HAL_Delay>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <TCS34725_Set_Integration_Time>:

void TCS34725_Set_Integration_Time(uint16_t time)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
    /* Update the timing register */
    TCS34725_WriteByte(TCS34725_ATIME, time);
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4619      	mov	r1, r3
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff ffcd 	bl	8000688 <TCS34725_WriteByte>
//    IntegrationTime_t = time;
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <TCS34725_Set_Gain>:

void TCS34725_Set_Gain(uint16_t gain)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	80fb      	strh	r3, [r7, #6]
	TCS34725_WriteByte(TCS34725_CONTROL, gain);
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4619      	mov	r1, r3
 8000706:	200f      	movs	r0, #15
 8000708:	f7ff ffbe 	bl	8000688 <TCS34725_WriteByte>
//    Gain_t = gain;
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <TCS34725_Get_RGBData>:

RGB TCS34725_Get_RGBData()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    RGB temp;
    temp.C = TCS34725_ReadWord(TCS34725_CDATAL | TCS34725_CMD_Read_Word);
 800071c:	2034      	movs	r0, #52	; 0x34
 800071e:	f7ff ff81 	bl	8000624 <TCS34725_ReadWord>
 8000722:	4603      	mov	r3, r0
 8000724:	81fb      	strh	r3, [r7, #14]
    temp.R = TCS34725_ReadWord(TCS34725_RDATAL | TCS34725_CMD_Read_Word);
 8000726:	2036      	movs	r0, #54	; 0x36
 8000728:	f7ff ff7c 	bl	8000624 <TCS34725_ReadWord>
 800072c:	4603      	mov	r3, r0
 800072e:	813b      	strh	r3, [r7, #8]
    temp.G = TCS34725_ReadWord(TCS34725_GDATAL | TCS34725_CMD_Read_Word);
 8000730:	2038      	movs	r0, #56	; 0x38
 8000732:	f7ff ff77 	bl	8000624 <TCS34725_ReadWord>
 8000736:	4603      	mov	r3, r0
 8000738:	817b      	strh	r3, [r7, #10]
    temp.B = TCS34725_ReadWord(TCS34725_BDATAL | TCS34725_CMD_Read_Word);
 800073a:	203a      	movs	r0, #58	; 0x3a
 800073c:	f7ff ff72 	bl	8000624 <TCS34725_ReadWord>
 8000740:	4603      	mov	r3, r0
 8000742:	81bb      	strh	r3, [r7, #12]

    HAL_Delay(3);
 8000744:	2003      	movs	r0, #3
 8000746:	f000 fe01 	bl	800134c <HAL_Delay>
    return temp;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	461a      	mov	r2, r3
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	cb03      	ldmia	r3!, {r0, r1}
 8000754:	6010      	str	r0, [r2, #0]
 8000756:	6051      	str	r1, [r2, #4]
} // TCS34725_Get_RGBData END
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <TCS34725_GetRGB888>:
function:   Convert raw RGB values to RGB888 format
parameter	:
     rgb    : RGBC Numerical value
******************************************************************************/
uint32_t TCS34725_GetRGB888(RGB rgb)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	463b      	mov	r3, r7
 8000768:	e883 0003 	stmia.w	r3, {r0, r1}
    float i=1;
 800076c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000770:	60fb      	str	r3, [r7, #12]
    //Limit data range
    if(rgb.R >= rgb.G && rgb.R >= rgb.B){
 8000772:	883a      	ldrh	r2, [r7, #0]
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	429a      	cmp	r2, r3
 8000778:	d311      	bcc.n	800079e <TCS34725_GetRGB888+0x3e>
 800077a:	883a      	ldrh	r2, [r7, #0]
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	429a      	cmp	r2, r3
 8000780:	d30d      	bcc.n	800079e <TCS34725_GetRGB888+0x3e>
        i = rgb.R / 255 + 1;
 8000782:	883b      	ldrh	r3, [r7, #0]
 8000784:	4a63      	ldr	r2, [pc, #396]	; (8000914 <TCS34725_GetRGB888+0x1b4>)
 8000786:	fba2 2303 	umull	r2, r3, r2, r3
 800078a:	09db      	lsrs	r3, r3, #7
 800078c:	b29b      	uxth	r3, r3
 800078e:	3301      	adds	r3, #1
 8000790:	ee07 3a90 	vmov	s15, r3
 8000794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000798:	edc7 7a03 	vstr	s15, [r7, #12]
 800079c:	e02a      	b.n	80007f4 <TCS34725_GetRGB888+0x94>
    }
    else if(rgb.G >= rgb.R && rgb.G >= rgb.B){
 800079e:	887a      	ldrh	r2, [r7, #2]
 80007a0:	883b      	ldrh	r3, [r7, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d311      	bcc.n	80007ca <TCS34725_GetRGB888+0x6a>
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	88bb      	ldrh	r3, [r7, #4]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d30d      	bcc.n	80007ca <TCS34725_GetRGB888+0x6a>
        i = rgb.G / 255 + 1;
 80007ae:	887b      	ldrh	r3, [r7, #2]
 80007b0:	4a58      	ldr	r2, [pc, #352]	; (8000914 <TCS34725_GetRGB888+0x1b4>)
 80007b2:	fba2 2303 	umull	r2, r3, r2, r3
 80007b6:	09db      	lsrs	r3, r3, #7
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	3301      	adds	r3, #1
 80007bc:	ee07 3a90 	vmov	s15, r3
 80007c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c4:	edc7 7a03 	vstr	s15, [r7, #12]
 80007c8:	e014      	b.n	80007f4 <TCS34725_GetRGB888+0x94>
    }
    else if(rgb.B >=  rgb.G && rgb.B >= rgb.R){
 80007ca:	88ba      	ldrh	r2, [r7, #4]
 80007cc:	887b      	ldrh	r3, [r7, #2]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d310      	bcc.n	80007f4 <TCS34725_GetRGB888+0x94>
 80007d2:	88ba      	ldrh	r2, [r7, #4]
 80007d4:	883b      	ldrh	r3, [r7, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d30c      	bcc.n	80007f4 <TCS34725_GetRGB888+0x94>
        i = rgb.B / 255 + 1;
 80007da:	88bb      	ldrh	r3, [r7, #4]
 80007dc:	4a4d      	ldr	r2, [pc, #308]	; (8000914 <TCS34725_GetRGB888+0x1b4>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	09db      	lsrs	r3, r3, #7
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	3301      	adds	r3, #1
 80007e8:	ee07 3a90 	vmov	s15, r3
 80007ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f0:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    if(i!=0)
 80007f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80007f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000800:	d02c      	beq.n	800085c <TCS34725_GetRGB888+0xfc>
    {
        rgb.R = (rgb.R) / i;
 8000802:	883b      	ldrh	r3, [r7, #0]
 8000804:	ee07 3a90 	vmov	s15, r3
 8000808:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800080c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000818:	ee17 3a90 	vmov	r3, s15
 800081c:	b29b      	uxth	r3, r3
 800081e:	803b      	strh	r3, [r7, #0]
        rgb.G = (rgb.G) / i;
 8000820:	887b      	ldrh	r3, [r7, #2]
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800082a:	ed97 7a03 	vldr	s14, [r7, #12]
 800082e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000836:	ee17 3a90 	vmov	r3, s15
 800083a:	b29b      	uxth	r3, r3
 800083c:	807b      	strh	r3, [r7, #2]
        rgb.B = (rgb.B) / i;
 800083e:	88bb      	ldrh	r3, [r7, #4]
 8000840:	ee07 3a90 	vmov	s15, r3
 8000844:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000848:	ed97 7a03 	vldr	s14, [r7, #12]
 800084c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000854:	ee17 3a90 	vmov	r3, s15
 8000858:	b29b      	uxth	r3, r3
 800085a:	80bb      	strh	r3, [r7, #4]
    }

    if(rgb.R > 30)
 800085c:	883b      	ldrh	r3, [r7, #0]
 800085e:	2b1e      	cmp	r3, #30
 8000860:	d903      	bls.n	800086a <TCS34725_GetRGB888+0x10a>
        rgb.R = rgb.R - 30;
 8000862:	883b      	ldrh	r3, [r7, #0]
 8000864:	3b1e      	subs	r3, #30
 8000866:	b29b      	uxth	r3, r3
 8000868:	803b      	strh	r3, [r7, #0]
    if(rgb.G > 30)
 800086a:	887b      	ldrh	r3, [r7, #2]
 800086c:	2b1e      	cmp	r3, #30
 800086e:	d903      	bls.n	8000878 <TCS34725_GetRGB888+0x118>
        rgb.G = rgb.G - 30;
 8000870:	887b      	ldrh	r3, [r7, #2]
 8000872:	3b1e      	subs	r3, #30
 8000874:	b29b      	uxth	r3, r3
 8000876:	807b      	strh	r3, [r7, #2]
    if(rgb.B > 30)
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	2b1e      	cmp	r3, #30
 800087c:	d903      	bls.n	8000886 <TCS34725_GetRGB888+0x126>
        rgb.B = rgb.B - 30;
 800087e:	88bb      	ldrh	r3, [r7, #4]
 8000880:	3b1e      	subs	r3, #30
 8000882:	b29b      	uxth	r3, r3
 8000884:	80bb      	strh	r3, [r7, #4]
    rgb.R = rgb.R * 255 / 225;
 8000886:	883b      	ldrh	r3, [r7, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4613      	mov	r3, r2
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <TCS34725_GetRGB888+0x1b8>)
 8000892:	fb82 1203 	smull	r1, r2, r2, r3
 8000896:	441a      	add	r2, r3
 8000898:	11d2      	asrs	r2, r2, #7
 800089a:	17db      	asrs	r3, r3, #31
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	b29b      	uxth	r3, r3
 80008a0:	803b      	strh	r3, [r7, #0]
    rgb.G = rgb.G * 255 / 225;
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4613      	mov	r3, r2
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	1a9b      	subs	r3, r3, r2
 80008ac:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <TCS34725_GetRGB888+0x1b8>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	441a      	add	r2, r3
 80008b4:	11d2      	asrs	r2, r2, #7
 80008b6:	17db      	asrs	r3, r3, #31
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	807b      	strh	r3, [r7, #2]
    rgb.B = rgb.B * 255 / 225;
 80008be:	88bb      	ldrh	r3, [r7, #4]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4613      	mov	r3, r2
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <TCS34725_GetRGB888+0x1b8>)
 80008ca:	fb82 1203 	smull	r1, r2, r2, r3
 80008ce:	441a      	add	r2, r3
 80008d0:	11d2      	asrs	r2, r2, #7
 80008d2:	17db      	asrs	r3, r3, #31
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	80bb      	strh	r3, [r7, #4]

    if(rgb.R>255)
 80008da:	883b      	ldrh	r3, [r7, #0]
 80008dc:	2bff      	cmp	r3, #255	; 0xff
 80008de:	d901      	bls.n	80008e4 <TCS34725_GetRGB888+0x184>
           rgb.R = 255;
 80008e0:	23ff      	movs	r3, #255	; 0xff
 80008e2:	803b      	strh	r3, [r7, #0]
    if(rgb.G>255)
 80008e4:	887b      	ldrh	r3, [r7, #2]
 80008e6:	2bff      	cmp	r3, #255	; 0xff
 80008e8:	d901      	bls.n	80008ee <TCS34725_GetRGB888+0x18e>
           rgb.G = 255;
 80008ea:	23ff      	movs	r3, #255	; 0xff
 80008ec:	807b      	strh	r3, [r7, #2]
    if(rgb.B>255)
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	2bff      	cmp	r3, #255	; 0xff
 80008f2:	d901      	bls.n	80008f8 <TCS34725_GetRGB888+0x198>
           rgb.B = 255;
 80008f4:	23ff      	movs	r3, #255	; 0xff
 80008f6:	80bb      	strh	r3, [r7, #4]
    return (rgb.R << 16) | (rgb.G << 8) | (rgb.B);
 80008f8:	883b      	ldrh	r3, [r7, #0]
 80008fa:	041a      	lsls	r2, r3, #16
 80008fc:	887b      	ldrh	r3, [r7, #2]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	4313      	orrs	r3, r2
 8000902:	88ba      	ldrh	r2, [r7, #4]
 8000904:	4313      	orrs	r3, r2
}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	80808081 	.word	0x80808081
 8000918:	91a2b3c5 	.word	0x91a2b3c5

0800091c <TCS34725_Set_Interrupt_Threshold>:
parameter	:
     rgb    : RGBC Numerical value
******************************************************************************/

static void TCS34725_Set_Interrupt_Threshold(uint16_t Threshold_H, uint16_t Threshold_L)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	80fb      	strh	r3, [r7, #6]
 8000928:	4613      	mov	r3, r2
 800092a:	80bb      	strh	r3, [r7, #4]
    TCS34725_WriteByte(TCS34725_AILTL, Threshold_L & 0xff);
 800092c:	88bb      	ldrh	r3, [r7, #4]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4619      	mov	r1, r3
 8000932:	2004      	movs	r0, #4
 8000934:	f7ff fea8 	bl	8000688 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AILTH, Threshold_L >> 8);
 8000938:	88bb      	ldrh	r3, [r7, #4]
 800093a:	0a1b      	lsrs	r3, r3, #8
 800093c:	b29b      	uxth	r3, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	2005      	movs	r0, #5
 8000944:	f7ff fea0 	bl	8000688 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AIHTL, Threshold_H & 0xff);
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4619      	mov	r1, r3
 800094e:	2006      	movs	r0, #6
 8000950:	f7ff fe9a 	bl	8000688 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AIHTH, Threshold_H >> 8);
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	0a1b      	lsrs	r3, r3, #8
 8000958:	b29b      	uxth	r3, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4619      	mov	r1, r3
 800095e:	2007      	movs	r0, #7
 8000960:	f7ff fe92 	bl	8000688 <TCS34725_WriteByte>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <TCS34725_Set_Interrupt_Persistence_Reg>:

static void TCS34725_Set_Interrupt_Persistence_Reg(uint8_t TCS34725_PER)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
    if(TCS34725_PER < 0x10)
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d805      	bhi.n	8000988 <TCS34725_Set_Interrupt_Persistence_Reg+0x1c>
        TCS34725_WriteByte(0x0C, TCS34725_PER);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4619      	mov	r1, r3
 8000980:	200c      	movs	r0, #12
 8000982:	f7ff fe81 	bl	8000688 <TCS34725_WriteByte>
    else
        TCS34725_WriteByte(0x0C, 0x0f);
}
 8000986:	e003      	b.n	8000990 <TCS34725_Set_Interrupt_Persistence_Reg+0x24>
        TCS34725_WriteByte(0x0C, 0x0f);
 8000988:	210f      	movs	r1, #15
 800098a:	200c      	movs	r0, #12
 800098c:	f7ff fe7c 	bl	8000688 <TCS34725_WriteByte>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <TCS34725_GetLux_Interrupt>:

uint8_t TCS34725_GetLux_Interrupt(uint16_t Threshold_H, uint16_t Threshold_L)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	80fb      	strh	r3, [r7, #6]
 80009a4:	4613      	mov	r3, r2
 80009a6:	80bb      	strh	r3, [r7, #4]
    TCS34725_Set_Interrupt_Threshold(Threshold_H, Threshold_L);
 80009a8:	88ba      	ldrh	r2, [r7, #4]
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ffb4 	bl	800091c <TCS34725_Set_Interrupt_Threshold>
    if(HAL_GPIO_ReadPin(TIM3, TIM_CHANNEL_4) == 0){
 80009b4:	210c      	movs	r1, #12
 80009b6:	480a      	ldr	r0, [pc, #40]	; (80009e0 <TCS34725_GetLux_Interrupt+0x48>)
 80009b8:	f000 ff7e 	bl	80018b8 <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d108      	bne.n	80009d4 <TCS34725_GetLux_Interrupt+0x3c>
    	TCS34725_WriteByte(0x66, 0x00);
 80009c2:	2100      	movs	r1, #0
 80009c4:	2066      	movs	r0, #102	; 0x66
 80009c6:	f7ff fe5f 	bl	8000688 <TCS34725_WriteByte>
        TCS34725_Set_Interrupt_Persistence_Reg(0x02);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f7ff ffce 	bl	800096c <TCS34725_Set_Interrupt_Persistence_Reg>
        return 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e000      	b.n	80009d6 <TCS34725_GetLux_Interrupt+0x3e>
    }
    return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40000400 	.word	0x40000400

080009e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b096      	sub	sp, #88	; 0x58
 80009e8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	RGB rgb;
	uint32_t RGB888=0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t r_data=0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t g_data=0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint8_t b_data=0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a00:	f000 fc47 	bl	8001292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a04:	f000 f870 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a08:	f000 f994 	bl	8000d34 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000a0c:	f000 f8c8 	bl	8000ba0 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000a10:	f000 f960 	bl	8000cd4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000a14:	f000 f904 	bl	8000c20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TCS34725_Init();
 8000a18:	f7ff fe4c 	bl	80006b4 <TCS34725_Init>
//    TCS34725_INTEGRATIONTIME_24MS   = 0xF6,   /**<  24ms  - 10 cycles  - Max Count: 10240 */
//    TCS34725_INTEGRATIONTIME_50MS   = 0xEB,   /**<  50ms  - 20 cycles  - Max Count: 20480 */
//    TCS34725_INTEGRATIONTIME_101MS  = 0xD5,   /**<  101ms - 42 cycles  - Max Count: 43008 */
//    TCS34725_INTEGRATIONTIME_154MS  = 0xC0,   /**<  154ms - 64 cycles  - Max Count: 65535 */
//    TCS34725_INTEGRATIONTIME_700MS  = 0x00    /**<  700ms - 256 cycles - Max Count: 65535 */
  TCS34725_Set_Integration_Time(0xD5);
 8000a1c:	20d5      	movs	r0, #213	; 0xd5
 8000a1e:	f7ff fe5b 	bl	80006d8 <TCS34725_Set_Integration_Time>

//    TCS34725_GAIN_1X                = 0x00,   /**<  No gain  */
//    TCS34725_GAIN_4X                = 0x01,   /**<  4x gain  */
//    TCS34725_GAIN_16X               = 0x02,   /**<  16x gain */
//    TCS34725_GAIN_60X               = 0x03    /**<  60x gain */
  TCS34725_Set_Gain(0x01);
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fe67 	bl	80006f6 <TCS34725_Set_Gain>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint32_t pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000a28:	2108      	movs	r1, #8
 8000a2a:	4829      	ldr	r0, [pc, #164]	; (8000ad0 <main+0xec>)
 8000a2c:	f000 ff44 	bl	80018b8 <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
//	  if (pin_state != GPIO_PIN_SET) {
//		  buffer_len = sprintf(buffer, "PIN SET\n");
//		  status = HAL_UART_Transmit(&huart3, (uint8_t *) buffer, buffer_len, 100);
//	    }

	if (pin_state != GPIO_PIN_SET) {
 8000a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d0f6      	beq.n	8000a28 <main+0x44>
		rgb=TCS34725_Get_RGBData();
 8000a3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fe68 	bl	8000714 <TCS34725_Get_RGBData>
		RGB888=TCS34725_GetRGB888(rgb);
 8000a44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a4c:	f7ff fe88 	bl	8000760 <TCS34725_GetRGB888>
 8000a50:	64f8      	str	r0, [r7, #76]	; 0x4c
		r_data = RGB888>>16;
 8000a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a54:	0c1b      	lsrs	r3, r3, #16
 8000a56:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		g_data = (RGB888>>8) & 0xff;
 8000a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		b_data = (RGB888) & 0xff;
 8000a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a64:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

		buffer_len = sprintf(buffer, "%u,%u,%u\n", r_data, g_data, b_data);
 8000a68:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000a6c:	f897 104a 	ldrb.w	r1, [r7, #74]	; 0x4a
 8000a70:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000a74:	4638      	mov	r0, r7
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	4916      	ldr	r1, [pc, #88]	; (8000ad4 <main+0xf0>)
 8000a7c:	f003 ffde 	bl	8004a3c <siprintf>
 8000a80:	6438      	str	r0, [r7, #64]	; 0x40
		status = HAL_UART_Transmit(&huart3, (uint8_t *) buffer, buffer_len, 100);
 8000a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4639      	mov	r1, r7
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <main+0xf4>)
 8000a8c:	f003 fb38 	bl	8004100 <HAL_UART_Transmit>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (status != HAL_OK) {
 8000a96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <main+0xc2>
			HAL_Delay(5000);
 8000a9e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aa2:	f000 fc53 	bl	800134c <HAL_Delay>
		}

		if(TCS34725_GetLux_Interrupt(0xff00, 0x0Cff) == 1){
 8000aa6:	f640 41ff 	movw	r1, #3327	; 0xcff
 8000aaa:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8000aae:	f7ff ff73 	bl	8000998 <TCS34725_GetLux_Interrupt>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d103      	bne.n	8000ac0 <main+0xdc>
			printf("Lux_Interrupt = 1\r\n");
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <main+0xf8>)
 8000aba:	f004 f8f5 	bl	8004ca8 <puts>
 8000abe:	e002      	b.n	8000ac6 <main+0xe2>
		}else{
			printf("Lux_Interrupt = 0\r\n");
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <main+0xfc>)
 8000ac2:	f004 f8f1 	bl	8004ca8 <puts>
		}
		printf("\r\n");
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <main+0x100>)
 8000ac8:	f004 f8ee 	bl	8004ca8 <puts>
  {
 8000acc:	e7ac      	b.n	8000a28 <main+0x44>
 8000ace:	bf00      	nop
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	08005a7c 	.word	0x08005a7c
 8000ad8:	20000124 	.word	0x20000124
 8000adc:	08005a88 	.word	0x08005a88
 8000ae0:	08005a9c 	.word	0x08005a9c
 8000ae4:	08005ab0 	.word	0x08005ab0

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	; 0x50
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2234      	movs	r2, #52	; 0x34
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 f8de 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <SystemClock_Config+0xb0>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <SystemClock_Config+0xb0>)
 8000b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <SystemClock_Config+0xb0>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <SystemClock_Config+0xb4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <SystemClock_Config+0xb4>)
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <SystemClock_Config+0xb4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fcd1 	bl	80024fc <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000b60:	f000 f94c 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 ff6a 	bl	8002a58 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b8a:	f000 f937 	bl	8000dfc <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3750      	adds	r7, #80	; 0x50
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <MX_I2C2_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <MX_I2C2_Init+0x7c>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bda:	480e      	ldr	r0, [pc, #56]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bdc:	f000 fe9e 	bl	800191c <HAL_I2C_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000be6:	f000 f909 	bl	8000dfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bee:	f001 fbed 	bl	80023cc <HAL_I2CEx_ConfigAnalogFilter>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bf8:	f000 f900 	bl	8000dfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000c00:	f001 fc2f 	bl	8002462 <HAL_I2CEx_ConfigDigitalFilter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f000 f8f7 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000084 	.word	0x20000084
 8000c18:	40005800 	.word	0x40005800
 8000c1c:	00303d5b 	.word	0x00303d5b

08000c20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
 8000c40:	615a      	str	r2, [r3, #20]
 8000c42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <MX_TIM3_Init+0xac>)
 8000c46:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <MX_TIM3_Init+0xb0>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36-1;
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <MX_TIM3_Init+0xac>)
 8000c4c:	2223      	movs	r2, #35	; 0x23
 8000c4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <MX_TIM3_Init+0xac>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_TIM3_Init+0xac>)
 8000c58:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_TIM3_Init+0xac>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_TIM3_Init+0xac>)
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c6a:	4818      	ldr	r0, [pc, #96]	; (8000ccc <MX_TIM3_Init+0xac>)
 8000c6c:	f002 fd02 	bl	8003674 <HAL_TIM_PWM_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c76:	f000 f8c1 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4810      	ldr	r0, [pc, #64]	; (8000ccc <MX_TIM3_Init+0xac>)
 8000c8a:	f003 f95d 	bl	8003f48 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c94:	f000 f8b2 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c98:	2360      	movs	r3, #96	; 0x60
 8000c9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	220c      	movs	r2, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	4807      	ldr	r0, [pc, #28]	; (8000ccc <MX_TIM3_Init+0xac>)
 8000cb0:	f002 fd38 	bl	8003724 <HAL_TIM_PWM_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000cba:	f000 f89f 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cbe:	4803      	ldr	r0, [pc, #12]	; (8000ccc <MX_TIM3_Init+0xac>)
 8000cc0:	f000 f946 	bl	8000f50 <HAL_TIM_MspPostInit>

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200000d8 	.word	0x200000d8
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <MX_USART3_UART_Init+0x5c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d18:	f003 f9a4 	bl	8004064 <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d22:	f000 f86b 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000124 	.word	0x20000124
 8000d30:	40004800 	.word	0x40004800

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a16      	ldr	r2, [pc, #88]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_GPIO_Init+0xbc>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2101      	movs	r1, #1
 8000dae:	4811      	ldr	r0, [pc, #68]	; (8000df4 <MX_GPIO_Init+0xc0>)
 8000db0:	f000 fd9a 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000db4:	2308      	movs	r3, #8
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480c      	ldr	r0, [pc, #48]	; (8000df8 <MX_GPIO_Init+0xc4>)
 8000dc8:	f000 fbca 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4804      	ldr	r0, [pc, #16]	; (8000df4 <MX_GPIO_Init+0xc0>)
 8000de4:	f000 fbbc 	bl	8001560 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40020000 	.word	0x40020000

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_MspInit+0x44>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_MspInit+0x44>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MspInit+0x44>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0ae      	sub	sp, #184	; 0xb8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2290      	movs	r2, #144	; 0x90
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 ff21 	bl	8004cb8 <memset>
  if(hi2c->Instance==I2C2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <HAL_I2C_MspInit+0xb4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d13c      	bne.n	8000efa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 ffc8 	bl	8002e24 <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e9a:	f7ff ffaf 	bl	8000dfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_I2C_MspInit+0xb8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <HAL_I2C_MspInit+0xb8>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_I2C_MspInit+0xb8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebe:	2312      	movs	r3, #18
 8000ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <HAL_I2C_MspInit+0xbc>)
 8000ede:	f000 fb3f 	bl	8001560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_I2C_MspInit+0xb8>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_I2C_MspInit+0xb8>)
 8000ee8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_I2C_MspInit+0xb8>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	37b8      	adds	r7, #184	; 0xb8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40005800 	.word	0x40005800
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020400 	.word	0x40020400

08000f10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_TIM_PWM_MspInit+0x38>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10b      	bne.n	8000f3a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40000400 	.word	0x40000400
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <HAL_TIM_MspPostInit+0x64>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d11b      	bne.n	8000faa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_TIM_MspPostInit+0x68>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_TIM_MspPostInit+0x68>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_TIM_MspPostInit+0x68>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_TIM_MspPostInit+0x6c>)
 8000fa6:	f000 fadb 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40000400 	.word	0x40000400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0ae      	sub	sp, #184	; 0xb8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2290      	movs	r2, #144	; 0x90
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fe69 	bl	8004cb8 <memset>
  if(huart->Instance==USART3)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <HAL_UART_MspInit+0xb4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d13c      	bne.n	800106a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 ff10 	bl	8002e24 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800100a:	f7ff fef7 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_UART_MspInit+0xb8>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a19      	ldr	r2, [pc, #100]	; (8001078 <HAL_UART_MspInit+0xb8>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_UART_MspInit+0xb8>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_UART_MspInit+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <HAL_UART_MspInit+0xb8>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_UART_MspInit+0xb8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800103e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001058:	2307      	movs	r3, #7
 800105a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_UART_MspInit+0xbc>)
 8001066:	f000 fa7b 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	37b8      	adds	r7, #184	; 0xb8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004800 	.word	0x40004800
 8001078:	40023800 	.word	0x40023800
 800107c:	40020c00 	.word	0x40020c00

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <NMI_Handler+0x4>

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 f91e 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	e00a      	b.n	80010fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010e6:	f3af 8000 	nop.w
 80010ea:	4601      	mov	r1, r0
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	b2ca      	uxtb	r2, r1
 80010f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf0      	blt.n	80010e6 <_read+0x12>
  }

  return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e009      	b.n	8001134 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	60ba      	str	r2, [r7, #8]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	dbf1      	blt.n	8001120 <_write+0x12>
  }
  return len;
 800113c:	687b      	ldr	r3, [r7, #4]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_close>:

int _close(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800116e:	605a      	str	r2, [r3, #4]
  return 0;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_isatty>:

int _isatty(int file)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f003 fd72 	bl	8004cc8 <__errno>
 80011e4:	4603      	mov	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <_sbrk+0x64>)
 8001200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20080000 	.word	0x20080000
 8001210:	00000400 	.word	0x00000400
 8001214:	200001ac 	.word	0x200001ac
 8001218:	20000300 	.word	0x20000300

0800121c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001246:	490e      	ldr	r1, [pc, #56]	; (8001280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800125c:	4c0b      	ldr	r4, [pc, #44]	; (800128c <LoopFillZerobss+0x26>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126a:	f7ff ffd7 	bl	800121c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126e:	f003 fd31 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff fbb7 	bl	80009e4 <main>
  bx  lr    
 8001276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001280:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001284:	08005b10 	.word	0x08005b10
  ldr r2, =_sbss
 8001288:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800128c:	20000300 	.word	0x20000300

08001290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC_IRQHandler>

08001292 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001296:	2003      	movs	r0, #3
 8001298:	f000 f92e 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129c:	200f      	movs	r0, #15
 800129e:	f000 f805 	bl	80012ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a2:	f7ff fdb1 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x54>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x58>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f93b 	bl	8001546 <HAL_SYSTICK_Config>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00e      	b.n	80012f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d80a      	bhi.n	80012f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012e8:	f000 f911 	bl	800150e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <HAL_InitTick+0x5c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000000 	.word	0x20000000
 8001304:	20000008 	.word	0x20000008
 8001308:	20000004 	.word	0x20000004

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008
 8001330:	200001b0 	.word	0x200001b0

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200001b0 	.word	0x200001b0

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffde 	bl	8001334 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x40>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	05fa0000 	.word	0x05fa0000

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	; (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d8:	f7ff ff8e 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff47 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff5c 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ff8e 	bl	800144c <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5d 	bl	80013f8 <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffb0 	bl	80014b4 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e175      	b.n	800186c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8164 	bne.w	8001866 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d005      	beq.n	80015b6 <HAL_GPIO_Init+0x56>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d130      	bne.n	8001618 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b03      	cmp	r3, #3
 8001622:	d017      	beq.n	8001654 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d123      	bne.n	80016a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0203 	and.w	r2, r3, #3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80be 	beq.w	8001866 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b66      	ldr	r3, [pc, #408]	; (8001884 <HAL_GPIO_Init+0x324>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a65      	ldr	r2, [pc, #404]	; (8001884 <HAL_GPIO_Init+0x324>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_GPIO_Init+0x324>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001702:	4a61      	ldr	r2, [pc, #388]	; (8001888 <HAL_GPIO_Init+0x328>)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	220f      	movs	r2, #15
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a58      	ldr	r2, [pc, #352]	; (800188c <HAL_GPIO_Init+0x32c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d037      	beq.n	800179e <HAL_GPIO_Init+0x23e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a57      	ldr	r2, [pc, #348]	; (8001890 <HAL_GPIO_Init+0x330>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d031      	beq.n	800179a <HAL_GPIO_Init+0x23a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a56      	ldr	r2, [pc, #344]	; (8001894 <HAL_GPIO_Init+0x334>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d02b      	beq.n	8001796 <HAL_GPIO_Init+0x236>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a55      	ldr	r2, [pc, #340]	; (8001898 <HAL_GPIO_Init+0x338>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d025      	beq.n	8001792 <HAL_GPIO_Init+0x232>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a54      	ldr	r2, [pc, #336]	; (800189c <HAL_GPIO_Init+0x33c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01f      	beq.n	800178e <HAL_GPIO_Init+0x22e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a53      	ldr	r2, [pc, #332]	; (80018a0 <HAL_GPIO_Init+0x340>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d019      	beq.n	800178a <HAL_GPIO_Init+0x22a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <HAL_GPIO_Init+0x344>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x226>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a51      	ldr	r2, [pc, #324]	; (80018a8 <HAL_GPIO_Init+0x348>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x222>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a50      	ldr	r2, [pc, #320]	; (80018ac <HAL_GPIO_Init+0x34c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x21e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4f      	ldr	r2, [pc, #316]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x21a>
 8001776:	2309      	movs	r3, #9
 8001778:	e012      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800177a:	230a      	movs	r3, #10
 800177c:	e010      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800177e:	2308      	movs	r3, #8
 8001780:	e00e      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001782:	2307      	movs	r3, #7
 8001784:	e00c      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001786:	2306      	movs	r3, #6
 8001788:	e00a      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800178a:	2305      	movs	r3, #5
 800178c:	e008      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800178e:	2304      	movs	r3, #4
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001792:	2303      	movs	r3, #3
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800179e:	2300      	movs	r3, #0
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f002 0203 	and.w	r2, r2, #3
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017b0:	4935      	ldr	r1, [pc, #212]	; (8001888 <HAL_GPIO_Init+0x328>)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_GPIO_Init+0x354>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e2:	4a34      	ldr	r2, [pc, #208]	; (80018b4 <HAL_GPIO_Init+0x354>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_GPIO_Init+0x354>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800180c:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <HAL_GPIO_Init+0x354>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001812:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <HAL_GPIO_Init+0x354>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <HAL_GPIO_Init+0x354>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_GPIO_Init+0x354>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_GPIO_Init+0x354>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3301      	adds	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	f67f ae86 	bls.w	8001580 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3724      	adds	r7, #36	; 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40013800 	.word	0x40013800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	40021400 	.word	0x40021400
 80018a4:	40021800 	.word	0x40021800
 80018a8:	40021c00 	.word	0x40021c00
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40022400 	.word	0x40022400
 80018b4:	40013c00 	.word	0x40013c00

080018b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e001      	b.n	80018da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
 80018f4:	4613      	mov	r3, r2
 80018f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f8:	787b      	ldrb	r3, [r7, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001904:	e003      	b.n	800190e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	041a      	lsls	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	619a      	str	r2, [r3, #24]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e07f      	b.n	8001a2e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fa84 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2224      	movs	r2, #36	; 0x24
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800196c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800197c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	e006      	b.n	80019a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d104      	bne.n	80019b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_I2C_Init+0x11c>)
 80019c2:	430b      	orrs	r3, r1
 80019c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69d9      	ldr	r1, [r3, #28]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	02008000 	.word	0x02008000

08001a3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	817b      	strh	r3, [r7, #10]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	813b      	strh	r3, [r7, #8]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	f040 80f9 	bne.w	8001c56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_I2C_Mem_Write+0x34>
 8001a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0ed      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_I2C_Mem_Write+0x4e>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e0e6      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a92:	f7ff fc4f 	bl	8001334 <HAL_GetTick>
 8001a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2319      	movs	r3, #25
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 fac3 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0d1      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2221      	movs	r2, #33	; 0x21
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2240      	movs	r2, #64	; 0x40
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001adc:	88f8      	ldrh	r0, [r7, #6]
 8001ade:	893a      	ldrh	r2, [r7, #8]
 8001ae0:	8979      	ldrh	r1, [r7, #10]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	4603      	mov	r3, r0
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f9d3 	bl	8001e98 <I2C_RequestMemoryWrite>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0a9      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2bff      	cmp	r3, #255	; 0xff
 8001b0c:	d90e      	bls.n	8001b2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	22ff      	movs	r2, #255	; 0xff
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	8979      	ldrh	r1, [r7, #10]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fc1f 	bl	8002368 <I2C_TransferConfig>
 8001b2a:	e00f      	b.n	8001b4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	8979      	ldrh	r1, [r7, #10]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fc0e 	bl	8002368 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 faad 	bl	80020b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e07b      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d034      	beq.n	8001c04 <HAL_I2C_Mem_Write+0x1c8>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d130      	bne.n	8001c04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 fa3f 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e04d      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	d90e      	bls.n	8001be4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	22ff      	movs	r2, #255	; 0xff
 8001bca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	8979      	ldrh	r1, [r7, #10]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 fbc3 	bl	8002368 <I2C_TransferConfig>
 8001be2:	e00f      	b.n	8001c04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	8979      	ldrh	r1, [r7, #10]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fbb2 	bl	8002368 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d19e      	bne.n	8001b4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fa8c 	bl	8002130 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e01a      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2220      	movs	r2, #32
 8001c28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_I2C_Mem_Write+0x224>)
 8001c36:	400b      	ands	r3, r1
 8001c38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
  }
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	fe00e800 	.word	0xfe00e800

08001c64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	4611      	mov	r1, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	817b      	strh	r3, [r7, #10]
 8001c76:	460b      	mov	r3, r1
 8001c78:	813b      	strh	r3, [r7, #8]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	f040 80fd 	bne.w	8001e86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_I2C_Mem_Read+0x34>
 8001c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0f1      	b.n	8001e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2C_Mem_Read+0x4e>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e0ea      	b.n	8001e88 <HAL_I2C_Mem_Read+0x224>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cba:	f7ff fb3b 	bl	8001334 <HAL_GetTick>
 8001cbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2319      	movs	r3, #25
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f9af 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0d5      	b.n	8001e88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2222      	movs	r2, #34	; 0x22
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2240      	movs	r2, #64	; 0x40
 8001ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d04:	88f8      	ldrh	r0, [r7, #6]
 8001d06:	893a      	ldrh	r2, [r7, #8]
 8001d08:	8979      	ldrh	r1, [r7, #10]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	4603      	mov	r3, r0
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f913 	bl	8001f40 <I2C_RequestMemoryRead>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0ad      	b.n	8001e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	d90e      	bls.n	8001d54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	22ff      	movs	r2, #255	; 0xff
 8001d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	8979      	ldrh	r1, [r7, #10]
 8001d44:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <HAL_I2C_Mem_Read+0x22c>)
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fb0b 	bl	8002368 <I2C_TransferConfig>
 8001d52:	e00f      	b.n	8001d74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	8979      	ldrh	r1, [r7, #10]
 8001d66:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <HAL_I2C_Mem_Read+0x22c>)
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fafa 	bl	8002368 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f956 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07c      	b.n	8001e88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d034      	beq.n	8001e34 <HAL_I2C_Mem_Read+0x1d0>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d130      	bne.n	8001e34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f927 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e04d      	b.n	8001e88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2bff      	cmp	r3, #255	; 0xff
 8001df4:	d90e      	bls.n	8001e14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	22ff      	movs	r2, #255	; 0xff
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	8979      	ldrh	r1, [r7, #10]
 8001e04:	2300      	movs	r3, #0
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 faab 	bl	8002368 <I2C_TransferConfig>
 8001e12:	e00f      	b.n	8001e34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	8979      	ldrh	r1, [r7, #10]
 8001e26:	2300      	movs	r3, #0
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fa9a 	bl	8002368 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d19a      	bne.n	8001d74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f974 	bl	8002130 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e01a      	b.n	8001e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2220      	movs	r2, #32
 8001e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_I2C_Mem_Read+0x230>)
 8001e66:	400b      	ands	r3, r1
 8001e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
  }
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	80002400 	.word	0x80002400
 8001e94:	fe00e800 	.word	0xfe00e800

08001e98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	813b      	strh	r3, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	8979      	ldrh	r1, [r7, #10]
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <I2C_RequestMemoryWrite+0xa4>)
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fa51 	bl	8002368 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	69b9      	ldr	r1, [r7, #24]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f8f0 	bl	80020b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e02c      	b.n	8001f34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ee0:	893b      	ldrh	r3, [r7, #8]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8001eea:	e015      	b.n	8001f18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eec:	893b      	ldrh	r3, [r7, #8]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	69b9      	ldr	r1, [r7, #24]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f8d6 	bl	80020b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e012      	b.n	8001f34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f0e:	893b      	ldrh	r3, [r7, #8]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f884 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	80002000 	.word	0x80002000

08001f40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	817b      	strh	r3, [r7, #10]
 8001f52:	460b      	mov	r3, r1
 8001f54:	813b      	strh	r3, [r7, #8]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	8979      	ldrh	r1, [r7, #10]
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <I2C_RequestMemoryRead+0xa4>)
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2300      	movs	r3, #0
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f9fe 	bl	8002368 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	69b9      	ldr	r1, [r7, #24]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f89d 	bl	80020b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e02c      	b.n	8001fda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f86:	893b      	ldrh	r3, [r7, #8]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f90:	e015      	b.n	8001fbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f92:	893b      	ldrh	r3, [r7, #8]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f883 	bl	80020b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e012      	b.n	8001fda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fb4:	893b      	ldrh	r3, [r7, #8]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2140      	movs	r1, #64	; 0x40
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f831 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	80002000 	.word	0x80002000

08001fe8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d103      	bne.n	8002006 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d007      	beq.n	8002024 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	619a      	str	r2, [r3, #24]
  }
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002040:	e022      	b.n	8002088 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002048:	d01e      	beq.n	8002088 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7ff f973 	bl	8001334 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d113      	bne.n	8002088 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e00f      	b.n	80020a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4013      	ands	r3, r2
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	429a      	cmp	r2, r3
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d0cd      	beq.n	8002042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020bc:	e02c      	b.n	8002118 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f870 	bl	80021a8 <I2C_IsErrorOccurred>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e02a      	b.n	8002128 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020d8:	d01e      	beq.n	8002118 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7ff f92b 	bl	8001334 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d113      	bne.n	8002118 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f043 0220 	orr.w	r2, r3, #32
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e007      	b.n	8002128 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b02      	cmp	r3, #2
 8002124:	d1cb      	bne.n	80020be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800213c:	e028      	b.n	8002190 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f830 	bl	80021a8 <I2C_IsErrorOccurred>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e026      	b.n	80021a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7ff f8ef 	bl	8001334 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d113      	bne.n	8002190 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b20      	cmp	r3, #32
 800219c:	d1cf      	bne.n	800213e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d068      	beq.n	80022a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2210      	movs	r2, #16
 80021da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021dc:	e049      	b.n	8002272 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e4:	d045      	beq.n	8002272 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021e6:	f7ff f8a5 	bl	8001334 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <I2C_IsErrorOccurred+0x54>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d13a      	bne.n	8002272 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002206:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800220e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800221e:	d121      	bne.n	8002264 <I2C_IsErrorOccurred+0xbc>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002226:	d01d      	beq.n	8002264 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	2b20      	cmp	r3, #32
 800222c:	d01a      	beq.n	8002264 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800223c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800223e:	f7ff f879 	bl	8001334 <HAL_GetTick>
 8002242:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002244:	e00e      	b.n	8002264 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002246:	f7ff f875 	bl	8001334 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b19      	cmp	r3, #25
 8002252:	d907      	bls.n	8002264 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	f043 0320 	orr.w	r3, r3, #32
 800225a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002262:	e006      	b.n	8002272 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b20      	cmp	r3, #32
 8002270:	d1e9      	bne.n	8002246 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b20      	cmp	r3, #32
 800227e:	d003      	beq.n	8002288 <I2C_IsErrorOccurred+0xe0>
 8002280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0aa      	beq.n	80021de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800228c:	2b00      	cmp	r3, #0
 800228e:	d103      	bne.n	8002298 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2220      	movs	r2, #32
 8002296:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00b      	beq.n	8002314 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01c      	beq.n	8002356 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7ff fe63 	bl	8001fe8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <I2C_IsErrorOccurred+0x1bc>)
 800232e:	400b      	ands	r3, r1
 8002330:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800235a:	4618      	mov	r0, r3
 800235c:	3728      	adds	r7, #40	; 0x28
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	fe00e800 	.word	0xfe00e800

08002368 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	817b      	strh	r3, [r7, #10]
 8002376:	4613      	mov	r3, r2
 8002378:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800237a:	897b      	ldrh	r3, [r7, #10]
 800237c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002380:	7a7b      	ldrb	r3, [r7, #9]
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002388:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	4313      	orrs	r3, r2
 8002392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002396:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	0d5b      	lsrs	r3, r3, #21
 80023a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <I2C_TransferConfig+0x60>)
 80023a8:	430b      	orrs	r3, r1
 80023aa:	43db      	mvns	r3, r3
 80023ac:	ea02 0103 	and.w	r1, r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	03ff63ff 	.word	0x03ff63ff

080023cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d138      	bne.n	8002454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e032      	b.n	8002456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2224      	movs	r2, #36	; 0x24
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800241e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6819      	ldr	r1, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
  }
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b20      	cmp	r3, #32
 8002476:	d139      	bne.n	80024ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002482:	2302      	movs	r3, #2
 8002484:	e033      	b.n	80024ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2224      	movs	r2, #36	; 0x24
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e29b      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8087 	beq.w	800262e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002520:	4b96      	ldr	r3, [pc, #600]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b04      	cmp	r3, #4
 800252a:	d00c      	beq.n	8002546 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252c:	4b93      	ldr	r3, [pc, #588]	; (800277c <HAL_RCC_OscConfig+0x280>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d112      	bne.n	800255e <HAL_RCC_OscConfig+0x62>
 8002538:	4b90      	ldr	r3, [pc, #576]	; (800277c <HAL_RCC_OscConfig+0x280>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002544:	d10b      	bne.n	800255e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002546:	4b8d      	ldr	r3, [pc, #564]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d06c      	beq.n	800262c <HAL_RCC_OscConfig+0x130>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d168      	bne.n	800262c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e275      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x7a>
 8002568:	4b84      	ldr	r3, [pc, #528]	; (800277c <HAL_RCC_OscConfig+0x280>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a83      	ldr	r2, [pc, #524]	; (800277c <HAL_RCC_OscConfig+0x280>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e02e      	b.n	80025d4 <HAL_RCC_OscConfig+0xd8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x9c>
 800257e:	4b7f      	ldr	r3, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7e      	ldr	r2, [pc, #504]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b7c      	ldr	r3, [pc, #496]	; (800277c <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7b      	ldr	r2, [pc, #492]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e01d      	b.n	80025d4 <HAL_RCC_OscConfig+0xd8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0xc0>
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a75      	ldr	r2, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80025a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a72      	ldr	r2, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0xd8>
 80025bc:	4b6f      	ldr	r3, [pc, #444]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6e      	ldr	r2, [pc, #440]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80025c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6b      	ldr	r2, [pc, #428]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80025ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe feaa 	bl	8001334 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e4:	f7fe fea6 	bl	8001334 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e229      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0xe8>
 8002602:	e014      	b.n	800262e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fe96 	bl	8001334 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7fe fe92 	bl	8001334 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e215      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x110>
 800262a:	e000      	b.n	800262e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d069      	beq.n	800270e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800263a:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCC_OscConfig+0x280>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002646:	4b4d      	ldr	r3, [pc, #308]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b08      	cmp	r3, #8
 8002650:	d11c      	bne.n	800268c <HAL_RCC_OscConfig+0x190>
 8002652:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d116      	bne.n	800268c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x17a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e1e9      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	493d      	ldr	r1, [pc, #244]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	e040      	b.n	800270e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d023      	beq.n	80026dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002694:	4b39      	ldr	r3, [pc, #228]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a38      	ldr	r2, [pc, #224]	; (800277c <HAL_RCC_OscConfig+0x280>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fe48 	bl	8001334 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a8:	f7fe fe44 	bl	8001334 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1c7      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4929      	ldr	r1, [pc, #164]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]
 80026da:	e018      	b.n	800270e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a26      	ldr	r2, [pc, #152]	; (800277c <HAL_RCC_OscConfig+0x280>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fe24 	bl	8001334 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f0:	f7fe fe20 	bl	8001334 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1a3      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d038      	beq.n	800278c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d019      	beq.n	8002756 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7fe fe01 	bl	8001334 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002736:	f7fe fdfd 	bl	8001334 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e180      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HAL_RCC_OscConfig+0x280>)
 800274a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x23a>
 8002754:	e01a      	b.n	800278c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_OscConfig+0x280>)
 8002758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <HAL_RCC_OscConfig+0x280>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7fe fde7 	bl	8001334 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276a:	f7fe fde3 	bl	8001334 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d903      	bls.n	8002780 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e166      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
 800277c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	4b92      	ldr	r3, [pc, #584]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ee      	bne.n	800276a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a4 	beq.w	80028e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279a:	4b8c      	ldr	r3, [pc, #560]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10d      	bne.n	80027c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	4b89      	ldr	r3, [pc, #548]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a88      	ldr	r2, [pc, #544]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b86      	ldr	r3, [pc, #536]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027be:	2301      	movs	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c2:	4b83      	ldr	r3, [pc, #524]	; (80029d0 <HAL_RCC_OscConfig+0x4d4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d118      	bne.n	8002800 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027ce:	4b80      	ldr	r3, [pc, #512]	; (80029d0 <HAL_RCC_OscConfig+0x4d4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a7f      	ldr	r2, [pc, #508]	; (80029d0 <HAL_RCC_OscConfig+0x4d4>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027da:	f7fe fdab 	bl	8001334 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7fe fda7 	bl	8001334 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b64      	cmp	r3, #100	; 0x64
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e12a      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f4:	4b76      	ldr	r3, [pc, #472]	; (80029d0 <HAL_RCC_OscConfig+0x4d4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x31a>
 8002808:	4b70      	ldr	r3, [pc, #448]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a6f      	ldr	r2, [pc, #444]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	e02d      	b.n	8002872 <HAL_RCC_OscConfig+0x376>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x33c>
 800281e:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a6a      	ldr	r2, [pc, #424]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
 800282a:	4b68      	ldr	r3, [pc, #416]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a67      	ldr	r2, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002830:	f023 0304 	bic.w	r3, r3, #4
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	e01c      	b.n	8002872 <HAL_RCC_OscConfig+0x376>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b05      	cmp	r3, #5
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x35e>
 8002840:	4b62      	ldr	r3, [pc, #392]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a61      	ldr	r2, [pc, #388]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	4b5f      	ldr	r3, [pc, #380]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a5e      	ldr	r2, [pc, #376]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
 8002858:	e00b      	b.n	8002872 <HAL_RCC_OscConfig+0x376>
 800285a:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a5b      	ldr	r2, [pc, #364]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
 8002866:	4b59      	ldr	r3, [pc, #356]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	4a58      	ldr	r2, [pc, #352]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d015      	beq.n	80028a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe fd5b 	bl	8001334 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe fd57 	bl	8001334 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0d8      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ee      	beq.n	8002882 <HAL_RCC_OscConfig+0x386>
 80028a4:	e014      	b.n	80028d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a6:	f7fe fd45 	bl	8001334 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7fe fd41 	bl	8001334 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0c2      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c4:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ee      	bne.n	80028ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d105      	bne.n	80028e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a3c      	ldr	r2, [pc, #240]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80ae 	beq.w	8002a48 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ec:	4b37      	ldr	r3, [pc, #220]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d06d      	beq.n	80029d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d14b      	bne.n	8002998 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a31      	ldr	r2, [pc, #196]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fd12 	bl	8001334 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fd0e 	bl	8001334 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e091      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	019b      	lsls	r3, r3, #6
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	3b01      	subs	r3, #1
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	071b      	lsls	r3, r3, #28
 800295e:	491b      	ldr	r1, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fce0 	bl	8001334 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fcdc 	bl	8001334 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e05f      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x47c>
 8002996:	e057      	b.n	8002a48 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 800299e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7fe fcc6 	bl	8001334 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe fcc2 	bl	8001334 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e045      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029be:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x4b0>
 80029ca:	e03d      	b.n	8002a48 <HAL_RCC_OscConfig+0x54c>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_RCC_OscConfig+0x558>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d030      	beq.n	8002a44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d129      	bne.n	8002a44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d122      	bne.n	8002a44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a04:	4013      	ands	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d119      	bne.n	8002a44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d10f      	bne.n	8002a44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0d0      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d910      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 020f 	bic.w	r2, r3, #15
 8002a86:	4965      	ldr	r1, [pc, #404]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0b8      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab8:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ac2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad0:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ada:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b50      	ldr	r3, [pc, #320]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	494d      	ldr	r1, [pc, #308]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d040      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d115      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e07f      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1a:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e073      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e06b      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3a:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4936      	ldr	r1, [pc, #216]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fbf2 	bl	8001334 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe fbee 	bl	8001334 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e053      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 020c 	and.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1eb      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d210      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 020f 	bic.w	r2, r3, #15
 8002b92:	4922      	ldr	r1, [pc, #136]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e032      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4916      	ldr	r1, [pc, #88]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	490e      	ldr	r1, [pc, #56]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bea:	f000 f821 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	490a      	ldr	r1, [pc, #40]	; (8002c24 <HAL_RCC_ClockConfig+0x1cc>)
 8002bfc:	5ccb      	ldrb	r3, [r1, r3]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1d0>)
 8002c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1d4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fb4e 	bl	80012ac <HAL_InitTick>

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023c00 	.word	0x40023c00
 8002c20:	40023800 	.word	0x40023800
 8002c24:	08005ab4 	.word	0x08005ab4
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	20000004 	.word	0x20000004

08002c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c34:	b090      	sub	sp, #64	; 0x40
 8002c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c40:	2300      	movs	r3, #0
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c48:	4b59      	ldr	r3, [pc, #356]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d00d      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x40>
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	f200 80a1 	bhi.w	8002d9c <HAL_RCC_GetSysClockFreq+0x16c>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c62:	e09b      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c68:	e09b      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6a:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c6e:	e098      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c70:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c7a:	4b4d      	ldr	r3, [pc, #308]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d028      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c86:	4b4a      	ldr	r3, [pc, #296]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	623b      	str	r3, [r7, #32]
 8002c90:	627a      	str	r2, [r7, #36]	; 0x24
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c9c:	fb03 f201 	mul.w	r2, r3, r1
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	fb00 f303 	mul.w	r3, r0, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a43      	ldr	r2, [pc, #268]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002caa:	fba0 1202 	umull	r1, r2, r0, r2
 8002cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cb0:	460a      	mov	r2, r1
 8002cb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb6:	4413      	add	r3, r2
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	61fa      	str	r2, [r7, #28]
 8002cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cca:	f7fd fb09 	bl	80002e0 <__aeabi_uldivmod>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd6:	e053      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd8:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	2200      	movs	r2, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	617a      	str	r2, [r7, #20]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cea:	f04f 0b00 	mov.w	fp, #0
 8002cee:	4652      	mov	r2, sl
 8002cf0:	465b      	mov	r3, fp
 8002cf2:	f04f 0000 	mov.w	r0, #0
 8002cf6:	f04f 0100 	mov.w	r1, #0
 8002cfa:	0159      	lsls	r1, r3, #5
 8002cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d00:	0150      	lsls	r0, r2, #5
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	ebb2 080a 	subs.w	r8, r2, sl
 8002d0a:	eb63 090b 	sbc.w	r9, r3, fp
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d22:	ebb2 0408 	subs.w	r4, r2, r8
 8002d26:	eb63 0509 	sbc.w	r5, r3, r9
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	00eb      	lsls	r3, r5, #3
 8002d34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d38:	00e2      	lsls	r2, r4, #3
 8002d3a:	4614      	mov	r4, r2
 8002d3c:	461d      	mov	r5, r3
 8002d3e:	eb14 030a 	adds.w	r3, r4, sl
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	eb45 030b 	adc.w	r3, r5, fp
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d56:	4629      	mov	r1, r5
 8002d58:	028b      	lsls	r3, r1, #10
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d60:	4621      	mov	r1, r4
 8002d62:	028a      	lsls	r2, r1, #10
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	60fa      	str	r2, [r7, #12]
 8002d70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d74:	f7fd fab4 	bl	80002e0 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002d90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3740      	adds	r7, #64	; 0x40
 8002da8:	46bd      	mov	sp, r7
 8002daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	017d7840 	.word	0x017d7840

08002dbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000000 	.word	0x20000000

08002dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd8:	f7ff fff0 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4903      	ldr	r1, [pc, #12]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	08005ac4 	.word	0x08005ac4

08002dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e00:	f7ff ffdc 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	0b5b      	lsrs	r3, r3, #13
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4903      	ldr	r1, [pc, #12]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	08005ac4 	.word	0x08005ac4

08002e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e4c:	4b69      	ldr	r3, [pc, #420]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a68      	ldr	r2, [pc, #416]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e56:	6093      	str	r3, [r2, #8]
 8002e58:	4b66      	ldr	r3, [pc, #408]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	4964      	ldr	r1, [pc, #400]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d017      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	4959      	ldr	r1, [pc, #356]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d017      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eba:	4b4e      	ldr	r3, [pc, #312]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	494a      	ldr	r1, [pc, #296]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 808b 	beq.w	800301e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	4a39      	ldr	r2, [pc, #228]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f12:	6413      	str	r3, [r2, #64]	; 0x40
 8002f14:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f20:	4b35      	ldr	r3, [pc, #212]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a34      	ldr	r2, [pc, #208]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fa02 	bl	8001334 <HAL_GetTick>
 8002f30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f34:	f7fe f9fe 	bl	8001334 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e38f      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f46:	4b2c      	ldr	r3, [pc, #176]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f52:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d035      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d02e      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f70:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f86:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f92:	4a18      	ldr	r2, [pc, #96]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d114      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f9c6 	bl	8001334 <HAL_GetTick>
 8002fa8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7fe f9c2 	bl	8001334 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e351      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0ee      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fda:	d111      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fea:	400b      	ands	r3, r1
 8002fec:	4901      	ldr	r1, [pc, #4]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
 8002ff2:	e00b      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	0ffffcff 	.word	0x0ffffcff
 8003000:	4bac      	ldr	r3, [pc, #688]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4aab      	ldr	r2, [pc, #684]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003006:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800300a:	6093      	str	r3, [r2, #8]
 800300c:	4ba9      	ldr	r3, [pc, #676]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	49a6      	ldr	r1, [pc, #664]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301a:	4313      	orrs	r3, r2
 800301c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d010      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800302a:	4ba2      	ldr	r3, [pc, #648]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003030:	4aa0      	ldr	r2, [pc, #640]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003036:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800303a:	4b9e      	ldr	r3, [pc, #632]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	499b      	ldr	r1, [pc, #620]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003058:	4b96      	ldr	r3, [pc, #600]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003066:	4993      	ldr	r1, [pc, #588]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800307a:	4b8e      	ldr	r3, [pc, #568]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003088:	498a      	ldr	r1, [pc, #552]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800309c:	4b85      	ldr	r3, [pc, #532]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030aa:	4982      	ldr	r1, [pc, #520]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030be:	4b7d      	ldr	r3, [pc, #500]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4979      	ldr	r1, [pc, #484]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030e0:	4b74      	ldr	r3, [pc, #464]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	f023 0203 	bic.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4971      	ldr	r1, [pc, #452]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003102:	4b6c      	ldr	r3, [pc, #432]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	f023 020c 	bic.w	r2, r3, #12
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003110:	4968      	ldr	r1, [pc, #416]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003124:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	4960      	ldr	r1, [pc, #384]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003146:	4b5b      	ldr	r3, [pc, #364]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	4957      	ldr	r1, [pc, #348]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003168:	4b52      	ldr	r3, [pc, #328]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	494f      	ldr	r1, [pc, #316]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800318a:	4b4a      	ldr	r3, [pc, #296]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003190:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003198:	4946      	ldr	r1, [pc, #280]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031ac:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	493e      	ldr	r1, [pc, #248]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031ce:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031dc:	4935      	ldr	r1, [pc, #212]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031f0:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031fe:	492d      	ldr	r1, [pc, #180]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d011      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003212:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003220:	4924      	ldr	r1, [pc, #144]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800322c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003230:	d101      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003242:	2301      	movs	r3, #1
 8003244:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003252:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003260:	4914      	ldr	r1, [pc, #80]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003284:	490b      	ldr	r1, [pc, #44]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00f      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a8:	4902      	ldr	r1, [pc, #8]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032b0:	e002      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032c4:	4b8a      	ldr	r3, [pc, #552]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	4986      	ldr	r1, [pc, #536]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032e8:	4b81      	ldr	r3, [pc, #516]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f8:	497d      	ldr	r1, [pc, #500]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d006      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80d6 	beq.w	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003314:	4b76      	ldr	r3, [pc, #472]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a75      	ldr	r2, [pc, #468]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800331e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003320:	f7fe f808 	bl	8001334 <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003328:	f7fe f804 	bl	8001334 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e195      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800333a:	4b6d      	ldr	r3, [pc, #436]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d021      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003356:	2b00      	cmp	r3, #0
 8003358:	d11d      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800335a:	4b65      	ldr	r3, [pc, #404]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003368:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800336a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336e:	0e1b      	lsrs	r3, r3, #24
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	019a      	lsls	r2, r3, #6
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	431a      	orrs	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	071b      	lsls	r3, r3, #28
 800338e:	4958      	ldr	r1, [pc, #352]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02e      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c0:	d129      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033c2:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033d0:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d6:	0f1b      	lsrs	r3, r3, #28
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	019a      	lsls	r2, r3, #6
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	041b      	lsls	r3, r3, #16
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	061b      	lsls	r3, r3, #24
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	071b      	lsls	r3, r3, #28
 80033f6:	493e      	ldr	r1, [pc, #248]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033fe:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003404:	f023 021f 	bic.w	r2, r3, #31
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	3b01      	subs	r3, #1
 800340e:	4938      	ldr	r1, [pc, #224]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01d      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003422:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003428:	0e1b      	lsrs	r3, r3, #24
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003430:	4b2f      	ldr	r3, [pc, #188]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003436:	0f1b      	lsrs	r3, r3, #28
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	019a      	lsls	r2, r3, #6
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	061b      	lsls	r3, r3, #24
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	071b      	lsls	r3, r3, #28
 8003456:	4926      	ldr	r1, [pc, #152]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d011      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	019a      	lsls	r2, r3, #6
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	071b      	lsls	r3, r3, #28
 8003486:	491a      	ldr	r1, [pc, #104]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800348e:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800349a:	f7fd ff4b 	bl	8001334 <HAL_GetTick>
 800349e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034a2:	f7fd ff47 	bl	8001334 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	; 0x64
 80034ae:	d901      	bls.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e0d8      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	f040 80ce 	bne.w	8003664 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d4:	f7fd ff2e 	bl	8001334 <HAL_GetTick>
 80034d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034da:	e00b      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034dc:	f7fd ff2a 	bl	8001334 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	; 0x64
 80034e8:	d904      	bls.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0bb      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034f4:	4b5e      	ldr	r3, [pc, #376]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003500:	d0ec      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02e      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d12a      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800352a:	4b51      	ldr	r3, [pc, #324]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003538:	4b4d      	ldr	r3, [pc, #308]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	0f1b      	lsrs	r3, r3, #28
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	019a      	lsls	r2, r3, #6
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	071b      	lsls	r3, r3, #28
 800355e:	4944      	ldr	r1, [pc, #272]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003566:	4b42      	ldr	r3, [pc, #264]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800356c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	493d      	ldr	r1, [pc, #244]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d022      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003594:	d11d      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	0e1b      	lsrs	r3, r3, #24
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035a4:	4b32      	ldr	r3, [pc, #200]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	0f1b      	lsrs	r3, r3, #28
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	019a      	lsls	r2, r3, #6
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	431a      	orrs	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	071b      	lsls	r3, r3, #28
 80035ca:	4929      	ldr	r1, [pc, #164]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d028      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	0e1b      	lsrs	r3, r3, #24
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035ec:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	019a      	lsls	r2, r3, #6
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	431a      	orrs	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	071b      	lsls	r3, r3, #28
 8003612:	4917      	ldr	r1, [pc, #92]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003620:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	4911      	ldr	r1, [pc, #68]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0e      	ldr	r2, [pc, #56]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363c:	f7fd fe7a 	bl	8001334 <HAL_GetTick>
 8003640:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003644:	f7fd fe76 	bl	8001334 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e007      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800365e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003662:	d1ef      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800

08003674 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e049      	b.n	800371a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd fc38 	bl	8000f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f000 f94a 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800373e:	2302      	movs	r3, #2
 8003740:	e0ff      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b14      	cmp	r3, #20
 800374e:	f200 80f0 	bhi.w	8003932 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003752:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	080037ad 	.word	0x080037ad
 800375c:	08003933 	.word	0x08003933
 8003760:	08003933 	.word	0x08003933
 8003764:	08003933 	.word	0x08003933
 8003768:	080037ed 	.word	0x080037ed
 800376c:	08003933 	.word	0x08003933
 8003770:	08003933 	.word	0x08003933
 8003774:	08003933 	.word	0x08003933
 8003778:	0800382f 	.word	0x0800382f
 800377c:	08003933 	.word	0x08003933
 8003780:	08003933 	.word	0x08003933
 8003784:	08003933 	.word	0x08003933
 8003788:	0800386f 	.word	0x0800386f
 800378c:	08003933 	.word	0x08003933
 8003790:	08003933 	.word	0x08003933
 8003794:	08003933 	.word	0x08003933
 8003798:	080038b1 	.word	0x080038b1
 800379c:	08003933 	.word	0x08003933
 80037a0:	08003933 	.word	0x08003933
 80037a4:	08003933 	.word	0x08003933
 80037a8:	080038f1 	.word	0x080038f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f96a 	bl	8003a8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0208 	orr.w	r2, r2, #8
 80037c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0204 	bic.w	r2, r2, #4
 80037d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6999      	ldr	r1, [r3, #24]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	619a      	str	r2, [r3, #24]
      break;
 80037ea:	e0a5      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f9bc 	bl	8003b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6999      	ldr	r1, [r3, #24]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	619a      	str	r2, [r3, #24]
      break;
 800382c:	e084      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fa13 	bl	8003c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0208 	orr.w	r2, r2, #8
 8003848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0204 	bic.w	r2, r2, #4
 8003858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69d9      	ldr	r1, [r3, #28]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	61da      	str	r2, [r3, #28]
      break;
 800386c:	e064      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fa69 	bl	8003d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69d9      	ldr	r1, [r3, #28]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	61da      	str	r2, [r3, #28]
      break;
 80038ae:	e043      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 faa0 	bl	8003dfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0208 	orr.w	r2, r2, #8
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0204 	bic.w	r2, r2, #4
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038ee:	e023      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fad2 	bl	8003ea0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800390a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	021a      	lsls	r2, r3, #8
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003930:	e002      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
      break;
 8003936:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop

0800394c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a40      	ldr	r2, [pc, #256]	; (8003a60 <TIM_Base_SetConfig+0x114>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d00f      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3d      	ldr	r2, [pc, #244]	; (8003a64 <TIM_Base_SetConfig+0x118>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a3c      	ldr	r2, [pc, #240]	; (8003a68 <TIM_Base_SetConfig+0x11c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a3b      	ldr	r2, [pc, #236]	; (8003a6c <TIM_Base_SetConfig+0x120>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a3a      	ldr	r2, [pc, #232]	; (8003a70 <TIM_Base_SetConfig+0x124>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2f      	ldr	r2, [pc, #188]	; (8003a60 <TIM_Base_SetConfig+0x114>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d02b      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d027      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2c      	ldr	r2, [pc, #176]	; (8003a64 <TIM_Base_SetConfig+0x118>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d023      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2b      	ldr	r2, [pc, #172]	; (8003a68 <TIM_Base_SetConfig+0x11c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01f      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2a      	ldr	r2, [pc, #168]	; (8003a6c <TIM_Base_SetConfig+0x120>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01b      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <TIM_Base_SetConfig+0x124>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d017      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a28      	ldr	r2, [pc, #160]	; (8003a74 <TIM_Base_SetConfig+0x128>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a27      	ldr	r2, [pc, #156]	; (8003a78 <TIM_Base_SetConfig+0x12c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00f      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a26      	ldr	r2, [pc, #152]	; (8003a7c <TIM_Base_SetConfig+0x130>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00b      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a25      	ldr	r2, [pc, #148]	; (8003a80 <TIM_Base_SetConfig+0x134>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d007      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <TIM_Base_SetConfig+0x138>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a23      	ldr	r2, [pc, #140]	; (8003a88 <TIM_Base_SetConfig+0x13c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d108      	bne.n	8003a10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <TIM_Base_SetConfig+0x114>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_Base_SetConfig+0xf8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a0c      	ldr	r2, [pc, #48]	; (8003a70 <TIM_Base_SetConfig+0x124>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d103      	bne.n	8003a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	615a      	str	r2, [r3, #20]
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40000c00 	.word	0x40000c00
 8003a70:	40010400 	.word	0x40010400
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40014400 	.word	0x40014400
 8003a7c:	40014800 	.word	0x40014800
 8003a80:	40001800 	.word	0x40001800
 8003a84:	40001c00 	.word	0x40001c00
 8003a88:	40002000 	.word	0x40002000

08003a8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4b2b      	ldr	r3, [pc, #172]	; (8003b64 <TIM_OC1_SetConfig+0xd8>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f023 0302 	bic.w	r3, r3, #2
 8003ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <TIM_OC1_SetConfig+0xdc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_OC1_SetConfig+0x64>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <TIM_OC1_SetConfig+0xe0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10c      	bne.n	8003b0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0308 	bic.w	r3, r3, #8
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 0304 	bic.w	r3, r3, #4
 8003b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <TIM_OC1_SetConfig+0xdc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d003      	beq.n	8003b1a <TIM_OC1_SetConfig+0x8e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <TIM_OC1_SetConfig+0xe0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d111      	bne.n	8003b3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	621a      	str	r2, [r3, #32]
}
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	fffeff8f 	.word	0xfffeff8f
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40010400 	.word	0x40010400

08003b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f023 0210 	bic.w	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <TIM_OC2_SetConfig+0xe4>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0320 	bic.w	r3, r3, #32
 8003bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <TIM_OC2_SetConfig+0xe8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_OC2_SetConfig+0x68>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <TIM_OC2_SetConfig+0xec>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d10d      	bne.n	8003bf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <TIM_OC2_SetConfig+0xe8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <TIM_OC2_SetConfig+0x94>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <TIM_OC2_SetConfig+0xec>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d113      	bne.n	8003c2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	feff8fff 	.word	0xfeff8fff
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40010400 	.word	0x40010400

08003c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <TIM_OC3_SetConfig+0xe0>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <TIM_OC3_SetConfig+0xe4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_OC3_SetConfig+0x66>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a21      	ldr	r2, [pc, #132]	; (8003d48 <TIM_OC3_SetConfig+0xe8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10d      	bne.n	8003ce2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <TIM_OC3_SetConfig+0xe4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_OC3_SetConfig+0x92>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <TIM_OC3_SetConfig+0xe8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d113      	bne.n	8003d1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	621a      	str	r2, [r3, #32]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	fffeff8f 	.word	0xfffeff8f
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40010400 	.word	0x40010400

08003d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <TIM_OC4_SetConfig+0xa4>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	031b      	lsls	r3, r3, #12
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <TIM_OC4_SetConfig+0xa8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_OC4_SetConfig+0x68>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <TIM_OC4_SetConfig+0xac>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d109      	bne.n	8003dc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	019b      	lsls	r3, r3, #6
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	feff8fff 	.word	0xfeff8fff
 8003df4:	40010000 	.word	0x40010000
 8003df8:	40010400 	.word	0x40010400

08003dfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <TIM_OC5_SetConfig+0x98>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <TIM_OC5_SetConfig+0x9c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d003      	beq.n	8003e5a <TIM_OC5_SetConfig+0x5e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <TIM_OC5_SetConfig+0xa0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d109      	bne.n	8003e6e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	621a      	str	r2, [r3, #32]
}
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	fffeff8f 	.word	0xfffeff8f
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40010400 	.word	0x40010400

08003ea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <TIM_OC6_SetConfig+0x9c>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	051b      	lsls	r3, r3, #20
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <TIM_OC6_SetConfig+0xa0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_OC6_SetConfig+0x60>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <TIM_OC6_SetConfig+0xa4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d109      	bne.n	8003f14 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	029b      	lsls	r3, r3, #10
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	feff8fff 	.word	0xfeff8fff
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40010400 	.word	0x40010400

08003f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e06d      	b.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a30      	ldr	r2, [pc, #192]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2f      	ldr	r2, [pc, #188]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d108      	bne.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a20      	ldr	r2, [pc, #128]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d022      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d01d      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1a      	ldr	r2, [pc, #104]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a15      	ldr	r2, [pc, #84]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10c      	bne.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004016:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40010000 	.word	0x40010000
 800404c:	40010400 	.word	0x40010400
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800
 8004058:	40000c00 	.word	0x40000c00
 800405c:	40014000 	.word	0x40014000
 8004060:	40001800 	.word	0x40001800

08004064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e040      	b.n	80040f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fc ff9a 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	; 0x24
 8004090:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8b0 	bl	8004208 <UART_SetConfig>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e022      	b.n	80040f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fb08 	bl	80046d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fb8f 	bl	8004814 <UART_CheckIdleState>
 80040f6:	4603      	mov	r3, r0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004114:	2b20      	cmp	r3, #32
 8004116:	d171      	bne.n	80041fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_UART_Transmit+0x24>
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e06a      	b.n	80041fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2221      	movs	r2, #33	; 0x21
 8004134:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004136:	f7fd f8fd 	bl	8001334 <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	88fa      	ldrh	r2, [r7, #6]
 8004140:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d108      	bne.n	8004168 <HAL_UART_Transmit+0x68>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d104      	bne.n	8004168 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e003      	b.n	8004170 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004170:	e02c      	b.n	80041cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	2180      	movs	r1, #128	; 0x80
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fb96 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e038      	b.n	80041fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	3302      	adds	r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e007      	b.n	80041ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1cc      	bne.n	8004172 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	2140      	movs	r1, #64	; 0x40
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fb63 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e005      	b.n	80041fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4ba6      	ldr	r3, [pc, #664]	; (80044cc <UART_SetConfig+0x2c4>)
 8004234:	4013      	ands	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	430b      	orrs	r3, r1
 800423e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a94      	ldr	r2, [pc, #592]	; (80044d0 <UART_SetConfig+0x2c8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d120      	bne.n	80042c6 <UART_SetConfig+0xbe>
 8004284:	4b93      	ldr	r3, [pc, #588]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b03      	cmp	r3, #3
 8004290:	d816      	bhi.n	80042c0 <UART_SetConfig+0xb8>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x90>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042b5 	.word	0x080042b5
 80042a0:	080042af 	.word	0x080042af
 80042a4:	080042bb 	.word	0x080042bb
 80042a8:	2301      	movs	r3, #1
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e150      	b.n	8004550 <UART_SetConfig+0x348>
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e14d      	b.n	8004550 <UART_SetConfig+0x348>
 80042b4:	2304      	movs	r3, #4
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e14a      	b.n	8004550 <UART_SetConfig+0x348>
 80042ba:	2308      	movs	r3, #8
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e147      	b.n	8004550 <UART_SetConfig+0x348>
 80042c0:	2310      	movs	r3, #16
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e144      	b.n	8004550 <UART_SetConfig+0x348>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a83      	ldr	r2, [pc, #524]	; (80044d8 <UART_SetConfig+0x2d0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d132      	bne.n	8004336 <UART_SetConfig+0x12e>
 80042d0:	4b80      	ldr	r3, [pc, #512]	; (80044d4 <UART_SetConfig+0x2cc>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	d828      	bhi.n	8004330 <UART_SetConfig+0x128>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <UART_SetConfig+0xdc>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	08004319 	.word	0x08004319
 80042e8:	08004331 	.word	0x08004331
 80042ec:	08004331 	.word	0x08004331
 80042f0:	08004331 	.word	0x08004331
 80042f4:	08004325 	.word	0x08004325
 80042f8:	08004331 	.word	0x08004331
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004331 	.word	0x08004331
 8004304:	0800431f 	.word	0x0800431f
 8004308:	08004331 	.word	0x08004331
 800430c:	08004331 	.word	0x08004331
 8004310:	08004331 	.word	0x08004331
 8004314:	0800432b 	.word	0x0800432b
 8004318:	2300      	movs	r3, #0
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e118      	b.n	8004550 <UART_SetConfig+0x348>
 800431e:	2302      	movs	r3, #2
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e115      	b.n	8004550 <UART_SetConfig+0x348>
 8004324:	2304      	movs	r3, #4
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e112      	b.n	8004550 <UART_SetConfig+0x348>
 800432a:	2308      	movs	r3, #8
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e10f      	b.n	8004550 <UART_SetConfig+0x348>
 8004330:	2310      	movs	r3, #16
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e10c      	b.n	8004550 <UART_SetConfig+0x348>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a68      	ldr	r2, [pc, #416]	; (80044dc <UART_SetConfig+0x2d4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d120      	bne.n	8004382 <UART_SetConfig+0x17a>
 8004340:	4b64      	ldr	r3, [pc, #400]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800434a:	2b30      	cmp	r3, #48	; 0x30
 800434c:	d013      	beq.n	8004376 <UART_SetConfig+0x16e>
 800434e:	2b30      	cmp	r3, #48	; 0x30
 8004350:	d814      	bhi.n	800437c <UART_SetConfig+0x174>
 8004352:	2b20      	cmp	r3, #32
 8004354:	d009      	beq.n	800436a <UART_SetConfig+0x162>
 8004356:	2b20      	cmp	r3, #32
 8004358:	d810      	bhi.n	800437c <UART_SetConfig+0x174>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <UART_SetConfig+0x15c>
 800435e:	2b10      	cmp	r3, #16
 8004360:	d006      	beq.n	8004370 <UART_SetConfig+0x168>
 8004362:	e00b      	b.n	800437c <UART_SetConfig+0x174>
 8004364:	2300      	movs	r3, #0
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e0f2      	b.n	8004550 <UART_SetConfig+0x348>
 800436a:	2302      	movs	r3, #2
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e0ef      	b.n	8004550 <UART_SetConfig+0x348>
 8004370:	2304      	movs	r3, #4
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e0ec      	b.n	8004550 <UART_SetConfig+0x348>
 8004376:	2308      	movs	r3, #8
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e0e9      	b.n	8004550 <UART_SetConfig+0x348>
 800437c:	2310      	movs	r3, #16
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e0e6      	b.n	8004550 <UART_SetConfig+0x348>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <UART_SetConfig+0x2d8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d120      	bne.n	80043ce <UART_SetConfig+0x1c6>
 800438c:	4b51      	ldr	r3, [pc, #324]	; (80044d4 <UART_SetConfig+0x2cc>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004396:	2bc0      	cmp	r3, #192	; 0xc0
 8004398:	d013      	beq.n	80043c2 <UART_SetConfig+0x1ba>
 800439a:	2bc0      	cmp	r3, #192	; 0xc0
 800439c:	d814      	bhi.n	80043c8 <UART_SetConfig+0x1c0>
 800439e:	2b80      	cmp	r3, #128	; 0x80
 80043a0:	d009      	beq.n	80043b6 <UART_SetConfig+0x1ae>
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	d810      	bhi.n	80043c8 <UART_SetConfig+0x1c0>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <UART_SetConfig+0x1a8>
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d006      	beq.n	80043bc <UART_SetConfig+0x1b4>
 80043ae:	e00b      	b.n	80043c8 <UART_SetConfig+0x1c0>
 80043b0:	2300      	movs	r3, #0
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e0cc      	b.n	8004550 <UART_SetConfig+0x348>
 80043b6:	2302      	movs	r3, #2
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e0c9      	b.n	8004550 <UART_SetConfig+0x348>
 80043bc:	2304      	movs	r3, #4
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e0c6      	b.n	8004550 <UART_SetConfig+0x348>
 80043c2:	2308      	movs	r3, #8
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e0c3      	b.n	8004550 <UART_SetConfig+0x348>
 80043c8:	2310      	movs	r3, #16
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e0c0      	b.n	8004550 <UART_SetConfig+0x348>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a44      	ldr	r2, [pc, #272]	; (80044e4 <UART_SetConfig+0x2dc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d125      	bne.n	8004424 <UART_SetConfig+0x21c>
 80043d8:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <UART_SetConfig+0x2cc>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e6:	d017      	beq.n	8004418 <UART_SetConfig+0x210>
 80043e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ec:	d817      	bhi.n	800441e <UART_SetConfig+0x216>
 80043ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f2:	d00b      	beq.n	800440c <UART_SetConfig+0x204>
 80043f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f8:	d811      	bhi.n	800441e <UART_SetConfig+0x216>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <UART_SetConfig+0x1fe>
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004402:	d006      	beq.n	8004412 <UART_SetConfig+0x20a>
 8004404:	e00b      	b.n	800441e <UART_SetConfig+0x216>
 8004406:	2300      	movs	r3, #0
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e0a1      	b.n	8004550 <UART_SetConfig+0x348>
 800440c:	2302      	movs	r3, #2
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e09e      	b.n	8004550 <UART_SetConfig+0x348>
 8004412:	2304      	movs	r3, #4
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e09b      	b.n	8004550 <UART_SetConfig+0x348>
 8004418:	2308      	movs	r3, #8
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e098      	b.n	8004550 <UART_SetConfig+0x348>
 800441e:	2310      	movs	r3, #16
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e095      	b.n	8004550 <UART_SetConfig+0x348>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <UART_SetConfig+0x2e0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d125      	bne.n	800447a <UART_SetConfig+0x272>
 800442e:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800443c:	d017      	beq.n	800446e <UART_SetConfig+0x266>
 800443e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004442:	d817      	bhi.n	8004474 <UART_SetConfig+0x26c>
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d00b      	beq.n	8004462 <UART_SetConfig+0x25a>
 800444a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444e:	d811      	bhi.n	8004474 <UART_SetConfig+0x26c>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <UART_SetConfig+0x254>
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004458:	d006      	beq.n	8004468 <UART_SetConfig+0x260>
 800445a:	e00b      	b.n	8004474 <UART_SetConfig+0x26c>
 800445c:	2301      	movs	r3, #1
 800445e:	77fb      	strb	r3, [r7, #31]
 8004460:	e076      	b.n	8004550 <UART_SetConfig+0x348>
 8004462:	2302      	movs	r3, #2
 8004464:	77fb      	strb	r3, [r7, #31]
 8004466:	e073      	b.n	8004550 <UART_SetConfig+0x348>
 8004468:	2304      	movs	r3, #4
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e070      	b.n	8004550 <UART_SetConfig+0x348>
 800446e:	2308      	movs	r3, #8
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e06d      	b.n	8004550 <UART_SetConfig+0x348>
 8004474:	2310      	movs	r3, #16
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e06a      	b.n	8004550 <UART_SetConfig+0x348>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <UART_SetConfig+0x2e4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d138      	bne.n	80044f6 <UART_SetConfig+0x2ee>
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <UART_SetConfig+0x2cc>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800448e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004492:	d017      	beq.n	80044c4 <UART_SetConfig+0x2bc>
 8004494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004498:	d82a      	bhi.n	80044f0 <UART_SetConfig+0x2e8>
 800449a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449e:	d00b      	beq.n	80044b8 <UART_SetConfig+0x2b0>
 80044a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a4:	d824      	bhi.n	80044f0 <UART_SetConfig+0x2e8>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <UART_SetConfig+0x2aa>
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	d006      	beq.n	80044be <UART_SetConfig+0x2b6>
 80044b0:	e01e      	b.n	80044f0 <UART_SetConfig+0x2e8>
 80044b2:	2300      	movs	r3, #0
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e04b      	b.n	8004550 <UART_SetConfig+0x348>
 80044b8:	2302      	movs	r3, #2
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e048      	b.n	8004550 <UART_SetConfig+0x348>
 80044be:	2304      	movs	r3, #4
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e045      	b.n	8004550 <UART_SetConfig+0x348>
 80044c4:	2308      	movs	r3, #8
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e042      	b.n	8004550 <UART_SetConfig+0x348>
 80044ca:	bf00      	nop
 80044cc:	efff69f3 	.word	0xefff69f3
 80044d0:	40011000 	.word	0x40011000
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40004400 	.word	0x40004400
 80044dc:	40004800 	.word	0x40004800
 80044e0:	40004c00 	.word	0x40004c00
 80044e4:	40005000 	.word	0x40005000
 80044e8:	40011400 	.word	0x40011400
 80044ec:	40007800 	.word	0x40007800
 80044f0:	2310      	movs	r3, #16
 80044f2:	77fb      	strb	r3, [r7, #31]
 80044f4:	e02c      	b.n	8004550 <UART_SetConfig+0x348>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a72      	ldr	r2, [pc, #456]	; (80046c4 <UART_SetConfig+0x4bc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d125      	bne.n	800454c <UART_SetConfig+0x344>
 8004500:	4b71      	ldr	r3, [pc, #452]	; (80046c8 <UART_SetConfig+0x4c0>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800450a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800450e:	d017      	beq.n	8004540 <UART_SetConfig+0x338>
 8004510:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004514:	d817      	bhi.n	8004546 <UART_SetConfig+0x33e>
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451a:	d00b      	beq.n	8004534 <UART_SetConfig+0x32c>
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004520:	d811      	bhi.n	8004546 <UART_SetConfig+0x33e>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <UART_SetConfig+0x326>
 8004526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452a:	d006      	beq.n	800453a <UART_SetConfig+0x332>
 800452c:	e00b      	b.n	8004546 <UART_SetConfig+0x33e>
 800452e:	2300      	movs	r3, #0
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e00d      	b.n	8004550 <UART_SetConfig+0x348>
 8004534:	2302      	movs	r3, #2
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e00a      	b.n	8004550 <UART_SetConfig+0x348>
 800453a:	2304      	movs	r3, #4
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e007      	b.n	8004550 <UART_SetConfig+0x348>
 8004540:	2308      	movs	r3, #8
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e004      	b.n	8004550 <UART_SetConfig+0x348>
 8004546:	2310      	movs	r3, #16
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e001      	b.n	8004550 <UART_SetConfig+0x348>
 800454c:	2310      	movs	r3, #16
 800454e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004558:	d15b      	bne.n	8004612 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800455a:	7ffb      	ldrb	r3, [r7, #31]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d828      	bhi.n	80045b2 <UART_SetConfig+0x3aa>
 8004560:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0x360>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	0800458d 	.word	0x0800458d
 800456c:	08004595 	.word	0x08004595
 8004570:	0800459d 	.word	0x0800459d
 8004574:	080045b3 	.word	0x080045b3
 8004578:	080045a3 	.word	0x080045a3
 800457c:	080045b3 	.word	0x080045b3
 8004580:	080045b3 	.word	0x080045b3
 8004584:	080045b3 	.word	0x080045b3
 8004588:	080045ab 	.word	0x080045ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7fe fc22 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8004590:	61b8      	str	r0, [r7, #24]
        break;
 8004592:	e013      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7fe fc32 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 8004598:	61b8      	str	r0, [r7, #24]
        break;
 800459a:	e00f      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <UART_SetConfig+0x4c4>)
 800459e:	61bb      	str	r3, [r7, #24]
        break;
 80045a0:	e00c      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe fb45 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 80045a6:	61b8      	str	r0, [r7, #24]
        break;
 80045a8:	e008      	b.n	80045bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ae:	61bb      	str	r3, [r7, #24]
        break;
 80045b0:	e004      	b.n	80045bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	77bb      	strb	r3, [r7, #30]
        break;
 80045ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d074      	beq.n	80046ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	005a      	lsls	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	441a      	add	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d916      	bls.n	800460c <UART_SetConfig+0x404>
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e4:	d212      	bcs.n	800460c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f023 030f 	bic.w	r3, r3, #15
 80045ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	89fb      	ldrh	r3, [r7, #14]
 80045fe:	4313      	orrs	r3, r2
 8004600:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	89fa      	ldrh	r2, [r7, #14]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	e04f      	b.n	80046ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	77bb      	strb	r3, [r7, #30]
 8004610:	e04c      	b.n	80046ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004612:	7ffb      	ldrb	r3, [r7, #31]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d828      	bhi.n	800466a <UART_SetConfig+0x462>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0x418>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004645 	.word	0x08004645
 8004624:	0800464d 	.word	0x0800464d
 8004628:	08004655 	.word	0x08004655
 800462c:	0800466b 	.word	0x0800466b
 8004630:	0800465b 	.word	0x0800465b
 8004634:	0800466b 	.word	0x0800466b
 8004638:	0800466b 	.word	0x0800466b
 800463c:	0800466b 	.word	0x0800466b
 8004640:	08004663 	.word	0x08004663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004644:	f7fe fbc6 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8004648:	61b8      	str	r0, [r7, #24]
        break;
 800464a:	e013      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800464c:	f7fe fbd6 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 8004650:	61b8      	str	r0, [r7, #24]
        break;
 8004652:	e00f      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <UART_SetConfig+0x4c4>)
 8004656:	61bb      	str	r3, [r7, #24]
        break;
 8004658:	e00c      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465a:	f7fe fae9 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 800465e:	61b8      	str	r0, [r7, #24]
        break;
 8004660:	e008      	b.n	8004674 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004666:	61bb      	str	r3, [r7, #24]
        break;
 8004668:	e004      	b.n	8004674 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	77bb      	strb	r3, [r7, #30]
        break;
 8004672:	bf00      	nop
    }

    if (pclk != 0U)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d018      	beq.n	80046ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	085a      	lsrs	r2, r3, #1
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	441a      	add	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b0f      	cmp	r3, #15
 8004692:	d909      	bls.n	80046a8 <UART_SetConfig+0x4a0>
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469a:	d205      	bcs.n	80046a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	b29a      	uxth	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	e001      	b.n	80046ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40007c00 	.word	0x40007c00
 80046c8:	40023800 	.word	0x40023800
 80046cc:	00f42400 	.word	0x00f42400

080046d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01a      	beq.n	80047e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ce:	d10a      	bne.n	80047e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af02      	add	r7, sp, #8
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004824:	f7fc fd86 	bl	8001334 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b08      	cmp	r3, #8
 8004836:	d10e      	bne.n	8004856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f831 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e027      	b.n	80048a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b04      	cmp	r3, #4
 8004862:	d10e      	bne.n	8004882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f81b 	bl	80048ae <UART_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e011      	b.n	80048a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b09c      	sub	sp, #112	; 0x70
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048be:	e0a7      	b.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c6:	f000 80a3 	beq.w	8004a10 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fc fd33 	bl	8001334 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80048da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d13f      	bne.n	8004960 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004900:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800490c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e6      	bne.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004932:	64ba      	str	r2, [r7, #72]	; 0x48
 8004934:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e068      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d050      	beq.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497c:	d148      	bne.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004986:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800499c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
 80049a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e6      	bne.n	8004988 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3308      	adds	r3, #8
 80049c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3308      	adds	r3, #8
 80049d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049da:	623a      	str	r2, [r7, #32]
 80049dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	69f9      	ldr	r1, [r7, #28]
 80049e0:	6a3a      	ldr	r2, [r7, #32]
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e5      	bne.n	80049ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e010      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69da      	ldr	r2, [r3, #28]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	f43f af48 	beq.w	80048c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3770      	adds	r7, #112	; 0x70
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <siprintf>:
 8004a3c:	b40e      	push	{r1, r2, r3}
 8004a3e:	b500      	push	{lr}
 8004a40:	b09c      	sub	sp, #112	; 0x70
 8004a42:	ab1d      	add	r3, sp, #116	; 0x74
 8004a44:	9002      	str	r0, [sp, #8]
 8004a46:	9006      	str	r0, [sp, #24]
 8004a48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a4c:	4809      	ldr	r0, [pc, #36]	; (8004a74 <siprintf+0x38>)
 8004a4e:	9107      	str	r1, [sp, #28]
 8004a50:	9104      	str	r1, [sp, #16]
 8004a52:	4909      	ldr	r1, [pc, #36]	; (8004a78 <siprintf+0x3c>)
 8004a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a58:	9105      	str	r1, [sp, #20]
 8004a5a:	6800      	ldr	r0, [r0, #0]
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	a902      	add	r1, sp, #8
 8004a60:	f000 f9ba 	bl	8004dd8 <_svfiprintf_r>
 8004a64:	9b02      	ldr	r3, [sp, #8]
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	b01c      	add	sp, #112	; 0x70
 8004a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a70:	b003      	add	sp, #12
 8004a72:	4770      	bx	lr
 8004a74:	20000064 	.word	0x20000064
 8004a78:	ffff0208 	.word	0xffff0208

08004a7c <std>:
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	b510      	push	{r4, lr}
 8004a80:	4604      	mov	r4, r0
 8004a82:	e9c0 3300 	strd	r3, r3, [r0]
 8004a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a8a:	6083      	str	r3, [r0, #8]
 8004a8c:	8181      	strh	r1, [r0, #12]
 8004a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a90:	81c2      	strh	r2, [r0, #14]
 8004a92:	6183      	str	r3, [r0, #24]
 8004a94:	4619      	mov	r1, r3
 8004a96:	2208      	movs	r2, #8
 8004a98:	305c      	adds	r0, #92	; 0x5c
 8004a9a:	f000 f90d 	bl	8004cb8 <memset>
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <std+0x58>)
 8004aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <std+0x5c>)
 8004aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <std+0x60>)
 8004aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <std+0x64>)
 8004aac:	6323      	str	r3, [r4, #48]	; 0x30
 8004aae:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <std+0x68>)
 8004ab0:	6224      	str	r4, [r4, #32]
 8004ab2:	429c      	cmp	r4, r3
 8004ab4:	d006      	beq.n	8004ac4 <std+0x48>
 8004ab6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004aba:	4294      	cmp	r4, r2
 8004abc:	d002      	beq.n	8004ac4 <std+0x48>
 8004abe:	33d0      	adds	r3, #208	; 0xd0
 8004ac0:	429c      	cmp	r4, r3
 8004ac2:	d105      	bne.n	8004ad0 <std+0x54>
 8004ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004acc:	f000 b926 	b.w	8004d1c <__retarget_lock_init_recursive>
 8004ad0:	bd10      	pop	{r4, pc}
 8004ad2:	bf00      	nop
 8004ad4:	080055a9 	.word	0x080055a9
 8004ad8:	080055cb 	.word	0x080055cb
 8004adc:	08005603 	.word	0x08005603
 8004ae0:	08005627 	.word	0x08005627
 8004ae4:	200001b4 	.word	0x200001b4

08004ae8 <stdio_exit_handler>:
 8004ae8:	4a02      	ldr	r2, [pc, #8]	; (8004af4 <stdio_exit_handler+0xc>)
 8004aea:	4903      	ldr	r1, [pc, #12]	; (8004af8 <stdio_exit_handler+0x10>)
 8004aec:	4803      	ldr	r0, [pc, #12]	; (8004afc <stdio_exit_handler+0x14>)
 8004aee:	f000 b869 	b.w	8004bc4 <_fwalk_sglue>
 8004af2:	bf00      	nop
 8004af4:	2000000c 	.word	0x2000000c
 8004af8:	08005541 	.word	0x08005541
 8004afc:	20000018 	.word	0x20000018

08004b00 <cleanup_stdio>:
 8004b00:	6841      	ldr	r1, [r0, #4]
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <cleanup_stdio+0x34>)
 8004b04:	4299      	cmp	r1, r3
 8004b06:	b510      	push	{r4, lr}
 8004b08:	4604      	mov	r4, r0
 8004b0a:	d001      	beq.n	8004b10 <cleanup_stdio+0x10>
 8004b0c:	f000 fd18 	bl	8005540 <_fflush_r>
 8004b10:	68a1      	ldr	r1, [r4, #8]
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <cleanup_stdio+0x38>)
 8004b14:	4299      	cmp	r1, r3
 8004b16:	d002      	beq.n	8004b1e <cleanup_stdio+0x1e>
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f000 fd11 	bl	8005540 <_fflush_r>
 8004b1e:	68e1      	ldr	r1, [r4, #12]
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <cleanup_stdio+0x3c>)
 8004b22:	4299      	cmp	r1, r3
 8004b24:	d004      	beq.n	8004b30 <cleanup_stdio+0x30>
 8004b26:	4620      	mov	r0, r4
 8004b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b2c:	f000 bd08 	b.w	8005540 <_fflush_r>
 8004b30:	bd10      	pop	{r4, pc}
 8004b32:	bf00      	nop
 8004b34:	200001b4 	.word	0x200001b4
 8004b38:	2000021c 	.word	0x2000021c
 8004b3c:	20000284 	.word	0x20000284

08004b40 <global_stdio_init.part.0>:
 8004b40:	b510      	push	{r4, lr}
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <global_stdio_init.part.0+0x30>)
 8004b44:	4c0b      	ldr	r4, [pc, #44]	; (8004b74 <global_stdio_init.part.0+0x34>)
 8004b46:	4a0c      	ldr	r2, [pc, #48]	; (8004b78 <global_stdio_init.part.0+0x38>)
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2104      	movs	r1, #4
 8004b50:	f7ff ff94 	bl	8004a7c <std>
 8004b54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2109      	movs	r1, #9
 8004b5c:	f7ff ff8e 	bl	8004a7c <std>
 8004b60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b64:	2202      	movs	r2, #2
 8004b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b6a:	2112      	movs	r1, #18
 8004b6c:	f7ff bf86 	b.w	8004a7c <std>
 8004b70:	200002ec 	.word	0x200002ec
 8004b74:	200001b4 	.word	0x200001b4
 8004b78:	08004ae9 	.word	0x08004ae9

08004b7c <__sfp_lock_acquire>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	; (8004b84 <__sfp_lock_acquire+0x8>)
 8004b7e:	f000 b8ce 	b.w	8004d1e <__retarget_lock_acquire_recursive>
 8004b82:	bf00      	nop
 8004b84:	200002f1 	.word	0x200002f1

08004b88 <__sfp_lock_release>:
 8004b88:	4801      	ldr	r0, [pc, #4]	; (8004b90 <__sfp_lock_release+0x8>)
 8004b8a:	f000 b8c9 	b.w	8004d20 <__retarget_lock_release_recursive>
 8004b8e:	bf00      	nop
 8004b90:	200002f1 	.word	0x200002f1

08004b94 <__sinit>:
 8004b94:	b510      	push	{r4, lr}
 8004b96:	4604      	mov	r4, r0
 8004b98:	f7ff fff0 	bl	8004b7c <__sfp_lock_acquire>
 8004b9c:	6a23      	ldr	r3, [r4, #32]
 8004b9e:	b11b      	cbz	r3, 8004ba8 <__sinit+0x14>
 8004ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba4:	f7ff bff0 	b.w	8004b88 <__sfp_lock_release>
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <__sinit+0x28>)
 8004baa:	6223      	str	r3, [r4, #32]
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <__sinit+0x2c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f5      	bne.n	8004ba0 <__sinit+0xc>
 8004bb4:	f7ff ffc4 	bl	8004b40 <global_stdio_init.part.0>
 8004bb8:	e7f2      	b.n	8004ba0 <__sinit+0xc>
 8004bba:	bf00      	nop
 8004bbc:	08004b01 	.word	0x08004b01
 8004bc0:	200002ec 	.word	0x200002ec

08004bc4 <_fwalk_sglue>:
 8004bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc8:	4607      	mov	r7, r0
 8004bca:	4688      	mov	r8, r1
 8004bcc:	4614      	mov	r4, r2
 8004bce:	2600      	movs	r6, #0
 8004bd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bd4:	f1b9 0901 	subs.w	r9, r9, #1
 8004bd8:	d505      	bpl.n	8004be6 <_fwalk_sglue+0x22>
 8004bda:	6824      	ldr	r4, [r4, #0]
 8004bdc:	2c00      	cmp	r4, #0
 8004bde:	d1f7      	bne.n	8004bd0 <_fwalk_sglue+0xc>
 8004be0:	4630      	mov	r0, r6
 8004be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004be6:	89ab      	ldrh	r3, [r5, #12]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d907      	bls.n	8004bfc <_fwalk_sglue+0x38>
 8004bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	d003      	beq.n	8004bfc <_fwalk_sglue+0x38>
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	47c0      	blx	r8
 8004bfa:	4306      	orrs	r6, r0
 8004bfc:	3568      	adds	r5, #104	; 0x68
 8004bfe:	e7e9      	b.n	8004bd4 <_fwalk_sglue+0x10>

08004c00 <_puts_r>:
 8004c00:	6a03      	ldr	r3, [r0, #32]
 8004c02:	b570      	push	{r4, r5, r6, lr}
 8004c04:	6884      	ldr	r4, [r0, #8]
 8004c06:	4605      	mov	r5, r0
 8004c08:	460e      	mov	r6, r1
 8004c0a:	b90b      	cbnz	r3, 8004c10 <_puts_r+0x10>
 8004c0c:	f7ff ffc2 	bl	8004b94 <__sinit>
 8004c10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c12:	07db      	lsls	r3, r3, #31
 8004c14:	d405      	bmi.n	8004c22 <_puts_r+0x22>
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	0598      	lsls	r0, r3, #22
 8004c1a:	d402      	bmi.n	8004c22 <_puts_r+0x22>
 8004c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c1e:	f000 f87e 	bl	8004d1e <__retarget_lock_acquire_recursive>
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	0719      	lsls	r1, r3, #28
 8004c26:	d513      	bpl.n	8004c50 <_puts_r+0x50>
 8004c28:	6923      	ldr	r3, [r4, #16]
 8004c2a:	b18b      	cbz	r3, 8004c50 <_puts_r+0x50>
 8004c2c:	3e01      	subs	r6, #1
 8004c2e:	68a3      	ldr	r3, [r4, #8]
 8004c30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c34:	3b01      	subs	r3, #1
 8004c36:	60a3      	str	r3, [r4, #8]
 8004c38:	b9e9      	cbnz	r1, 8004c76 <_puts_r+0x76>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	da2e      	bge.n	8004c9c <_puts_r+0x9c>
 8004c3e:	4622      	mov	r2, r4
 8004c40:	210a      	movs	r1, #10
 8004c42:	4628      	mov	r0, r5
 8004c44:	f000 fd22 	bl	800568c <__swbuf_r>
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d007      	beq.n	8004c5c <_puts_r+0x5c>
 8004c4c:	250a      	movs	r5, #10
 8004c4e:	e007      	b.n	8004c60 <_puts_r+0x60>
 8004c50:	4621      	mov	r1, r4
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 fd58 	bl	8005708 <__swsetup_r>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d0e7      	beq.n	8004c2c <_puts_r+0x2c>
 8004c5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c62:	07da      	lsls	r2, r3, #31
 8004c64:	d405      	bmi.n	8004c72 <_puts_r+0x72>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	059b      	lsls	r3, r3, #22
 8004c6a:	d402      	bmi.n	8004c72 <_puts_r+0x72>
 8004c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c6e:	f000 f857 	bl	8004d20 <__retarget_lock_release_recursive>
 8004c72:	4628      	mov	r0, r5
 8004c74:	bd70      	pop	{r4, r5, r6, pc}
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da04      	bge.n	8004c84 <_puts_r+0x84>
 8004c7a:	69a2      	ldr	r2, [r4, #24]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	dc06      	bgt.n	8004c8e <_puts_r+0x8e>
 8004c80:	290a      	cmp	r1, #10
 8004c82:	d004      	beq.n	8004c8e <_puts_r+0x8e>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	6022      	str	r2, [r4, #0]
 8004c8a:	7019      	strb	r1, [r3, #0]
 8004c8c:	e7cf      	b.n	8004c2e <_puts_r+0x2e>
 8004c8e:	4622      	mov	r2, r4
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 fcfb 	bl	800568c <__swbuf_r>
 8004c96:	3001      	adds	r0, #1
 8004c98:	d1c9      	bne.n	8004c2e <_puts_r+0x2e>
 8004c9a:	e7df      	b.n	8004c5c <_puts_r+0x5c>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	250a      	movs	r5, #10
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	6022      	str	r2, [r4, #0]
 8004ca4:	701d      	strb	r5, [r3, #0]
 8004ca6:	e7db      	b.n	8004c60 <_puts_r+0x60>

08004ca8 <puts>:
 8004ca8:	4b02      	ldr	r3, [pc, #8]	; (8004cb4 <puts+0xc>)
 8004caa:	4601      	mov	r1, r0
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	f7ff bfa7 	b.w	8004c00 <_puts_r>
 8004cb2:	bf00      	nop
 8004cb4:	20000064 	.word	0x20000064

08004cb8 <memset>:
 8004cb8:	4402      	add	r2, r0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <__errno>:
 8004cc8:	4b01      	ldr	r3, [pc, #4]	; (8004cd0 <__errno+0x8>)
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000064 	.word	0x20000064

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4d0d      	ldr	r5, [pc, #52]	; (8004d0c <__libc_init_array+0x38>)
 8004cd8:	4c0d      	ldr	r4, [pc, #52]	; (8004d10 <__libc_init_array+0x3c>)
 8004cda:	1b64      	subs	r4, r4, r5
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	2600      	movs	r6, #0
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	4d0b      	ldr	r5, [pc, #44]	; (8004d14 <__libc_init_array+0x40>)
 8004ce6:	4c0c      	ldr	r4, [pc, #48]	; (8004d18 <__libc_init_array+0x44>)
 8004ce8:	f000 febc 	bl	8005a64 <_init>
 8004cec:	1b64      	subs	r4, r4, r5
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08005b08 	.word	0x08005b08
 8004d10:	08005b08 	.word	0x08005b08
 8004d14:	08005b08 	.word	0x08005b08
 8004d18:	08005b0c 	.word	0x08005b0c

08004d1c <__retarget_lock_init_recursive>:
 8004d1c:	4770      	bx	lr

08004d1e <__retarget_lock_acquire_recursive>:
 8004d1e:	4770      	bx	lr

08004d20 <__retarget_lock_release_recursive>:
 8004d20:	4770      	bx	lr

08004d22 <__ssputs_r>:
 8004d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d26:	688e      	ldr	r6, [r1, #8]
 8004d28:	461f      	mov	r7, r3
 8004d2a:	42be      	cmp	r6, r7
 8004d2c:	680b      	ldr	r3, [r1, #0]
 8004d2e:	4682      	mov	sl, r0
 8004d30:	460c      	mov	r4, r1
 8004d32:	4690      	mov	r8, r2
 8004d34:	d82c      	bhi.n	8004d90 <__ssputs_r+0x6e>
 8004d36:	898a      	ldrh	r2, [r1, #12]
 8004d38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d3c:	d026      	beq.n	8004d8c <__ssputs_r+0x6a>
 8004d3e:	6965      	ldr	r5, [r4, #20]
 8004d40:	6909      	ldr	r1, [r1, #16]
 8004d42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d46:	eba3 0901 	sub.w	r9, r3, r1
 8004d4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d4e:	1c7b      	adds	r3, r7, #1
 8004d50:	444b      	add	r3, r9
 8004d52:	106d      	asrs	r5, r5, #1
 8004d54:	429d      	cmp	r5, r3
 8004d56:	bf38      	it	cc
 8004d58:	461d      	movcc	r5, r3
 8004d5a:	0553      	lsls	r3, r2, #21
 8004d5c:	d527      	bpl.n	8004dae <__ssputs_r+0x8c>
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f000 f958 	bl	8005014 <_malloc_r>
 8004d64:	4606      	mov	r6, r0
 8004d66:	b360      	cbz	r0, 8004dc2 <__ssputs_r+0xa0>
 8004d68:	6921      	ldr	r1, [r4, #16]
 8004d6a:	464a      	mov	r2, r9
 8004d6c:	f000 fe18 	bl	80059a0 <memcpy>
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7a:	81a3      	strh	r3, [r4, #12]
 8004d7c:	6126      	str	r6, [r4, #16]
 8004d7e:	6165      	str	r5, [r4, #20]
 8004d80:	444e      	add	r6, r9
 8004d82:	eba5 0509 	sub.w	r5, r5, r9
 8004d86:	6026      	str	r6, [r4, #0]
 8004d88:	60a5      	str	r5, [r4, #8]
 8004d8a:	463e      	mov	r6, r7
 8004d8c:	42be      	cmp	r6, r7
 8004d8e:	d900      	bls.n	8004d92 <__ssputs_r+0x70>
 8004d90:	463e      	mov	r6, r7
 8004d92:	6820      	ldr	r0, [r4, #0]
 8004d94:	4632      	mov	r2, r6
 8004d96:	4641      	mov	r1, r8
 8004d98:	f000 fd70 	bl	800587c <memmove>
 8004d9c:	68a3      	ldr	r3, [r4, #8]
 8004d9e:	1b9b      	subs	r3, r3, r6
 8004da0:	60a3      	str	r3, [r4, #8]
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	4433      	add	r3, r6
 8004da6:	6023      	str	r3, [r4, #0]
 8004da8:	2000      	movs	r0, #0
 8004daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dae:	462a      	mov	r2, r5
 8004db0:	f000 fc3d 	bl	800562e <_realloc_r>
 8004db4:	4606      	mov	r6, r0
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d1e0      	bne.n	8004d7c <__ssputs_r+0x5a>
 8004dba:	6921      	ldr	r1, [r4, #16]
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	f000 fdfd 	bl	80059bc <_free_r>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	f8ca 3000 	str.w	r3, [sl]
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd4:	e7e9      	b.n	8004daa <__ssputs_r+0x88>
	...

08004dd8 <_svfiprintf_r>:
 8004dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	4698      	mov	r8, r3
 8004dde:	898b      	ldrh	r3, [r1, #12]
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	b09d      	sub	sp, #116	; 0x74
 8004de4:	4607      	mov	r7, r0
 8004de6:	460d      	mov	r5, r1
 8004de8:	4614      	mov	r4, r2
 8004dea:	d50e      	bpl.n	8004e0a <_svfiprintf_r+0x32>
 8004dec:	690b      	ldr	r3, [r1, #16]
 8004dee:	b963      	cbnz	r3, 8004e0a <_svfiprintf_r+0x32>
 8004df0:	2140      	movs	r1, #64	; 0x40
 8004df2:	f000 f90f 	bl	8005014 <_malloc_r>
 8004df6:	6028      	str	r0, [r5, #0]
 8004df8:	6128      	str	r0, [r5, #16]
 8004dfa:	b920      	cbnz	r0, 8004e06 <_svfiprintf_r+0x2e>
 8004dfc:	230c      	movs	r3, #12
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e04:	e0d0      	b.n	8004fa8 <_svfiprintf_r+0x1d0>
 8004e06:	2340      	movs	r3, #64	; 0x40
 8004e08:	616b      	str	r3, [r5, #20]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0e:	2320      	movs	r3, #32
 8004e10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e18:	2330      	movs	r3, #48	; 0x30
 8004e1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004fc0 <_svfiprintf_r+0x1e8>
 8004e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e22:	f04f 0901 	mov.w	r9, #1
 8004e26:	4623      	mov	r3, r4
 8004e28:	469a      	mov	sl, r3
 8004e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e2e:	b10a      	cbz	r2, 8004e34 <_svfiprintf_r+0x5c>
 8004e30:	2a25      	cmp	r2, #37	; 0x25
 8004e32:	d1f9      	bne.n	8004e28 <_svfiprintf_r+0x50>
 8004e34:	ebba 0b04 	subs.w	fp, sl, r4
 8004e38:	d00b      	beq.n	8004e52 <_svfiprintf_r+0x7a>
 8004e3a:	465b      	mov	r3, fp
 8004e3c:	4622      	mov	r2, r4
 8004e3e:	4629      	mov	r1, r5
 8004e40:	4638      	mov	r0, r7
 8004e42:	f7ff ff6e 	bl	8004d22 <__ssputs_r>
 8004e46:	3001      	adds	r0, #1
 8004e48:	f000 80a9 	beq.w	8004f9e <_svfiprintf_r+0x1c6>
 8004e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e4e:	445a      	add	r2, fp
 8004e50:	9209      	str	r2, [sp, #36]	; 0x24
 8004e52:	f89a 3000 	ldrb.w	r3, [sl]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80a1 	beq.w	8004f9e <_svfiprintf_r+0x1c6>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e66:	f10a 0a01 	add.w	sl, sl, #1
 8004e6a:	9304      	str	r3, [sp, #16]
 8004e6c:	9307      	str	r3, [sp, #28]
 8004e6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e72:	931a      	str	r3, [sp, #104]	; 0x68
 8004e74:	4654      	mov	r4, sl
 8004e76:	2205      	movs	r2, #5
 8004e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e7c:	4850      	ldr	r0, [pc, #320]	; (8004fc0 <_svfiprintf_r+0x1e8>)
 8004e7e:	f7fb f9df 	bl	8000240 <memchr>
 8004e82:	9a04      	ldr	r2, [sp, #16]
 8004e84:	b9d8      	cbnz	r0, 8004ebe <_svfiprintf_r+0xe6>
 8004e86:	06d0      	lsls	r0, r2, #27
 8004e88:	bf44      	itt	mi
 8004e8a:	2320      	movmi	r3, #32
 8004e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e90:	0711      	lsls	r1, r2, #28
 8004e92:	bf44      	itt	mi
 8004e94:	232b      	movmi	r3, #43	; 0x2b
 8004e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea0:	d015      	beq.n	8004ece <_svfiprintf_r+0xf6>
 8004ea2:	9a07      	ldr	r2, [sp, #28]
 8004ea4:	4654      	mov	r4, sl
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f04f 0c0a 	mov.w	ip, #10
 8004eac:	4621      	mov	r1, r4
 8004eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eb2:	3b30      	subs	r3, #48	; 0x30
 8004eb4:	2b09      	cmp	r3, #9
 8004eb6:	d94d      	bls.n	8004f54 <_svfiprintf_r+0x17c>
 8004eb8:	b1b0      	cbz	r0, 8004ee8 <_svfiprintf_r+0x110>
 8004eba:	9207      	str	r2, [sp, #28]
 8004ebc:	e014      	b.n	8004ee8 <_svfiprintf_r+0x110>
 8004ebe:	eba0 0308 	sub.w	r3, r0, r8
 8004ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	9304      	str	r3, [sp, #16]
 8004eca:	46a2      	mov	sl, r4
 8004ecc:	e7d2      	b.n	8004e74 <_svfiprintf_r+0x9c>
 8004ece:	9b03      	ldr	r3, [sp, #12]
 8004ed0:	1d19      	adds	r1, r3, #4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	9103      	str	r1, [sp, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	bfbb      	ittet	lt
 8004eda:	425b      	neglt	r3, r3
 8004edc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ee0:	9307      	strge	r3, [sp, #28]
 8004ee2:	9307      	strlt	r3, [sp, #28]
 8004ee4:	bfb8      	it	lt
 8004ee6:	9204      	strlt	r2, [sp, #16]
 8004ee8:	7823      	ldrb	r3, [r4, #0]
 8004eea:	2b2e      	cmp	r3, #46	; 0x2e
 8004eec:	d10c      	bne.n	8004f08 <_svfiprintf_r+0x130>
 8004eee:	7863      	ldrb	r3, [r4, #1]
 8004ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef2:	d134      	bne.n	8004f5e <_svfiprintf_r+0x186>
 8004ef4:	9b03      	ldr	r3, [sp, #12]
 8004ef6:	1d1a      	adds	r2, r3, #4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	9203      	str	r2, [sp, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bfb8      	it	lt
 8004f00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f04:	3402      	adds	r4, #2
 8004f06:	9305      	str	r3, [sp, #20]
 8004f08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004fd0 <_svfiprintf_r+0x1f8>
 8004f0c:	7821      	ldrb	r1, [r4, #0]
 8004f0e:	2203      	movs	r2, #3
 8004f10:	4650      	mov	r0, sl
 8004f12:	f7fb f995 	bl	8000240 <memchr>
 8004f16:	b138      	cbz	r0, 8004f28 <_svfiprintf_r+0x150>
 8004f18:	9b04      	ldr	r3, [sp, #16]
 8004f1a:	eba0 000a 	sub.w	r0, r0, sl
 8004f1e:	2240      	movs	r2, #64	; 0x40
 8004f20:	4082      	lsls	r2, r0
 8004f22:	4313      	orrs	r3, r2
 8004f24:	3401      	adds	r4, #1
 8004f26:	9304      	str	r3, [sp, #16]
 8004f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f2c:	4825      	ldr	r0, [pc, #148]	; (8004fc4 <_svfiprintf_r+0x1ec>)
 8004f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f32:	2206      	movs	r2, #6
 8004f34:	f7fb f984 	bl	8000240 <memchr>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d038      	beq.n	8004fae <_svfiprintf_r+0x1d6>
 8004f3c:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <_svfiprintf_r+0x1f0>)
 8004f3e:	bb1b      	cbnz	r3, 8004f88 <_svfiprintf_r+0x1b0>
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	3307      	adds	r3, #7
 8004f44:	f023 0307 	bic.w	r3, r3, #7
 8004f48:	3308      	adds	r3, #8
 8004f4a:	9303      	str	r3, [sp, #12]
 8004f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f4e:	4433      	add	r3, r6
 8004f50:	9309      	str	r3, [sp, #36]	; 0x24
 8004f52:	e768      	b.n	8004e26 <_svfiprintf_r+0x4e>
 8004f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f58:	460c      	mov	r4, r1
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	e7a6      	b.n	8004eac <_svfiprintf_r+0xd4>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	3401      	adds	r4, #1
 8004f62:	9305      	str	r3, [sp, #20]
 8004f64:	4619      	mov	r1, r3
 8004f66:	f04f 0c0a 	mov.w	ip, #10
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f70:	3a30      	subs	r2, #48	; 0x30
 8004f72:	2a09      	cmp	r2, #9
 8004f74:	d903      	bls.n	8004f7e <_svfiprintf_r+0x1a6>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0c6      	beq.n	8004f08 <_svfiprintf_r+0x130>
 8004f7a:	9105      	str	r1, [sp, #20]
 8004f7c:	e7c4      	b.n	8004f08 <_svfiprintf_r+0x130>
 8004f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f82:	4604      	mov	r4, r0
 8004f84:	2301      	movs	r3, #1
 8004f86:	e7f0      	b.n	8004f6a <_svfiprintf_r+0x192>
 8004f88:	ab03      	add	r3, sp, #12
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	462a      	mov	r2, r5
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <_svfiprintf_r+0x1f4>)
 8004f90:	a904      	add	r1, sp, #16
 8004f92:	4638      	mov	r0, r7
 8004f94:	f3af 8000 	nop.w
 8004f98:	1c42      	adds	r2, r0, #1
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	d1d6      	bne.n	8004f4c <_svfiprintf_r+0x174>
 8004f9e:	89ab      	ldrh	r3, [r5, #12]
 8004fa0:	065b      	lsls	r3, r3, #25
 8004fa2:	f53f af2d 	bmi.w	8004e00 <_svfiprintf_r+0x28>
 8004fa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fa8:	b01d      	add	sp, #116	; 0x74
 8004faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fae:	ab03      	add	r3, sp, #12
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <_svfiprintf_r+0x1f4>)
 8004fb6:	a904      	add	r1, sp, #16
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f000 f919 	bl	80051f0 <_printf_i>
 8004fbe:	e7eb      	b.n	8004f98 <_svfiprintf_r+0x1c0>
 8004fc0:	08005acc 	.word	0x08005acc
 8004fc4:	08005ad6 	.word	0x08005ad6
 8004fc8:	00000000 	.word	0x00000000
 8004fcc:	08004d23 	.word	0x08004d23
 8004fd0:	08005ad2 	.word	0x08005ad2

08004fd4 <sbrk_aligned>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4e0e      	ldr	r6, [pc, #56]	; (8005010 <sbrk_aligned+0x3c>)
 8004fd8:	460c      	mov	r4, r1
 8004fda:	6831      	ldr	r1, [r6, #0]
 8004fdc:	4605      	mov	r5, r0
 8004fde:	b911      	cbnz	r1, 8004fe6 <sbrk_aligned+0x12>
 8004fe0:	f000 fcbc 	bl	800595c <_sbrk_r>
 8004fe4:	6030      	str	r0, [r6, #0]
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f000 fcb7 	bl	800595c <_sbrk_r>
 8004fee:	1c43      	adds	r3, r0, #1
 8004ff0:	d00a      	beq.n	8005008 <sbrk_aligned+0x34>
 8004ff2:	1cc4      	adds	r4, r0, #3
 8004ff4:	f024 0403 	bic.w	r4, r4, #3
 8004ff8:	42a0      	cmp	r0, r4
 8004ffa:	d007      	beq.n	800500c <sbrk_aligned+0x38>
 8004ffc:	1a21      	subs	r1, r4, r0
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 fcac 	bl	800595c <_sbrk_r>
 8005004:	3001      	adds	r0, #1
 8005006:	d101      	bne.n	800500c <sbrk_aligned+0x38>
 8005008:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800500c:	4620      	mov	r0, r4
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	200002f8 	.word	0x200002f8

08005014 <_malloc_r>:
 8005014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005018:	1ccd      	adds	r5, r1, #3
 800501a:	f025 0503 	bic.w	r5, r5, #3
 800501e:	3508      	adds	r5, #8
 8005020:	2d0c      	cmp	r5, #12
 8005022:	bf38      	it	cc
 8005024:	250c      	movcc	r5, #12
 8005026:	2d00      	cmp	r5, #0
 8005028:	4607      	mov	r7, r0
 800502a:	db01      	blt.n	8005030 <_malloc_r+0x1c>
 800502c:	42a9      	cmp	r1, r5
 800502e:	d905      	bls.n	800503c <_malloc_r+0x28>
 8005030:	230c      	movs	r3, #12
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	2600      	movs	r6, #0
 8005036:	4630      	mov	r0, r6
 8005038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800503c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005110 <_malloc_r+0xfc>
 8005040:	f000 faa6 	bl	8005590 <__malloc_lock>
 8005044:	f8d8 3000 	ldr.w	r3, [r8]
 8005048:	461c      	mov	r4, r3
 800504a:	bb5c      	cbnz	r4, 80050a4 <_malloc_r+0x90>
 800504c:	4629      	mov	r1, r5
 800504e:	4638      	mov	r0, r7
 8005050:	f7ff ffc0 	bl	8004fd4 <sbrk_aligned>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	4604      	mov	r4, r0
 8005058:	d155      	bne.n	8005106 <_malloc_r+0xf2>
 800505a:	f8d8 4000 	ldr.w	r4, [r8]
 800505e:	4626      	mov	r6, r4
 8005060:	2e00      	cmp	r6, #0
 8005062:	d145      	bne.n	80050f0 <_malloc_r+0xdc>
 8005064:	2c00      	cmp	r4, #0
 8005066:	d048      	beq.n	80050fa <_malloc_r+0xe6>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	4631      	mov	r1, r6
 800506c:	4638      	mov	r0, r7
 800506e:	eb04 0903 	add.w	r9, r4, r3
 8005072:	f000 fc73 	bl	800595c <_sbrk_r>
 8005076:	4581      	cmp	r9, r0
 8005078:	d13f      	bne.n	80050fa <_malloc_r+0xe6>
 800507a:	6821      	ldr	r1, [r4, #0]
 800507c:	1a6d      	subs	r5, r5, r1
 800507e:	4629      	mov	r1, r5
 8005080:	4638      	mov	r0, r7
 8005082:	f7ff ffa7 	bl	8004fd4 <sbrk_aligned>
 8005086:	3001      	adds	r0, #1
 8005088:	d037      	beq.n	80050fa <_malloc_r+0xe6>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	442b      	add	r3, r5
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	f8d8 3000 	ldr.w	r3, [r8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d038      	beq.n	800510a <_malloc_r+0xf6>
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	42a2      	cmp	r2, r4
 800509c:	d12b      	bne.n	80050f6 <_malloc_r+0xe2>
 800509e:	2200      	movs	r2, #0
 80050a0:	605a      	str	r2, [r3, #4]
 80050a2:	e00f      	b.n	80050c4 <_malloc_r+0xb0>
 80050a4:	6822      	ldr	r2, [r4, #0]
 80050a6:	1b52      	subs	r2, r2, r5
 80050a8:	d41f      	bmi.n	80050ea <_malloc_r+0xd6>
 80050aa:	2a0b      	cmp	r2, #11
 80050ac:	d917      	bls.n	80050de <_malloc_r+0xca>
 80050ae:	1961      	adds	r1, r4, r5
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	6025      	str	r5, [r4, #0]
 80050b4:	bf18      	it	ne
 80050b6:	6059      	strne	r1, [r3, #4]
 80050b8:	6863      	ldr	r3, [r4, #4]
 80050ba:	bf08      	it	eq
 80050bc:	f8c8 1000 	streq.w	r1, [r8]
 80050c0:	5162      	str	r2, [r4, r5]
 80050c2:	604b      	str	r3, [r1, #4]
 80050c4:	4638      	mov	r0, r7
 80050c6:	f104 060b 	add.w	r6, r4, #11
 80050ca:	f000 fa67 	bl	800559c <__malloc_unlock>
 80050ce:	f026 0607 	bic.w	r6, r6, #7
 80050d2:	1d23      	adds	r3, r4, #4
 80050d4:	1af2      	subs	r2, r6, r3
 80050d6:	d0ae      	beq.n	8005036 <_malloc_r+0x22>
 80050d8:	1b9b      	subs	r3, r3, r6
 80050da:	50a3      	str	r3, [r4, r2]
 80050dc:	e7ab      	b.n	8005036 <_malloc_r+0x22>
 80050de:	42a3      	cmp	r3, r4
 80050e0:	6862      	ldr	r2, [r4, #4]
 80050e2:	d1dd      	bne.n	80050a0 <_malloc_r+0x8c>
 80050e4:	f8c8 2000 	str.w	r2, [r8]
 80050e8:	e7ec      	b.n	80050c4 <_malloc_r+0xb0>
 80050ea:	4623      	mov	r3, r4
 80050ec:	6864      	ldr	r4, [r4, #4]
 80050ee:	e7ac      	b.n	800504a <_malloc_r+0x36>
 80050f0:	4634      	mov	r4, r6
 80050f2:	6876      	ldr	r6, [r6, #4]
 80050f4:	e7b4      	b.n	8005060 <_malloc_r+0x4c>
 80050f6:	4613      	mov	r3, r2
 80050f8:	e7cc      	b.n	8005094 <_malloc_r+0x80>
 80050fa:	230c      	movs	r3, #12
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	4638      	mov	r0, r7
 8005100:	f000 fa4c 	bl	800559c <__malloc_unlock>
 8005104:	e797      	b.n	8005036 <_malloc_r+0x22>
 8005106:	6025      	str	r5, [r4, #0]
 8005108:	e7dc      	b.n	80050c4 <_malloc_r+0xb0>
 800510a:	605b      	str	r3, [r3, #4]
 800510c:	deff      	udf	#255	; 0xff
 800510e:	bf00      	nop
 8005110:	200002f4 	.word	0x200002f4

08005114 <_printf_common>:
 8005114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	4616      	mov	r6, r2
 800511a:	4699      	mov	r9, r3
 800511c:	688a      	ldr	r2, [r1, #8]
 800511e:	690b      	ldr	r3, [r1, #16]
 8005120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005124:	4293      	cmp	r3, r2
 8005126:	bfb8      	it	lt
 8005128:	4613      	movlt	r3, r2
 800512a:	6033      	str	r3, [r6, #0]
 800512c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005130:	4607      	mov	r7, r0
 8005132:	460c      	mov	r4, r1
 8005134:	b10a      	cbz	r2, 800513a <_printf_common+0x26>
 8005136:	3301      	adds	r3, #1
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	0699      	lsls	r1, r3, #26
 800513e:	bf42      	ittt	mi
 8005140:	6833      	ldrmi	r3, [r6, #0]
 8005142:	3302      	addmi	r3, #2
 8005144:	6033      	strmi	r3, [r6, #0]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	f015 0506 	ands.w	r5, r5, #6
 800514c:	d106      	bne.n	800515c <_printf_common+0x48>
 800514e:	f104 0a19 	add.w	sl, r4, #25
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	6832      	ldr	r2, [r6, #0]
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	42ab      	cmp	r3, r5
 800515a:	dc26      	bgt.n	80051aa <_printf_common+0x96>
 800515c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005160:	1e13      	subs	r3, r2, #0
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	bf18      	it	ne
 8005166:	2301      	movne	r3, #1
 8005168:	0692      	lsls	r2, r2, #26
 800516a:	d42b      	bmi.n	80051c4 <_printf_common+0xb0>
 800516c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005170:	4649      	mov	r1, r9
 8005172:	4638      	mov	r0, r7
 8005174:	47c0      	blx	r8
 8005176:	3001      	adds	r0, #1
 8005178:	d01e      	beq.n	80051b8 <_printf_common+0xa4>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	f003 0306 	and.w	r3, r3, #6
 8005182:	2b04      	cmp	r3, #4
 8005184:	bf02      	ittt	eq
 8005186:	68e5      	ldreq	r5, [r4, #12]
 8005188:	6833      	ldreq	r3, [r6, #0]
 800518a:	1aed      	subeq	r5, r5, r3
 800518c:	68a3      	ldr	r3, [r4, #8]
 800518e:	bf0c      	ite	eq
 8005190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005194:	2500      	movne	r5, #0
 8005196:	4293      	cmp	r3, r2
 8005198:	bfc4      	itt	gt
 800519a:	1a9b      	subgt	r3, r3, r2
 800519c:	18ed      	addgt	r5, r5, r3
 800519e:	2600      	movs	r6, #0
 80051a0:	341a      	adds	r4, #26
 80051a2:	42b5      	cmp	r5, r6
 80051a4:	d11a      	bne.n	80051dc <_printf_common+0xc8>
 80051a6:	2000      	movs	r0, #0
 80051a8:	e008      	b.n	80051bc <_printf_common+0xa8>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4652      	mov	r2, sl
 80051ae:	4649      	mov	r1, r9
 80051b0:	4638      	mov	r0, r7
 80051b2:	47c0      	blx	r8
 80051b4:	3001      	adds	r0, #1
 80051b6:	d103      	bne.n	80051c0 <_printf_common+0xac>
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c0:	3501      	adds	r5, #1
 80051c2:	e7c6      	b.n	8005152 <_printf_common+0x3e>
 80051c4:	18e1      	adds	r1, r4, r3
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	2030      	movs	r0, #48	; 0x30
 80051ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ce:	4422      	add	r2, r4
 80051d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051d8:	3302      	adds	r3, #2
 80051da:	e7c7      	b.n	800516c <_printf_common+0x58>
 80051dc:	2301      	movs	r3, #1
 80051de:	4622      	mov	r2, r4
 80051e0:	4649      	mov	r1, r9
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d0e6      	beq.n	80051b8 <_printf_common+0xa4>
 80051ea:	3601      	adds	r6, #1
 80051ec:	e7d9      	b.n	80051a2 <_printf_common+0x8e>
	...

080051f0 <_printf_i>:
 80051f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	7e0f      	ldrb	r7, [r1, #24]
 80051f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051f8:	2f78      	cmp	r7, #120	; 0x78
 80051fa:	4691      	mov	r9, r2
 80051fc:	4680      	mov	r8, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	469a      	mov	sl, r3
 8005202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005206:	d807      	bhi.n	8005218 <_printf_i+0x28>
 8005208:	2f62      	cmp	r7, #98	; 0x62
 800520a:	d80a      	bhi.n	8005222 <_printf_i+0x32>
 800520c:	2f00      	cmp	r7, #0
 800520e:	f000 80d4 	beq.w	80053ba <_printf_i+0x1ca>
 8005212:	2f58      	cmp	r7, #88	; 0x58
 8005214:	f000 80c0 	beq.w	8005398 <_printf_i+0x1a8>
 8005218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800521c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005220:	e03a      	b.n	8005298 <_printf_i+0xa8>
 8005222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005226:	2b15      	cmp	r3, #21
 8005228:	d8f6      	bhi.n	8005218 <_printf_i+0x28>
 800522a:	a101      	add	r1, pc, #4	; (adr r1, 8005230 <_printf_i+0x40>)
 800522c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005230:	08005289 	.word	0x08005289
 8005234:	0800529d 	.word	0x0800529d
 8005238:	08005219 	.word	0x08005219
 800523c:	08005219 	.word	0x08005219
 8005240:	08005219 	.word	0x08005219
 8005244:	08005219 	.word	0x08005219
 8005248:	0800529d 	.word	0x0800529d
 800524c:	08005219 	.word	0x08005219
 8005250:	08005219 	.word	0x08005219
 8005254:	08005219 	.word	0x08005219
 8005258:	08005219 	.word	0x08005219
 800525c:	080053a1 	.word	0x080053a1
 8005260:	080052c9 	.word	0x080052c9
 8005264:	0800535b 	.word	0x0800535b
 8005268:	08005219 	.word	0x08005219
 800526c:	08005219 	.word	0x08005219
 8005270:	080053c3 	.word	0x080053c3
 8005274:	08005219 	.word	0x08005219
 8005278:	080052c9 	.word	0x080052c9
 800527c:	08005219 	.word	0x08005219
 8005280:	08005219 	.word	0x08005219
 8005284:	08005363 	.word	0x08005363
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	602a      	str	r2, [r5, #0]
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005298:	2301      	movs	r3, #1
 800529a:	e09f      	b.n	80053dc <_printf_i+0x1ec>
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	682b      	ldr	r3, [r5, #0]
 80052a0:	0607      	lsls	r7, r0, #24
 80052a2:	f103 0104 	add.w	r1, r3, #4
 80052a6:	6029      	str	r1, [r5, #0]
 80052a8:	d501      	bpl.n	80052ae <_printf_i+0xbe>
 80052aa:	681e      	ldr	r6, [r3, #0]
 80052ac:	e003      	b.n	80052b6 <_printf_i+0xc6>
 80052ae:	0646      	lsls	r6, r0, #25
 80052b0:	d5fb      	bpl.n	80052aa <_printf_i+0xba>
 80052b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	da03      	bge.n	80052c2 <_printf_i+0xd2>
 80052ba:	232d      	movs	r3, #45	; 0x2d
 80052bc:	4276      	negs	r6, r6
 80052be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c2:	485a      	ldr	r0, [pc, #360]	; (800542c <_printf_i+0x23c>)
 80052c4:	230a      	movs	r3, #10
 80052c6:	e012      	b.n	80052ee <_printf_i+0xfe>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	6820      	ldr	r0, [r4, #0]
 80052cc:	1d19      	adds	r1, r3, #4
 80052ce:	6029      	str	r1, [r5, #0]
 80052d0:	0605      	lsls	r5, r0, #24
 80052d2:	d501      	bpl.n	80052d8 <_printf_i+0xe8>
 80052d4:	681e      	ldr	r6, [r3, #0]
 80052d6:	e002      	b.n	80052de <_printf_i+0xee>
 80052d8:	0641      	lsls	r1, r0, #25
 80052da:	d5fb      	bpl.n	80052d4 <_printf_i+0xe4>
 80052dc:	881e      	ldrh	r6, [r3, #0]
 80052de:	4853      	ldr	r0, [pc, #332]	; (800542c <_printf_i+0x23c>)
 80052e0:	2f6f      	cmp	r7, #111	; 0x6f
 80052e2:	bf0c      	ite	eq
 80052e4:	2308      	moveq	r3, #8
 80052e6:	230a      	movne	r3, #10
 80052e8:	2100      	movs	r1, #0
 80052ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052ee:	6865      	ldr	r5, [r4, #4]
 80052f0:	60a5      	str	r5, [r4, #8]
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	bfa2      	ittt	ge
 80052f6:	6821      	ldrge	r1, [r4, #0]
 80052f8:	f021 0104 	bicge.w	r1, r1, #4
 80052fc:	6021      	strge	r1, [r4, #0]
 80052fe:	b90e      	cbnz	r6, 8005304 <_printf_i+0x114>
 8005300:	2d00      	cmp	r5, #0
 8005302:	d04b      	beq.n	800539c <_printf_i+0x1ac>
 8005304:	4615      	mov	r5, r2
 8005306:	fbb6 f1f3 	udiv	r1, r6, r3
 800530a:	fb03 6711 	mls	r7, r3, r1, r6
 800530e:	5dc7      	ldrb	r7, [r0, r7]
 8005310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005314:	4637      	mov	r7, r6
 8005316:	42bb      	cmp	r3, r7
 8005318:	460e      	mov	r6, r1
 800531a:	d9f4      	bls.n	8005306 <_printf_i+0x116>
 800531c:	2b08      	cmp	r3, #8
 800531e:	d10b      	bne.n	8005338 <_printf_i+0x148>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	07de      	lsls	r6, r3, #31
 8005324:	d508      	bpl.n	8005338 <_printf_i+0x148>
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	6861      	ldr	r1, [r4, #4]
 800532a:	4299      	cmp	r1, r3
 800532c:	bfde      	ittt	le
 800532e:	2330      	movle	r3, #48	; 0x30
 8005330:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005334:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005338:	1b52      	subs	r2, r2, r5
 800533a:	6122      	str	r2, [r4, #16]
 800533c:	f8cd a000 	str.w	sl, [sp]
 8005340:	464b      	mov	r3, r9
 8005342:	aa03      	add	r2, sp, #12
 8005344:	4621      	mov	r1, r4
 8005346:	4640      	mov	r0, r8
 8005348:	f7ff fee4 	bl	8005114 <_printf_common>
 800534c:	3001      	adds	r0, #1
 800534e:	d14a      	bne.n	80053e6 <_printf_i+0x1f6>
 8005350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005354:	b004      	add	sp, #16
 8005356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	f043 0320 	orr.w	r3, r3, #32
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	4833      	ldr	r0, [pc, #204]	; (8005430 <_printf_i+0x240>)
 8005364:	2778      	movs	r7, #120	; 0x78
 8005366:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	6829      	ldr	r1, [r5, #0]
 800536e:	061f      	lsls	r7, r3, #24
 8005370:	f851 6b04 	ldr.w	r6, [r1], #4
 8005374:	d402      	bmi.n	800537c <_printf_i+0x18c>
 8005376:	065f      	lsls	r7, r3, #25
 8005378:	bf48      	it	mi
 800537a:	b2b6      	uxthmi	r6, r6
 800537c:	07df      	lsls	r7, r3, #31
 800537e:	bf48      	it	mi
 8005380:	f043 0320 	orrmi.w	r3, r3, #32
 8005384:	6029      	str	r1, [r5, #0]
 8005386:	bf48      	it	mi
 8005388:	6023      	strmi	r3, [r4, #0]
 800538a:	b91e      	cbnz	r6, 8005394 <_printf_i+0x1a4>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	f023 0320 	bic.w	r3, r3, #32
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	2310      	movs	r3, #16
 8005396:	e7a7      	b.n	80052e8 <_printf_i+0xf8>
 8005398:	4824      	ldr	r0, [pc, #144]	; (800542c <_printf_i+0x23c>)
 800539a:	e7e4      	b.n	8005366 <_printf_i+0x176>
 800539c:	4615      	mov	r5, r2
 800539e:	e7bd      	b.n	800531c <_printf_i+0x12c>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	6826      	ldr	r6, [r4, #0]
 80053a4:	6961      	ldr	r1, [r4, #20]
 80053a6:	1d18      	adds	r0, r3, #4
 80053a8:	6028      	str	r0, [r5, #0]
 80053aa:	0635      	lsls	r5, r6, #24
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	d501      	bpl.n	80053b4 <_printf_i+0x1c4>
 80053b0:	6019      	str	r1, [r3, #0]
 80053b2:	e002      	b.n	80053ba <_printf_i+0x1ca>
 80053b4:	0670      	lsls	r0, r6, #25
 80053b6:	d5fb      	bpl.n	80053b0 <_printf_i+0x1c0>
 80053b8:	8019      	strh	r1, [r3, #0]
 80053ba:	2300      	movs	r3, #0
 80053bc:	6123      	str	r3, [r4, #16]
 80053be:	4615      	mov	r5, r2
 80053c0:	e7bc      	b.n	800533c <_printf_i+0x14c>
 80053c2:	682b      	ldr	r3, [r5, #0]
 80053c4:	1d1a      	adds	r2, r3, #4
 80053c6:	602a      	str	r2, [r5, #0]
 80053c8:	681d      	ldr	r5, [r3, #0]
 80053ca:	6862      	ldr	r2, [r4, #4]
 80053cc:	2100      	movs	r1, #0
 80053ce:	4628      	mov	r0, r5
 80053d0:	f7fa ff36 	bl	8000240 <memchr>
 80053d4:	b108      	cbz	r0, 80053da <_printf_i+0x1ea>
 80053d6:	1b40      	subs	r0, r0, r5
 80053d8:	6060      	str	r0, [r4, #4]
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	2300      	movs	r3, #0
 80053e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e4:	e7aa      	b.n	800533c <_printf_i+0x14c>
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	462a      	mov	r2, r5
 80053ea:	4649      	mov	r1, r9
 80053ec:	4640      	mov	r0, r8
 80053ee:	47d0      	blx	sl
 80053f0:	3001      	adds	r0, #1
 80053f2:	d0ad      	beq.n	8005350 <_printf_i+0x160>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	079b      	lsls	r3, r3, #30
 80053f8:	d413      	bmi.n	8005422 <_printf_i+0x232>
 80053fa:	68e0      	ldr	r0, [r4, #12]
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	4298      	cmp	r0, r3
 8005400:	bfb8      	it	lt
 8005402:	4618      	movlt	r0, r3
 8005404:	e7a6      	b.n	8005354 <_printf_i+0x164>
 8005406:	2301      	movs	r3, #1
 8005408:	4632      	mov	r2, r6
 800540a:	4649      	mov	r1, r9
 800540c:	4640      	mov	r0, r8
 800540e:	47d0      	blx	sl
 8005410:	3001      	adds	r0, #1
 8005412:	d09d      	beq.n	8005350 <_printf_i+0x160>
 8005414:	3501      	adds	r5, #1
 8005416:	68e3      	ldr	r3, [r4, #12]
 8005418:	9903      	ldr	r1, [sp, #12]
 800541a:	1a5b      	subs	r3, r3, r1
 800541c:	42ab      	cmp	r3, r5
 800541e:	dcf2      	bgt.n	8005406 <_printf_i+0x216>
 8005420:	e7eb      	b.n	80053fa <_printf_i+0x20a>
 8005422:	2500      	movs	r5, #0
 8005424:	f104 0619 	add.w	r6, r4, #25
 8005428:	e7f5      	b.n	8005416 <_printf_i+0x226>
 800542a:	bf00      	nop
 800542c:	08005add 	.word	0x08005add
 8005430:	08005aee 	.word	0x08005aee

08005434 <__sflush_r>:
 8005434:	898a      	ldrh	r2, [r1, #12]
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	4605      	mov	r5, r0
 800543c:	0710      	lsls	r0, r2, #28
 800543e:	460c      	mov	r4, r1
 8005440:	d458      	bmi.n	80054f4 <__sflush_r+0xc0>
 8005442:	684b      	ldr	r3, [r1, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	dc05      	bgt.n	8005454 <__sflush_r+0x20>
 8005448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	dc02      	bgt.n	8005454 <__sflush_r+0x20>
 800544e:	2000      	movs	r0, #0
 8005450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005456:	2e00      	cmp	r6, #0
 8005458:	d0f9      	beq.n	800544e <__sflush_r+0x1a>
 800545a:	2300      	movs	r3, #0
 800545c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005460:	682f      	ldr	r7, [r5, #0]
 8005462:	6a21      	ldr	r1, [r4, #32]
 8005464:	602b      	str	r3, [r5, #0]
 8005466:	d032      	beq.n	80054ce <__sflush_r+0x9a>
 8005468:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	075a      	lsls	r2, r3, #29
 800546e:	d505      	bpl.n	800547c <__sflush_r+0x48>
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	1ac0      	subs	r0, r0, r3
 8005474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005476:	b10b      	cbz	r3, 800547c <__sflush_r+0x48>
 8005478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800547a:	1ac0      	subs	r0, r0, r3
 800547c:	2300      	movs	r3, #0
 800547e:	4602      	mov	r2, r0
 8005480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005482:	6a21      	ldr	r1, [r4, #32]
 8005484:	4628      	mov	r0, r5
 8005486:	47b0      	blx	r6
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	89a3      	ldrh	r3, [r4, #12]
 800548c:	d106      	bne.n	800549c <__sflush_r+0x68>
 800548e:	6829      	ldr	r1, [r5, #0]
 8005490:	291d      	cmp	r1, #29
 8005492:	d82b      	bhi.n	80054ec <__sflush_r+0xb8>
 8005494:	4a29      	ldr	r2, [pc, #164]	; (800553c <__sflush_r+0x108>)
 8005496:	410a      	asrs	r2, r1
 8005498:	07d6      	lsls	r6, r2, #31
 800549a:	d427      	bmi.n	80054ec <__sflush_r+0xb8>
 800549c:	2200      	movs	r2, #0
 800549e:	6062      	str	r2, [r4, #4]
 80054a0:	04d9      	lsls	r1, r3, #19
 80054a2:	6922      	ldr	r2, [r4, #16]
 80054a4:	6022      	str	r2, [r4, #0]
 80054a6:	d504      	bpl.n	80054b2 <__sflush_r+0x7e>
 80054a8:	1c42      	adds	r2, r0, #1
 80054aa:	d101      	bne.n	80054b0 <__sflush_r+0x7c>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b903      	cbnz	r3, 80054b2 <__sflush_r+0x7e>
 80054b0:	6560      	str	r0, [r4, #84]	; 0x54
 80054b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054b4:	602f      	str	r7, [r5, #0]
 80054b6:	2900      	cmp	r1, #0
 80054b8:	d0c9      	beq.n	800544e <__sflush_r+0x1a>
 80054ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054be:	4299      	cmp	r1, r3
 80054c0:	d002      	beq.n	80054c8 <__sflush_r+0x94>
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 fa7a 	bl	80059bc <_free_r>
 80054c8:	2000      	movs	r0, #0
 80054ca:	6360      	str	r0, [r4, #52]	; 0x34
 80054cc:	e7c0      	b.n	8005450 <__sflush_r+0x1c>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4628      	mov	r0, r5
 80054d2:	47b0      	blx	r6
 80054d4:	1c41      	adds	r1, r0, #1
 80054d6:	d1c8      	bne.n	800546a <__sflush_r+0x36>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0c5      	beq.n	800546a <__sflush_r+0x36>
 80054de:	2b1d      	cmp	r3, #29
 80054e0:	d001      	beq.n	80054e6 <__sflush_r+0xb2>
 80054e2:	2b16      	cmp	r3, #22
 80054e4:	d101      	bne.n	80054ea <__sflush_r+0xb6>
 80054e6:	602f      	str	r7, [r5, #0]
 80054e8:	e7b1      	b.n	800544e <__sflush_r+0x1a>
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	e7ad      	b.n	8005450 <__sflush_r+0x1c>
 80054f4:	690f      	ldr	r7, [r1, #16]
 80054f6:	2f00      	cmp	r7, #0
 80054f8:	d0a9      	beq.n	800544e <__sflush_r+0x1a>
 80054fa:	0793      	lsls	r3, r2, #30
 80054fc:	680e      	ldr	r6, [r1, #0]
 80054fe:	bf08      	it	eq
 8005500:	694b      	ldreq	r3, [r1, #20]
 8005502:	600f      	str	r7, [r1, #0]
 8005504:	bf18      	it	ne
 8005506:	2300      	movne	r3, #0
 8005508:	eba6 0807 	sub.w	r8, r6, r7
 800550c:	608b      	str	r3, [r1, #8]
 800550e:	f1b8 0f00 	cmp.w	r8, #0
 8005512:	dd9c      	ble.n	800544e <__sflush_r+0x1a>
 8005514:	6a21      	ldr	r1, [r4, #32]
 8005516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005518:	4643      	mov	r3, r8
 800551a:	463a      	mov	r2, r7
 800551c:	4628      	mov	r0, r5
 800551e:	47b0      	blx	r6
 8005520:	2800      	cmp	r0, #0
 8005522:	dc06      	bgt.n	8005532 <__sflush_r+0xfe>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552a:	81a3      	strh	r3, [r4, #12]
 800552c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005530:	e78e      	b.n	8005450 <__sflush_r+0x1c>
 8005532:	4407      	add	r7, r0
 8005534:	eba8 0800 	sub.w	r8, r8, r0
 8005538:	e7e9      	b.n	800550e <__sflush_r+0xda>
 800553a:	bf00      	nop
 800553c:	dfbffffe 	.word	0xdfbffffe

08005540 <_fflush_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	690b      	ldr	r3, [r1, #16]
 8005544:	4605      	mov	r5, r0
 8005546:	460c      	mov	r4, r1
 8005548:	b913      	cbnz	r3, 8005550 <_fflush_r+0x10>
 800554a:	2500      	movs	r5, #0
 800554c:	4628      	mov	r0, r5
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	b118      	cbz	r0, 800555a <_fflush_r+0x1a>
 8005552:	6a03      	ldr	r3, [r0, #32]
 8005554:	b90b      	cbnz	r3, 800555a <_fflush_r+0x1a>
 8005556:	f7ff fb1d 	bl	8004b94 <__sinit>
 800555a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f3      	beq.n	800554a <_fflush_r+0xa>
 8005562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005564:	07d0      	lsls	r0, r2, #31
 8005566:	d404      	bmi.n	8005572 <_fflush_r+0x32>
 8005568:	0599      	lsls	r1, r3, #22
 800556a:	d402      	bmi.n	8005572 <_fflush_r+0x32>
 800556c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800556e:	f7ff fbd6 	bl	8004d1e <__retarget_lock_acquire_recursive>
 8005572:	4628      	mov	r0, r5
 8005574:	4621      	mov	r1, r4
 8005576:	f7ff ff5d 	bl	8005434 <__sflush_r>
 800557a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800557c:	07da      	lsls	r2, r3, #31
 800557e:	4605      	mov	r5, r0
 8005580:	d4e4      	bmi.n	800554c <_fflush_r+0xc>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	059b      	lsls	r3, r3, #22
 8005586:	d4e1      	bmi.n	800554c <_fflush_r+0xc>
 8005588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558a:	f7ff fbc9 	bl	8004d20 <__retarget_lock_release_recursive>
 800558e:	e7dd      	b.n	800554c <_fflush_r+0xc>

08005590 <__malloc_lock>:
 8005590:	4801      	ldr	r0, [pc, #4]	; (8005598 <__malloc_lock+0x8>)
 8005592:	f7ff bbc4 	b.w	8004d1e <__retarget_lock_acquire_recursive>
 8005596:	bf00      	nop
 8005598:	200002f0 	.word	0x200002f0

0800559c <__malloc_unlock>:
 800559c:	4801      	ldr	r0, [pc, #4]	; (80055a4 <__malloc_unlock+0x8>)
 800559e:	f7ff bbbf 	b.w	8004d20 <__retarget_lock_release_recursive>
 80055a2:	bf00      	nop
 80055a4:	200002f0 	.word	0x200002f0

080055a8 <__sread>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	460c      	mov	r4, r1
 80055ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b0:	f000 f9c2 	bl	8005938 <_read_r>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	bfab      	itete	ge
 80055b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055ba:	89a3      	ldrhlt	r3, [r4, #12]
 80055bc:	181b      	addge	r3, r3, r0
 80055be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055c2:	bfac      	ite	ge
 80055c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80055c6:	81a3      	strhlt	r3, [r4, #12]
 80055c8:	bd10      	pop	{r4, pc}

080055ca <__swrite>:
 80055ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ce:	461f      	mov	r7, r3
 80055d0:	898b      	ldrh	r3, [r1, #12]
 80055d2:	05db      	lsls	r3, r3, #23
 80055d4:	4605      	mov	r5, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4616      	mov	r6, r2
 80055da:	d505      	bpl.n	80055e8 <__swrite+0x1e>
 80055dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e0:	2302      	movs	r3, #2
 80055e2:	2200      	movs	r2, #0
 80055e4:	f000 f996 	bl	8005914 <_lseek_r>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	4632      	mov	r2, r6
 80055f6:	463b      	mov	r3, r7
 80055f8:	4628      	mov	r0, r5
 80055fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055fe:	f000 b9bd 	b.w	800597c <_write_r>

08005602 <__sseek>:
 8005602:	b510      	push	{r4, lr}
 8005604:	460c      	mov	r4, r1
 8005606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560a:	f000 f983 	bl	8005914 <_lseek_r>
 800560e:	1c43      	adds	r3, r0, #1
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	bf15      	itete	ne
 8005614:	6560      	strne	r0, [r4, #84]	; 0x54
 8005616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800561a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800561e:	81a3      	strheq	r3, [r4, #12]
 8005620:	bf18      	it	ne
 8005622:	81a3      	strhne	r3, [r4, #12]
 8005624:	bd10      	pop	{r4, pc}

08005626 <__sclose>:
 8005626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562a:	f000 b941 	b.w	80058b0 <_close_r>

0800562e <_realloc_r>:
 800562e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005632:	4680      	mov	r8, r0
 8005634:	4614      	mov	r4, r2
 8005636:	460e      	mov	r6, r1
 8005638:	b921      	cbnz	r1, 8005644 <_realloc_r+0x16>
 800563a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800563e:	4611      	mov	r1, r2
 8005640:	f7ff bce8 	b.w	8005014 <_malloc_r>
 8005644:	b92a      	cbnz	r2, 8005652 <_realloc_r+0x24>
 8005646:	f000 f9b9 	bl	80059bc <_free_r>
 800564a:	4625      	mov	r5, r4
 800564c:	4628      	mov	r0, r5
 800564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005652:	f000 f9ff 	bl	8005a54 <_malloc_usable_size_r>
 8005656:	4284      	cmp	r4, r0
 8005658:	4607      	mov	r7, r0
 800565a:	d802      	bhi.n	8005662 <_realloc_r+0x34>
 800565c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005660:	d812      	bhi.n	8005688 <_realloc_r+0x5a>
 8005662:	4621      	mov	r1, r4
 8005664:	4640      	mov	r0, r8
 8005666:	f7ff fcd5 	bl	8005014 <_malloc_r>
 800566a:	4605      	mov	r5, r0
 800566c:	2800      	cmp	r0, #0
 800566e:	d0ed      	beq.n	800564c <_realloc_r+0x1e>
 8005670:	42bc      	cmp	r4, r7
 8005672:	4622      	mov	r2, r4
 8005674:	4631      	mov	r1, r6
 8005676:	bf28      	it	cs
 8005678:	463a      	movcs	r2, r7
 800567a:	f000 f991 	bl	80059a0 <memcpy>
 800567e:	4631      	mov	r1, r6
 8005680:	4640      	mov	r0, r8
 8005682:	f000 f99b 	bl	80059bc <_free_r>
 8005686:	e7e1      	b.n	800564c <_realloc_r+0x1e>
 8005688:	4635      	mov	r5, r6
 800568a:	e7df      	b.n	800564c <_realloc_r+0x1e>

0800568c <__swbuf_r>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	460e      	mov	r6, r1
 8005690:	4614      	mov	r4, r2
 8005692:	4605      	mov	r5, r0
 8005694:	b118      	cbz	r0, 800569e <__swbuf_r+0x12>
 8005696:	6a03      	ldr	r3, [r0, #32]
 8005698:	b90b      	cbnz	r3, 800569e <__swbuf_r+0x12>
 800569a:	f7ff fa7b 	bl	8004b94 <__sinit>
 800569e:	69a3      	ldr	r3, [r4, #24]
 80056a0:	60a3      	str	r3, [r4, #8]
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	071a      	lsls	r2, r3, #28
 80056a6:	d525      	bpl.n	80056f4 <__swbuf_r+0x68>
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	b31b      	cbz	r3, 80056f4 <__swbuf_r+0x68>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	6922      	ldr	r2, [r4, #16]
 80056b0:	1a98      	subs	r0, r3, r2
 80056b2:	6963      	ldr	r3, [r4, #20]
 80056b4:	b2f6      	uxtb	r6, r6
 80056b6:	4283      	cmp	r3, r0
 80056b8:	4637      	mov	r7, r6
 80056ba:	dc04      	bgt.n	80056c6 <__swbuf_r+0x3a>
 80056bc:	4621      	mov	r1, r4
 80056be:	4628      	mov	r0, r5
 80056c0:	f7ff ff3e 	bl	8005540 <_fflush_r>
 80056c4:	b9e0      	cbnz	r0, 8005700 <__swbuf_r+0x74>
 80056c6:	68a3      	ldr	r3, [r4, #8]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	60a3      	str	r3, [r4, #8]
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	6022      	str	r2, [r4, #0]
 80056d2:	701e      	strb	r6, [r3, #0]
 80056d4:	6962      	ldr	r2, [r4, #20]
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	429a      	cmp	r2, r3
 80056da:	d004      	beq.n	80056e6 <__swbuf_r+0x5a>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	07db      	lsls	r3, r3, #31
 80056e0:	d506      	bpl.n	80056f0 <__swbuf_r+0x64>
 80056e2:	2e0a      	cmp	r6, #10
 80056e4:	d104      	bne.n	80056f0 <__swbuf_r+0x64>
 80056e6:	4621      	mov	r1, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	f7ff ff29 	bl	8005540 <_fflush_r>
 80056ee:	b938      	cbnz	r0, 8005700 <__swbuf_r+0x74>
 80056f0:	4638      	mov	r0, r7
 80056f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f4:	4621      	mov	r1, r4
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 f806 	bl	8005708 <__swsetup_r>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d0d5      	beq.n	80056ac <__swbuf_r+0x20>
 8005700:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005704:	e7f4      	b.n	80056f0 <__swbuf_r+0x64>
	...

08005708 <__swsetup_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4b2a      	ldr	r3, [pc, #168]	; (80057b4 <__swsetup_r+0xac>)
 800570c:	4605      	mov	r5, r0
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	460c      	mov	r4, r1
 8005712:	b118      	cbz	r0, 800571c <__swsetup_r+0x14>
 8005714:	6a03      	ldr	r3, [r0, #32]
 8005716:	b90b      	cbnz	r3, 800571c <__swsetup_r+0x14>
 8005718:	f7ff fa3c 	bl	8004b94 <__sinit>
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005722:	0718      	lsls	r0, r3, #28
 8005724:	d422      	bmi.n	800576c <__swsetup_r+0x64>
 8005726:	06d9      	lsls	r1, r3, #27
 8005728:	d407      	bmi.n	800573a <__swsetup_r+0x32>
 800572a:	2309      	movs	r3, #9
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005738:	e034      	b.n	80057a4 <__swsetup_r+0x9c>
 800573a:	0758      	lsls	r0, r3, #29
 800573c:	d512      	bpl.n	8005764 <__swsetup_r+0x5c>
 800573e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005740:	b141      	cbz	r1, 8005754 <__swsetup_r+0x4c>
 8005742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005746:	4299      	cmp	r1, r3
 8005748:	d002      	beq.n	8005750 <__swsetup_r+0x48>
 800574a:	4628      	mov	r0, r5
 800574c:	f000 f936 	bl	80059bc <_free_r>
 8005750:	2300      	movs	r3, #0
 8005752:	6363      	str	r3, [r4, #52]	; 0x34
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	2300      	movs	r3, #0
 800575e:	6063      	str	r3, [r4, #4]
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	f043 0308 	orr.w	r3, r3, #8
 800576a:	81a3      	strh	r3, [r4, #12]
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	b94b      	cbnz	r3, 8005784 <__swsetup_r+0x7c>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800577a:	d003      	beq.n	8005784 <__swsetup_r+0x7c>
 800577c:	4621      	mov	r1, r4
 800577e:	4628      	mov	r0, r5
 8005780:	f000 f840 	bl	8005804 <__smakebuf_r>
 8005784:	89a0      	ldrh	r0, [r4, #12]
 8005786:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800578a:	f010 0301 	ands.w	r3, r0, #1
 800578e:	d00a      	beq.n	80057a6 <__swsetup_r+0x9e>
 8005790:	2300      	movs	r3, #0
 8005792:	60a3      	str	r3, [r4, #8]
 8005794:	6963      	ldr	r3, [r4, #20]
 8005796:	425b      	negs	r3, r3
 8005798:	61a3      	str	r3, [r4, #24]
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	b943      	cbnz	r3, 80057b0 <__swsetup_r+0xa8>
 800579e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057a2:	d1c4      	bne.n	800572e <__swsetup_r+0x26>
 80057a4:	bd38      	pop	{r3, r4, r5, pc}
 80057a6:	0781      	lsls	r1, r0, #30
 80057a8:	bf58      	it	pl
 80057aa:	6963      	ldrpl	r3, [r4, #20]
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	e7f4      	b.n	800579a <__swsetup_r+0x92>
 80057b0:	2000      	movs	r0, #0
 80057b2:	e7f7      	b.n	80057a4 <__swsetup_r+0x9c>
 80057b4:	20000064 	.word	0x20000064

080057b8 <__swhatbuf_r>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	460c      	mov	r4, r1
 80057bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c0:	2900      	cmp	r1, #0
 80057c2:	b096      	sub	sp, #88	; 0x58
 80057c4:	4615      	mov	r5, r2
 80057c6:	461e      	mov	r6, r3
 80057c8:	da0d      	bge.n	80057e6 <__swhatbuf_r+0x2e>
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80057d0:	f04f 0100 	mov.w	r1, #0
 80057d4:	bf0c      	ite	eq
 80057d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80057da:	2340      	movne	r3, #64	; 0x40
 80057dc:	2000      	movs	r0, #0
 80057de:	6031      	str	r1, [r6, #0]
 80057e0:	602b      	str	r3, [r5, #0]
 80057e2:	b016      	add	sp, #88	; 0x58
 80057e4:	bd70      	pop	{r4, r5, r6, pc}
 80057e6:	466a      	mov	r2, sp
 80057e8:	f000 f872 	bl	80058d0 <_fstat_r>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dbec      	blt.n	80057ca <__swhatbuf_r+0x12>
 80057f0:	9901      	ldr	r1, [sp, #4]
 80057f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80057f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80057fa:	4259      	negs	r1, r3
 80057fc:	4159      	adcs	r1, r3
 80057fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005802:	e7eb      	b.n	80057dc <__swhatbuf_r+0x24>

08005804 <__smakebuf_r>:
 8005804:	898b      	ldrh	r3, [r1, #12]
 8005806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005808:	079d      	lsls	r5, r3, #30
 800580a:	4606      	mov	r6, r0
 800580c:	460c      	mov	r4, r1
 800580e:	d507      	bpl.n	8005820 <__smakebuf_r+0x1c>
 8005810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	6123      	str	r3, [r4, #16]
 8005818:	2301      	movs	r3, #1
 800581a:	6163      	str	r3, [r4, #20]
 800581c:	b002      	add	sp, #8
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	ab01      	add	r3, sp, #4
 8005822:	466a      	mov	r2, sp
 8005824:	f7ff ffc8 	bl	80057b8 <__swhatbuf_r>
 8005828:	9900      	ldr	r1, [sp, #0]
 800582a:	4605      	mov	r5, r0
 800582c:	4630      	mov	r0, r6
 800582e:	f7ff fbf1 	bl	8005014 <_malloc_r>
 8005832:	b948      	cbnz	r0, 8005848 <__smakebuf_r+0x44>
 8005834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005838:	059a      	lsls	r2, r3, #22
 800583a:	d4ef      	bmi.n	800581c <__smakebuf_r+0x18>
 800583c:	f023 0303 	bic.w	r3, r3, #3
 8005840:	f043 0302 	orr.w	r3, r3, #2
 8005844:	81a3      	strh	r3, [r4, #12]
 8005846:	e7e3      	b.n	8005810 <__smakebuf_r+0xc>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	6020      	str	r0, [r4, #0]
 800584c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	9b00      	ldr	r3, [sp, #0]
 8005854:	6163      	str	r3, [r4, #20]
 8005856:	9b01      	ldr	r3, [sp, #4]
 8005858:	6120      	str	r0, [r4, #16]
 800585a:	b15b      	cbz	r3, 8005874 <__smakebuf_r+0x70>
 800585c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005860:	4630      	mov	r0, r6
 8005862:	f000 f847 	bl	80058f4 <_isatty_r>
 8005866:	b128      	cbz	r0, 8005874 <__smakebuf_r+0x70>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	431d      	orrs	r5, r3
 8005878:	81a5      	strh	r5, [r4, #12]
 800587a:	e7cf      	b.n	800581c <__smakebuf_r+0x18>

0800587c <memmove>:
 800587c:	4288      	cmp	r0, r1
 800587e:	b510      	push	{r4, lr}
 8005880:	eb01 0402 	add.w	r4, r1, r2
 8005884:	d902      	bls.n	800588c <memmove+0x10>
 8005886:	4284      	cmp	r4, r0
 8005888:	4623      	mov	r3, r4
 800588a:	d807      	bhi.n	800589c <memmove+0x20>
 800588c:	1e43      	subs	r3, r0, #1
 800588e:	42a1      	cmp	r1, r4
 8005890:	d008      	beq.n	80058a4 <memmove+0x28>
 8005892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800589a:	e7f8      	b.n	800588e <memmove+0x12>
 800589c:	4402      	add	r2, r0
 800589e:	4601      	mov	r1, r0
 80058a0:	428a      	cmp	r2, r1
 80058a2:	d100      	bne.n	80058a6 <memmove+0x2a>
 80058a4:	bd10      	pop	{r4, pc}
 80058a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058ae:	e7f7      	b.n	80058a0 <memmove+0x24>

080058b0 <_close_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4d06      	ldr	r5, [pc, #24]	; (80058cc <_close_r+0x1c>)
 80058b4:	2300      	movs	r3, #0
 80058b6:	4604      	mov	r4, r0
 80058b8:	4608      	mov	r0, r1
 80058ba:	602b      	str	r3, [r5, #0]
 80058bc:	f7fb fc43 	bl	8001146 <_close>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_close_r+0x1a>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_close_r+0x1a>
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	200002fc 	.word	0x200002fc

080058d0 <_fstat_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4d07      	ldr	r5, [pc, #28]	; (80058f0 <_fstat_r+0x20>)
 80058d4:	2300      	movs	r3, #0
 80058d6:	4604      	mov	r4, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	602b      	str	r3, [r5, #0]
 80058de:	f7fb fc3e 	bl	800115e <_fstat>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	d102      	bne.n	80058ec <_fstat_r+0x1c>
 80058e6:	682b      	ldr	r3, [r5, #0]
 80058e8:	b103      	cbz	r3, 80058ec <_fstat_r+0x1c>
 80058ea:	6023      	str	r3, [r4, #0]
 80058ec:	bd38      	pop	{r3, r4, r5, pc}
 80058ee:	bf00      	nop
 80058f0:	200002fc 	.word	0x200002fc

080058f4 <_isatty_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4d06      	ldr	r5, [pc, #24]	; (8005910 <_isatty_r+0x1c>)
 80058f8:	2300      	movs	r3, #0
 80058fa:	4604      	mov	r4, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	f7fb fc3d 	bl	800117e <_isatty>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d102      	bne.n	800590e <_isatty_r+0x1a>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	b103      	cbz	r3, 800590e <_isatty_r+0x1a>
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	200002fc 	.word	0x200002fc

08005914 <_lseek_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4d07      	ldr	r5, [pc, #28]	; (8005934 <_lseek_r+0x20>)
 8005918:	4604      	mov	r4, r0
 800591a:	4608      	mov	r0, r1
 800591c:	4611      	mov	r1, r2
 800591e:	2200      	movs	r2, #0
 8005920:	602a      	str	r2, [r5, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	f7fb fc36 	bl	8001194 <_lseek>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_lseek_r+0x1e>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	b103      	cbz	r3, 8005932 <_lseek_r+0x1e>
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	200002fc 	.word	0x200002fc

08005938 <_read_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4d07      	ldr	r5, [pc, #28]	; (8005958 <_read_r+0x20>)
 800593c:	4604      	mov	r4, r0
 800593e:	4608      	mov	r0, r1
 8005940:	4611      	mov	r1, r2
 8005942:	2200      	movs	r2, #0
 8005944:	602a      	str	r2, [r5, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	f7fb fbc4 	bl	80010d4 <_read>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_read_r+0x1e>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_read_r+0x1e>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	200002fc 	.word	0x200002fc

0800595c <_sbrk_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d06      	ldr	r5, [pc, #24]	; (8005978 <_sbrk_r+0x1c>)
 8005960:	2300      	movs	r3, #0
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	602b      	str	r3, [r5, #0]
 8005968:	f7fb fc22 	bl	80011b0 <_sbrk>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_sbrk_r+0x1a>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_sbrk_r+0x1a>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	200002fc 	.word	0x200002fc

0800597c <_write_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d07      	ldr	r5, [pc, #28]	; (800599c <_write_r+0x20>)
 8005980:	4604      	mov	r4, r0
 8005982:	4608      	mov	r0, r1
 8005984:	4611      	mov	r1, r2
 8005986:	2200      	movs	r2, #0
 8005988:	602a      	str	r2, [r5, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	f7fb fbbf 	bl	800110e <_write>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_write_r+0x1e>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_write_r+0x1e>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	200002fc 	.word	0x200002fc

080059a0 <memcpy>:
 80059a0:	440a      	add	r2, r1
 80059a2:	4291      	cmp	r1, r2
 80059a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059a8:	d100      	bne.n	80059ac <memcpy+0xc>
 80059aa:	4770      	bx	lr
 80059ac:	b510      	push	{r4, lr}
 80059ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059b6:	4291      	cmp	r1, r2
 80059b8:	d1f9      	bne.n	80059ae <memcpy+0xe>
 80059ba:	bd10      	pop	{r4, pc}

080059bc <_free_r>:
 80059bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059be:	2900      	cmp	r1, #0
 80059c0:	d044      	beq.n	8005a4c <_free_r+0x90>
 80059c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c6:	9001      	str	r0, [sp, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f1a1 0404 	sub.w	r4, r1, #4
 80059ce:	bfb8      	it	lt
 80059d0:	18e4      	addlt	r4, r4, r3
 80059d2:	f7ff fddd 	bl	8005590 <__malloc_lock>
 80059d6:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <_free_r+0x94>)
 80059d8:	9801      	ldr	r0, [sp, #4]
 80059da:	6813      	ldr	r3, [r2, #0]
 80059dc:	b933      	cbnz	r3, 80059ec <_free_r+0x30>
 80059de:	6063      	str	r3, [r4, #4]
 80059e0:	6014      	str	r4, [r2, #0]
 80059e2:	b003      	add	sp, #12
 80059e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059e8:	f7ff bdd8 	b.w	800559c <__malloc_unlock>
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d908      	bls.n	8005a02 <_free_r+0x46>
 80059f0:	6825      	ldr	r5, [r4, #0]
 80059f2:	1961      	adds	r1, r4, r5
 80059f4:	428b      	cmp	r3, r1
 80059f6:	bf01      	itttt	eq
 80059f8:	6819      	ldreq	r1, [r3, #0]
 80059fa:	685b      	ldreq	r3, [r3, #4]
 80059fc:	1949      	addeq	r1, r1, r5
 80059fe:	6021      	streq	r1, [r4, #0]
 8005a00:	e7ed      	b.n	80059de <_free_r+0x22>
 8005a02:	461a      	mov	r2, r3
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b10b      	cbz	r3, 8005a0c <_free_r+0x50>
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d9fa      	bls.n	8005a02 <_free_r+0x46>
 8005a0c:	6811      	ldr	r1, [r2, #0]
 8005a0e:	1855      	adds	r5, r2, r1
 8005a10:	42a5      	cmp	r5, r4
 8005a12:	d10b      	bne.n	8005a2c <_free_r+0x70>
 8005a14:	6824      	ldr	r4, [r4, #0]
 8005a16:	4421      	add	r1, r4
 8005a18:	1854      	adds	r4, r2, r1
 8005a1a:	42a3      	cmp	r3, r4
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	d1e0      	bne.n	80059e2 <_free_r+0x26>
 8005a20:	681c      	ldr	r4, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	6053      	str	r3, [r2, #4]
 8005a26:	440c      	add	r4, r1
 8005a28:	6014      	str	r4, [r2, #0]
 8005a2a:	e7da      	b.n	80059e2 <_free_r+0x26>
 8005a2c:	d902      	bls.n	8005a34 <_free_r+0x78>
 8005a2e:	230c      	movs	r3, #12
 8005a30:	6003      	str	r3, [r0, #0]
 8005a32:	e7d6      	b.n	80059e2 <_free_r+0x26>
 8005a34:	6825      	ldr	r5, [r4, #0]
 8005a36:	1961      	adds	r1, r4, r5
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	bf04      	itt	eq
 8005a3c:	6819      	ldreq	r1, [r3, #0]
 8005a3e:	685b      	ldreq	r3, [r3, #4]
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	bf04      	itt	eq
 8005a44:	1949      	addeq	r1, r1, r5
 8005a46:	6021      	streq	r1, [r4, #0]
 8005a48:	6054      	str	r4, [r2, #4]
 8005a4a:	e7ca      	b.n	80059e2 <_free_r+0x26>
 8005a4c:	b003      	add	sp, #12
 8005a4e:	bd30      	pop	{r4, r5, pc}
 8005a50:	200002f4 	.word	0x200002f4

08005a54 <_malloc_usable_size_r>:
 8005a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a58:	1f18      	subs	r0, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bfbc      	itt	lt
 8005a5e:	580b      	ldrlt	r3, [r1, r0]
 8005a60:	18c0      	addlt	r0, r0, r3
 8005a62:	4770      	bx	lr

08005a64 <_init>:
 8005a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a66:	bf00      	nop
 8005a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6a:	bc08      	pop	{r3}
 8005a6c:	469e      	mov	lr, r3
 8005a6e:	4770      	bx	lr

08005a70 <_fini>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	bf00      	nop
 8005a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a76:	bc08      	pop	{r3}
 8005a78:	469e      	mov	lr, r3
 8005a7a:	4770      	bx	lr
