
SO_I2C_RGBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e20  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b4  080060b4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060bc  080060bc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080060c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  0800612c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  0800612c  00020340  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e61  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b1  00000000  00000000  00031f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  000342f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d71  00000000  00000000  00035410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028e2d  00000000  00000000  00036181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144fb  00000000  00000000  0005efae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe56f  00000000  00000000  000734a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005158  00000000  00000000  00171a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00176b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08006008 	.word	0x08006008

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08006008 	.word	0x08006008

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <lcd_begin>:
static void lcd_sendCmd(LCD_t *lcd, char cmd);
static void delay_us(uint16_t time);

/* Exported functions --------------------------------------------------------*/
//init lcd display
void lcd_begin(LCD_t *lcd, uint8_t cols, uint8_t rows, uint8_t dotsize) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	4608      	mov	r0, r1
 80005e6:	4611      	mov	r1, r2
 80005e8:	461a      	mov	r2, r3
 80005ea:	4603      	mov	r3, r0
 80005ec:	70fb      	strb	r3, [r7, #3]
 80005ee:	460b      	mov	r3, r1
 80005f0:	70bb      	strb	r3, [r7, #2]
 80005f2:	4613      	mov	r3, r2
 80005f4:	707b      	strb	r3, [r7, #1]
	// 4 bit initialization
	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 80005fe:	78bb      	ldrb	r3, [r7, #2]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d908      	bls.n	8000616 <lcd_begin+0x3a>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	lcd->rows = rows;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	78ba      	ldrb	r2, [r7, #2]
 800061a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	lcd->cols = cols;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	78fa      	ldrb	r2, [r7, #3]
 8000622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	lcd_setRowOffsets(lcd, 0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000626:	78fa      	ldrb	r2, [r7, #3]
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	3340      	adds	r3, #64	; 0x40
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	4613      	mov	r3, r2
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	2100      	movs	r1, #0
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 f8c4 	bl	80007c2 <lcd_setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (rows == 1)) {
 800063a:	787b      	ldrb	r3, [r7, #1]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00b      	beq.n	8000658 <lcd_begin+0x7c>
 8000640:	78bb      	ldrb	r3, [r7, #2]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d108      	bne.n	8000658 <lcd_begin+0x7c>
		lcd->displayfunction |= LCD_5x10DOTS;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	b2da      	uxtb	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}

	HAL_Delay(50);	// wait for >40ms
 8000658:	2032      	movs	r0, #50	; 0x32
 800065a:	f001 f949 	bl	80018f0 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 800065e:	2103      	movs	r1, #3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 f948 	bl	80008f6 <lcd_sendCmd>
	HAL_Delay(5);		// wait for >4.1ms
 8000666:	2005      	movs	r0, #5
 8000668:	f001 f942 	bl	80018f0 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 800066c:	2103      	movs	r1, #3
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 f941 	bl	80008f6 <lcd_sendCmd>
	delay_us(150);	// wait for >100us
 8000674:	2096      	movs	r0, #150	; 0x96
 8000676:	f000 f95b 	bl	8000930 <delay_us>
	lcd_sendCmd(lcd, 0x03);
 800067a:	2103      	movs	r1, #3
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f93a 	bl	80008f6 <lcd_sendCmd>
	lcd_sendCmd(lcd, 0x02);	//set 4 bit mode
 8000682:	2102      	movs	r1, #2
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f936 	bl	80008f6 <lcd_sendCmd>
	HAL_Delay(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f001 f930 	bl	80018f0 <HAL_Delay>

	// finally, set interface type, # lines and font size
	lcd_sendCmd(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000696:	f043 0320 	orr.w	r3, r3, #32
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f929 	bl	80008f6 <lcd_sendCmd>
	//set display control D=1,C=0, B=0, display on, cursor off and cursor blink off
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2204      	movs	r2, #4
 80006a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_display(lcd);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f824 	bl	80006fa <lcd_display>
	lcd_clear(lcd);  // clear display
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f815 	bl	80006e2 <lcd_clear>
	HAL_Delay(2);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f001 f919 	bl	80018f0 <HAL_Delay>
	// set the entry mode --> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2202      	movs	r2, #2
 80006c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f90e 	bl	80008f6 <lcd_sendCmd>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <lcd_clear>:
// ----------------------------------------------------------------

//clear lcd display
void lcd_clear(LCD_t *lcd) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CLEARDISPLAY);
 80006ea:	2101      	movs	r1, #1
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f902 	bl	80008f6 <lcd_sendCmd>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <lcd_display>:
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
}
// ----------------------------------------------------------------

// Turn the display on
void lcd_display(LCD_t *lcd) {
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_DISPLAYON;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	b2da      	uxtb	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4619      	mov	r1, r3
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f000 f8e7 	bl	80008f6 <lcd_sendCmd>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <lcd_setCursor>:
	lcd_sendCmd(lcd, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}
// ----------------------------------------------------------------

//set cursor position
void lcd_setCursor(LCD_t *lcd, uint8_t col, uint8_t row) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
 800073c:	4613      	mov	r3, r2
 800073e:	70bb      	strb	r3, [r7, #2]
	const size_t max_rows = sizeof(lcd->row_offsets) / sizeof(*lcd->row_offsets);
 8000740:	2304      	movs	r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
	if (row >= max_rows) {
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	429a      	cmp	r2, r3
 800074a:	d803      	bhi.n	8000754 <lcd_setCursor+0x24>
		row = max_rows - 1;    // we count rows starting w/0
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	3b01      	subs	r3, #1
 8000752:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= lcd->rows) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800075a:	78ba      	ldrb	r2, [r7, #2]
 800075c:	429a      	cmp	r2, r3
 800075e:	d304      	bcc.n	800076a <lcd_setCursor+0x3a>
		row = lcd->rows - 1;    // we count rows starting w/0
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000766:	3b01      	subs	r3, #1
 8000768:	70bb      	strb	r3, [r7, #2]
	}

	lcd_sendCmd(lcd, LCD_SETDDRAMADDR | (col + lcd->row_offsets[row]));
 800076a:	78bb      	ldrb	r3, [r7, #2]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	4413      	add	r3, r2
 8000778:	b2db      	uxtb	r3, r3
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000780:	b25b      	sxtb	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f8b5 	bl	80008f6 <lcd_sendCmd>
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <lcd_print>:
// ----------------------------------------------------------------

//send strings to lcd
void lcd_print(LCD_t *lcd, char *str) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	while (*str)
 800079e:	e007      	b.n	80007b0 <lcd_print+0x1c>
		lcd_sendData(lcd, *str++);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	603a      	str	r2, [r7, #0]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 f886 	bl	80008bc <lcd_sendData>
	while (*str)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f3      	bne.n	80007a0 <lcd_print+0xc>
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <lcd_setRowOffsets>:
// ----------------------------------------------------------------

/* Privated functions --------------------------------------------------------*/
//set row offset for diferent display
static void lcd_setRowOffsets(LCD_t *lcd, int row0, int row1, int row2,
    int row3) {
 80007c2:	b480      	push	{r7}
 80007c4:	b085      	sub	sp, #20
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60f8      	str	r0, [r7, #12]
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	603b      	str	r3, [r7, #0]
	lcd->row_offsets[0] = row0;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	lcd->row_offsets[1] = row1;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	lcd->row_offsets[2] = row2;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	lcd->row_offsets[3] = row3;
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <lcd_send>:
// ----------------------------------------------------------------

//send info to lcd in 4 byte mode
static void lcd_send(LCD_t *lcd, char data, uint8_t rs) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
 8000810:	4613      	mov	r3, r2
 8000812:	70bb      	strb	r3, [r7, #2]
	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(lcd->RS_port, lcd->RS_pin, rs);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	889b      	ldrh	r3, [r3, #4]
 800081c:	78ba      	ldrb	r2, [r7, #2]
 800081e:	4619      	mov	r1, r3
 8000820:	f001 fb34 	bl	8001e8c <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(lcd->D7_port, lcd->D7_pin, ((data >> 3) & 0x01));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	08db      	lsrs	r3, r3, #3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	f001 fb27 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_port, lcd->D6_pin, ((data >> 2) & 0x01));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	089b      	lsrs	r3, r3, #2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	f001 fb1a 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_port, lcd->D5_pin, ((data >> 1) & 0x01));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a18      	ldr	r0, [r3, #32]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	085b      	lsrs	r3, r3, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	f001 fb0d 	bl	8001e8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_port, lcd->D4_pin, ((data >> 0) & 0x01));
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6998      	ldr	r0, [r3, #24]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	8b99      	ldrh	r1, [r3, #28]
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	461a      	mov	r2, r3
 8000884:	f001 fb02 	bl	8001e8c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_SET);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6918      	ldr	r0, [r3, #16]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	8a9b      	ldrh	r3, [r3, #20]
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f001 fafa 	bl	8001e8c <HAL_GPIO_WritePin>
	delay_us(1);	// enable pulse must be > 450ns
 8000898:	2001      	movs	r0, #1
 800089a:	f000 f849 	bl	8000930 <delay_us>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_RESET);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6918      	ldr	r0, [r3, #16]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	8a9b      	ldrh	r3, [r3, #20]
 80008a6:	2200      	movs	r2, #0
 80008a8:	4619      	mov	r1, r3
 80008aa:	f001 faef 	bl	8001e8c <HAL_GPIO_WritePin>
	delay_us(50);	// commands need > 37us to settle
 80008ae:	2032      	movs	r0, #50	; 0x32
 80008b0:	f000 f83e 	bl	8000930 <delay_us>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <lcd_sendData>:
// ----------------------------------------------------------------

//send data to lcd
static void lcd_sendData(LCD_t *lcd, char data) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	char _data;

	// send higher nibble
	_data = ((data >> 4) & 0x0f);
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	091b      	lsrs	r3, r3, #4
 80008cc:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff95 	bl	8000804 <lcd_send>

	// send Lower nibble
	_data = ((data) & 0x0f);
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	f003 030f 	and.w	r3, r3, #15
 80008e0:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	2201      	movs	r2, #1
 80008e6:	4619      	mov	r1, r3
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ff8b 	bl	8000804 <lcd_send>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <lcd_sendCmd>:
// ----------------------------------------------------------------

//send command to lcd
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	70fb      	strb	r3, [r7, #3]
	char _cmd;

	// send higher nibble
	_cmd = ((cmd >> 4) & 0x0f);
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	091b      	lsrs	r3, r3, #4
 8000906:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ff78 	bl	8000804 <lcd_send>

	// send Lower nibble
	_cmd = ((cmd) & 0x0f);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	2200      	movs	r2, #0
 8000920:	4619      	mov	r1, r3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ff6e 	bl	8000804 <lcd_send>
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <delay_us>:
// ----------------------------------------------------------------

//set delay in microseconds
static void delay_us(uint16_t time) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
	uint16_t delay = time * (HAL_RCC_GetHCLKFreq() / 1000000);
 800093a:	f002 fd11 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 800093e:	4603      	mov	r3, r0
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <delay_us+0x44>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	0c9b      	lsrs	r3, r3, #18
 8000948:	b29b      	uxth	r3, r3
 800094a:	88fa      	ldrh	r2, [r7, #6]
 800094c:	fb12 f303 	smulbb	r3, r2, r3
 8000950:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < delay; i += 14) {
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e003      	b.n	8000960 <delay_us+0x30>
		__ASM("NOP");
 8000958:	bf00      	nop
	for (int i = 0; i < delay; i += 14) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	330e      	adds	r3, #14
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	897b      	ldrh	r3, [r7, #10]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf7      	blt.n	8000958 <delay_us+0x28>
	}
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	431bde83 	.word	0x431bde83

08000978 <lcd_send_nibble>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void lcd_send_nibble(uint8_t nibble) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
    // Set data pins
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, (nibble & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000990:	481e      	ldr	r0, [pc, #120]	; (8000a0c <lcd_send_nibble+0x94>)
 8000992:	f001 fa7b 	bl	8001e8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, (nibble & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	105b      	asrs	r3, r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a8:	4819      	ldr	r0, [pc, #100]	; (8000a10 <lcd_send_nibble+0x98>)
 80009aa:	f001 fa6f 	bl	8001e8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, (nibble & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	109b      	asrs	r3, r3, #2
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c0:	4813      	ldr	r0, [pc, #76]	; (8000a10 <lcd_send_nibble+0x98>)
 80009c2:	f001 fa63 	bl	8001e8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, (nibble & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	10db      	asrs	r3, r3, #3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <lcd_send_nibble+0x94>)
 80009da:	f001 fa57 	bl	8001e8c <HAL_GPIO_WritePin>

    // Enable signal
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e4:	480a      	ldr	r0, [pc, #40]	; (8000a10 <lcd_send_nibble+0x98>)
 80009e6:	f001 fa51 	bl	8001e8c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 ff80 	bl	80018f0 <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <lcd_send_nibble+0x98>)
 80009f8:	f001 fa48 	bl	8001e8c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 ff77 	bl	80018f0 <HAL_Delay>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021400 	.word	0x40021400
 8000a10:	40021000 	.word	0x40021000

08000a14 <lcd_send_command>:

void lcd_send_command(uint8_t command) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
    // Set RS pin to low for command
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a24:	480a      	ldr	r0, [pc, #40]	; (8000a50 <lcd_send_command+0x3c>)
 8000a26:	f001 fa31 	bl	8001e8c <HAL_GPIO_WritePin>

    // Send upper nibble of command
    uint8_t data = (command >> 4) & 0x0F;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	091b      	lsrs	r3, r3, #4
 8000a2e:	73fb      	strb	r3, [r7, #15]
    lcd_send_nibble(data);
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffa0 	bl	8000978 <lcd_send_nibble>

    // Send lower nibble of command
    data = command & 0x0F;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	73fb      	strb	r3, [r7, #15]
    lcd_send_nibble(data);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff98 	bl	8000978 <lcd_send_nibble>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021400 	.word	0x40021400

08000a54 <lcd_init>:
    // Send lower nibble of data
    temp = data & 0x0F;
    lcd_send_nibble(temp);
}

void lcd_init() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	lcd_send_command(0x33); // 4-bit mode
 8000a58:	2033      	movs	r0, #51	; 0x33
 8000a5a:	f7ff ffdb 	bl	8000a14 <lcd_send_command>
	HAL_Delay(10);
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f000 ff46 	bl	80018f0 <HAL_Delay>
	lcd_send_command(0x38); // 2-line mode and 5x8 dot matrix
 8000a64:	2038      	movs	r0, #56	; 0x38
 8000a66:	f7ff ffd5 	bl	8000a14 <lcd_send_command>
	HAL_Delay(10);
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f000 ff40 	bl	80018f0 <HAL_Delay>
	lcd_send_command(0x0F); // Display On/Off
 8000a70:	200f      	movs	r0, #15
 8000a72:	f7ff ffcf 	bl	8000a14 <lcd_send_command>
	HAL_Delay(10);
 8000a76:	200a      	movs	r0, #10
 8000a78:	f000 ff3a 	bl	80018f0 <HAL_Delay>
	lcd_send_command(0x06); // cursor to increment after each character and no shift
 8000a7c:	2006      	movs	r0, #6
 8000a7e:	f7ff ffc9 	bl	8000a14 <lcd_send_command>
	HAL_Delay(10);
 8000a82:	200a      	movs	r0, #10
 8000a84:	f000 ff34 	bl	80018f0 <HAL_Delay>
	lcd_send_command(0x01); // clear
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff ffc3 	bl	8000a14 <lcd_send_command>
	HAL_Delay(10);
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f000 ff2e 	bl	80018f0 <HAL_Delay>
	lcd_send_command(0x80); // cursor to beginning
 8000a94:	2080      	movs	r0, #128	; 0x80
 8000a96:	f7ff ffbd 	bl	8000a14 <lcd_send_command>
	HAL_Delay(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f000 ff28 	bl	80018f0 <HAL_Delay>
	lcd_send_command(0x08); // backlight
 8000aa0:	2008      	movs	r0, #8
 8000aa2:	f7ff ffb7 	bl	8000a14 <lcd_send_command>
	HAL_Delay(10);
 8000aa6:	200a      	movs	r0, #10
 8000aa8:	f000 ff22 	bl	80018f0 <HAL_Delay>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <DEV_I2C_ReadWord>:
    }
}


uint16_t DEV_I2C_ReadWord(uint8_t add_)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af04      	add	r7, sp, #16
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
    uint8_t Buf[2]={0, 0};
 8000aba:	2300      	movs	r3, #0
 8000abc:	81bb      	strh	r3, [r7, #12]
		HAL_I2C_Mem_Read(&hi2c2, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	9302      	str	r3, [sp, #8]
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	2152      	movs	r1, #82	; 0x52
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <DEV_I2C_ReadWord+0x44>)
 8000ad6:	f001 fb97 	bl	8002208 <HAL_I2C_Mem_Read>
    return ((Buf[1] << 8) | (Buf[0] & 0xff));
 8000ada:	7b7b      	ldrb	r3, [r7, #13]
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	b21a      	sxth	r2, r3
 8000ae0:	7b3b      	ldrb	r3, [r7, #12]
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	b29b      	uxth	r3, r3
} // DEV_I2C_ReadWord END
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000084 	.word	0x20000084

08000af8 <TCS34725_ReadWord>:


static uint16_t TCS34725_ReadWord(uint8_t add)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
    add = add | TCS34725_CMD_BIT;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b08:	71fb      	strb	r3, [r7, #7]
    return DEV_I2C_ReadWord(add);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ffcf 	bl	8000ab0 <DEV_I2C_ReadWord>
 8000b12:	4603      	mov	r3, r0
} // TCS34725_ReadWord END
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <DEV_I2C_WriteByte>:

void DEV_I2C_WriteByte(uint8_t add_, uint8_t data_)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af04      	add	r7, sp, #16
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	uint8_t Buf[1] = {0};
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	733b      	strb	r3, [r7, #12]
	Buf[0] = data_;
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c2, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	2310      	movs	r3, #16
 8000b3a:	9302      	str	r3, [sp, #8]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	9301      	str	r3, [sp, #4]
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2301      	movs	r3, #1
 8000b48:	2152      	movs	r1, #82	; 0x52
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <DEV_I2C_WriteByte+0x3c>)
 8000b4c:	f001 fa48 	bl	8001fe0 <HAL_I2C_Mem_Write>
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000084 	.word	0x20000084

08000b5c <TCS34725_WriteByte>:

void TCS34725_WriteByte(uint8_t add, uint8_t data)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	460a      	mov	r2, r1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	71bb      	strb	r3, [r7, #6]
    add = add | TCS34725_CMD_BIT;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b72:	71fb      	strb	r3, [r7, #7]
    DEV_I2C_WriteByte(add, data);
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ffce 	bl	8000b1c <DEV_I2C_WriteByte>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <TCS34725_Init>:

void TCS34725_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff ffe4 	bl	8000b5c <TCS34725_WriteByte>
	HAL_Delay(3);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 feab 	bl	80018f0 <HAL_Delay>
	TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff ffdd 	bl	8000b5c <TCS34725_WriteByte>
	HAL_Delay(3);
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	f000 fea4 	bl	80018f0 <HAL_Delay>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <TCS34725_Set_Integration_Time>:

void TCS34725_Set_Integration_Time(uint16_t time)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
    /* Update the timing register */
    TCS34725_WriteByte(TCS34725_ATIME, time);
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4619      	mov	r1, r3
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff ffcd 	bl	8000b5c <TCS34725_WriteByte>
//    IntegrationTime_t = time;
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <TCS34725_Set_Gain>:

void TCS34725_Set_Gain(uint16_t gain)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	80fb      	strh	r3, [r7, #6]
	TCS34725_WriteByte(TCS34725_CONTROL, gain);
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4619      	mov	r1, r3
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f7ff ffbe 	bl	8000b5c <TCS34725_WriteByte>
//    Gain_t = gain;
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <TCS34725_Get_RGBData>:

RGB TCS34725_Get_RGBData()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    RGB temp;
    temp.C = TCS34725_ReadWord(TCS34725_CDATAL | TCS34725_CMD_Read_Word);
 8000bf0:	2034      	movs	r0, #52	; 0x34
 8000bf2:	f7ff ff81 	bl	8000af8 <TCS34725_ReadWord>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	81fb      	strh	r3, [r7, #14]
    temp.R = TCS34725_ReadWord(TCS34725_RDATAL | TCS34725_CMD_Read_Word);
 8000bfa:	2036      	movs	r0, #54	; 0x36
 8000bfc:	f7ff ff7c 	bl	8000af8 <TCS34725_ReadWord>
 8000c00:	4603      	mov	r3, r0
 8000c02:	813b      	strh	r3, [r7, #8]
    temp.G = TCS34725_ReadWord(TCS34725_GDATAL | TCS34725_CMD_Read_Word);
 8000c04:	2038      	movs	r0, #56	; 0x38
 8000c06:	f7ff ff77 	bl	8000af8 <TCS34725_ReadWord>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	817b      	strh	r3, [r7, #10]
    temp.B = TCS34725_ReadWord(TCS34725_BDATAL | TCS34725_CMD_Read_Word);
 8000c0e:	203a      	movs	r0, #58	; 0x3a
 8000c10:	f7ff ff72 	bl	8000af8 <TCS34725_ReadWord>
 8000c14:	4603      	mov	r3, r0
 8000c16:	81bb      	strh	r3, [r7, #12]

    HAL_Delay(3);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 fe69 	bl	80018f0 <HAL_Delay>
    return temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	461a      	mov	r2, r3
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	cb03      	ldmia	r3!, {r0, r1}
 8000c28:	6010      	str	r0, [r2, #0]
 8000c2a:	6051      	str	r1, [r2, #4]
} // TCS34725_Get_RGBData END
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <TCS34725_GetRGB888>:
function:   Convert raw RGB values to RGB888 format
parameter	:
     rgb    : RGBC Numerical value
******************************************************************************/
uint32_t TCS34725_GetRGB888(RGB rgb)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	e883 0003 	stmia.w	r3, {r0, r1}
    float i=1;
 8000c40:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000c44:	60fb      	str	r3, [r7, #12]
    //Limit data range
    if(rgb.R >= rgb.G && rgb.R >= rgb.B){
 8000c46:	883a      	ldrh	r2, [r7, #0]
 8000c48:	887b      	ldrh	r3, [r7, #2]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d311      	bcc.n	8000c72 <TCS34725_GetRGB888+0x3e>
 8000c4e:	883a      	ldrh	r2, [r7, #0]
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d30d      	bcc.n	8000c72 <TCS34725_GetRGB888+0x3e>
        i = rgb.R / 255 + 1;
 8000c56:	883b      	ldrh	r3, [r7, #0]
 8000c58:	4a63      	ldr	r2, [pc, #396]	; (8000de8 <TCS34725_GetRGB888+0x1b4>)
 8000c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5e:	09db      	lsrs	r3, r3, #7
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	ee07 3a90 	vmov	s15, r3
 8000c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c6c:	edc7 7a03 	vstr	s15, [r7, #12]
 8000c70:	e02a      	b.n	8000cc8 <TCS34725_GetRGB888+0x94>
    }
    else if(rgb.G >= rgb.R && rgb.G >= rgb.B){
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	883b      	ldrh	r3, [r7, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d311      	bcc.n	8000c9e <TCS34725_GetRGB888+0x6a>
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	88bb      	ldrh	r3, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d30d      	bcc.n	8000c9e <TCS34725_GetRGB888+0x6a>
        i = rgb.G / 255 + 1;
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	4a58      	ldr	r2, [pc, #352]	; (8000de8 <TCS34725_GetRGB888+0x1b4>)
 8000c86:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8a:	09db      	lsrs	r3, r3, #7
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	3301      	adds	r3, #1
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c98:	edc7 7a03 	vstr	s15, [r7, #12]
 8000c9c:	e014      	b.n	8000cc8 <TCS34725_GetRGB888+0x94>
    }
    else if(rgb.B >=  rgb.G && rgb.B >= rgb.R){
 8000c9e:	88ba      	ldrh	r2, [r7, #4]
 8000ca0:	887b      	ldrh	r3, [r7, #2]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d310      	bcc.n	8000cc8 <TCS34725_GetRGB888+0x94>
 8000ca6:	88ba      	ldrh	r2, [r7, #4]
 8000ca8:	883b      	ldrh	r3, [r7, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d30c      	bcc.n	8000cc8 <TCS34725_GetRGB888+0x94>
        i = rgb.B / 255 + 1;
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	4a4d      	ldr	r2, [pc, #308]	; (8000de8 <TCS34725_GetRGB888+0x1b4>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	09db      	lsrs	r3, r3, #7
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3301      	adds	r3, #1
 8000cbc:	ee07 3a90 	vmov	s15, r3
 8000cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc4:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    if(i!=0)
 8000cc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ccc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd4:	d02c      	beq.n	8000d30 <TCS34725_GetRGB888+0xfc>
    {
        rgb.R = (rgb.R) / i;
 8000cd6:	883b      	ldrh	r3, [r7, #0]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ce0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cec:	ee17 3a90 	vmov	r3, s15
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	803b      	strh	r3, [r7, #0]
        rgb.G = (rgb.G) / i;
 8000cf4:	887b      	ldrh	r3, [r7, #2]
 8000cf6:	ee07 3a90 	vmov	s15, r3
 8000cfa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cfe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d0a:	ee17 3a90 	vmov	r3, s15
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	807b      	strh	r3, [r7, #2]
        rgb.B = (rgb.B) / i;
 8000d12:	88bb      	ldrh	r3, [r7, #4]
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d28:	ee17 3a90 	vmov	r3, s15
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	80bb      	strh	r3, [r7, #4]
    }

    if(rgb.R > 30)
 8000d30:	883b      	ldrh	r3, [r7, #0]
 8000d32:	2b1e      	cmp	r3, #30
 8000d34:	d903      	bls.n	8000d3e <TCS34725_GetRGB888+0x10a>
        rgb.R = rgb.R - 30;
 8000d36:	883b      	ldrh	r3, [r7, #0]
 8000d38:	3b1e      	subs	r3, #30
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	803b      	strh	r3, [r7, #0]
    if(rgb.G > 30)
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	2b1e      	cmp	r3, #30
 8000d42:	d903      	bls.n	8000d4c <TCS34725_GetRGB888+0x118>
        rgb.G = rgb.G - 30;
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	3b1e      	subs	r3, #30
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	807b      	strh	r3, [r7, #2]
    if(rgb.B > 30)
 8000d4c:	88bb      	ldrh	r3, [r7, #4]
 8000d4e:	2b1e      	cmp	r3, #30
 8000d50:	d903      	bls.n	8000d5a <TCS34725_GetRGB888+0x126>
        rgb.B = rgb.B - 30;
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	3b1e      	subs	r3, #30
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	80bb      	strh	r3, [r7, #4]
    rgb.R = rgb.R * 255 / 225;
 8000d5a:	883b      	ldrh	r3, [r7, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4613      	mov	r3, r2
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	1a9b      	subs	r3, r3, r2
 8000d64:	4a21      	ldr	r2, [pc, #132]	; (8000dec <TCS34725_GetRGB888+0x1b8>)
 8000d66:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6a:	441a      	add	r2, r3
 8000d6c:	11d2      	asrs	r2, r2, #7
 8000d6e:	17db      	asrs	r3, r3, #31
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	803b      	strh	r3, [r7, #0]
    rgb.G = rgb.G * 255 / 225;
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	1a9b      	subs	r3, r3, r2
 8000d80:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <TCS34725_GetRGB888+0x1b8>)
 8000d82:	fb82 1203 	smull	r1, r2, r2, r3
 8000d86:	441a      	add	r2, r3
 8000d88:	11d2      	asrs	r2, r2, #7
 8000d8a:	17db      	asrs	r3, r3, #31
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	807b      	strh	r3, [r7, #2]
    rgb.B = rgb.B * 255 / 225;
 8000d92:	88bb      	ldrh	r3, [r7, #4]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4613      	mov	r3, r2
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	4a13      	ldr	r2, [pc, #76]	; (8000dec <TCS34725_GetRGB888+0x1b8>)
 8000d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000da2:	441a      	add	r2, r3
 8000da4:	11d2      	asrs	r2, r2, #7
 8000da6:	17db      	asrs	r3, r3, #31
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	80bb      	strh	r3, [r7, #4]

    if(rgb.R>255)
 8000dae:	883b      	ldrh	r3, [r7, #0]
 8000db0:	2bff      	cmp	r3, #255	; 0xff
 8000db2:	d901      	bls.n	8000db8 <TCS34725_GetRGB888+0x184>
           rgb.R = 255;
 8000db4:	23ff      	movs	r3, #255	; 0xff
 8000db6:	803b      	strh	r3, [r7, #0]
    if(rgb.G>255)
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	2bff      	cmp	r3, #255	; 0xff
 8000dbc:	d901      	bls.n	8000dc2 <TCS34725_GetRGB888+0x18e>
           rgb.G = 255;
 8000dbe:	23ff      	movs	r3, #255	; 0xff
 8000dc0:	807b      	strh	r3, [r7, #2]
    if(rgb.B>255)
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	2bff      	cmp	r3, #255	; 0xff
 8000dc6:	d901      	bls.n	8000dcc <TCS34725_GetRGB888+0x198>
           rgb.B = 255;
 8000dc8:	23ff      	movs	r3, #255	; 0xff
 8000dca:	80bb      	strh	r3, [r7, #4]
    return (rgb.R << 16) | (rgb.G << 8) | (rgb.B);
 8000dcc:	883b      	ldrh	r3, [r7, #0]
 8000dce:	041a      	lsls	r2, r3, #16
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	88ba      	ldrh	r2, [r7, #4]
 8000dd8:	4313      	orrs	r3, r2
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	80808081 	.word	0x80808081
 8000dec:	91a2b3c5 	.word	0x91a2b3c5

08000df0 <TCS34725_Set_Interrupt_Threshold>:
parameter	:
     rgb    : RGBC Numerical value
******************************************************************************/

static void TCS34725_Set_Interrupt_Threshold(uint16_t Threshold_H, uint16_t Threshold_L)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	80fb      	strh	r3, [r7, #6]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	80bb      	strh	r3, [r7, #4]
    TCS34725_WriteByte(TCS34725_AILTL, Threshold_L & 0xff);
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	2004      	movs	r0, #4
 8000e08:	f7ff fea8 	bl	8000b5c <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AILTH, Threshold_L >> 8);
 8000e0c:	88bb      	ldrh	r3, [r7, #4]
 8000e0e:	0a1b      	lsrs	r3, r3, #8
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	2005      	movs	r0, #5
 8000e18:	f7ff fea0 	bl	8000b5c <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AIHTL, Threshold_H & 0xff);
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	2006      	movs	r0, #6
 8000e24:	f7ff fe9a 	bl	8000b5c <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AIHTH, Threshold_H >> 8);
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4619      	mov	r1, r3
 8000e32:	2007      	movs	r0, #7
 8000e34:	f7ff fe92 	bl	8000b5c <TCS34725_WriteByte>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <TCS34725_Set_Interrupt_Persistence_Reg>:

static void TCS34725_Set_Interrupt_Persistence_Reg(uint8_t TCS34725_PER)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
    if(TCS34725_PER < 0x10)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d805      	bhi.n	8000e5c <TCS34725_Set_Interrupt_Persistence_Reg+0x1c>
        TCS34725_WriteByte(0x0C, TCS34725_PER);
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4619      	mov	r1, r3
 8000e54:	200c      	movs	r0, #12
 8000e56:	f7ff fe81 	bl	8000b5c <TCS34725_WriteByte>
    else
        TCS34725_WriteByte(0x0C, 0x0f);
}
 8000e5a:	e003      	b.n	8000e64 <TCS34725_Set_Interrupt_Persistence_Reg+0x24>
        TCS34725_WriteByte(0x0C, 0x0f);
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	200c      	movs	r0, #12
 8000e60:	f7ff fe7c 	bl	8000b5c <TCS34725_WriteByte>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <TCS34725_GetLux_Interrupt>:

uint8_t TCS34725_GetLux_Interrupt(uint16_t Threshold_H, uint16_t Threshold_L)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	80fb      	strh	r3, [r7, #6]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	80bb      	strh	r3, [r7, #4]
    TCS34725_Set_Interrupt_Threshold(Threshold_H, Threshold_L);
 8000e7c:	88ba      	ldrh	r2, [r7, #4]
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ffb4 	bl	8000df0 <TCS34725_Set_Interrupt_Threshold>
    if(HAL_GPIO_ReadPin(TIM3, TIM_CHANNEL_4) == 0){
 8000e88:	210c      	movs	r1, #12
 8000e8a:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <TCS34725_GetLux_Interrupt+0x48>)
 8000e8c:	f000 ffe6 	bl	8001e5c <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d108      	bne.n	8000ea8 <TCS34725_GetLux_Interrupt+0x3c>
    	TCS34725_WriteByte(0x66, 0x00);
 8000e96:	2100      	movs	r1, #0
 8000e98:	2066      	movs	r0, #102	; 0x66
 8000e9a:	f7ff fe5f 	bl	8000b5c <TCS34725_WriteByte>
        TCS34725_Set_Interrupt_Persistence_Reg(0x02);
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f7ff ffce 	bl	8000e40 <TCS34725_Set_Interrupt_Persistence_Reg>
        return 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <TCS34725_GetLux_Interrupt+0x3e>
    }
    return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40000400 	.word	0x40000400

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b09b      	sub	sp, #108	; 0x6c
 8000ebc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	RGB rgb;
	uint32_t RGB888=0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint8_t r_data=0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	uint8_t g_data=0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	uint8_t b_data=0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	char buffer[50];
	int buffer_len;

	char message[] = "Hello World!";
 8000ed4:	4b50      	ldr	r3, [pc, #320]	; (8001018 <main+0x160>)
 8000ed6:	463c      	mov	r4, r7
 8000ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eda:	c407      	stmia	r4!, {r0, r1, r2}
 8000edc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f000 fcaa 	bl	8001836 <HAL_Init>

  /* USER CODE BEGIN Init */
  TCS34725_Init();
 8000ee2:	f7ff fe51 	bl	8000b88 <TCS34725_Init>

  lcd_init();
 8000ee6:	f7ff fdb5 	bl	8000a54 <lcd_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f8a9 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 f9cd 	bl	800128c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ef2:	f000 f901 	bl	80010f8 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000ef6:	f000 f999 	bl	800122c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000efa:	f000 f93d 	bl	8001178 <MX_TIM3_Init>
//    TCS34725_INTEGRATIONTIME_24MS   = 0xF6,   /**<  24ms  - 10 cycles  - Max Count: 10240 */
//    TCS34725_INTEGRATIONTIME_50MS   = 0xEB,   /**<  50ms  - 20 cycles  - Max Count: 20480 */
//    TCS34725_INTEGRATIONTIME_101MS  = 0xD5,   /**<  101ms - 42 cycles  - Max Count: 43008 */
//    TCS34725_INTEGRATIONTIME_154MS  = 0xC0,   /**<  154ms - 64 cycles  - Max Count: 65535 */
//    TCS34725_INTEGRATIONTIME_700MS  = 0x00    /**<  700ms - 256 cycles - Max Count: 65535 */
  TCS34725_Set_Integration_Time(0xD5);
 8000efe:	20d5      	movs	r0, #213	; 0xd5
 8000f00:	f7ff fe54 	bl	8000bac <TCS34725_Set_Integration_Time>

//    TCS34725_GAIN_1X                = 0x00,   /**<  No gain  */
//    TCS34725_GAIN_4X                = 0x01,   /**<  4x gain  */
//    TCS34725_GAIN_16X               = 0x02,   /**<  16x gain */
//    TCS34725_GAIN_60X               = 0x03    /**<  60x gain */
  TCS34725_Set_Gain(0x01);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff fe60 	bl	8000bca <TCS34725_Set_Gain>

//  TCS34725_Set_Integration_Time(0x00);
//  TCS34725_Set_Gain(0x01);

  lcd.RS_port = RS_PORT;
 8000f0a:	4b44      	ldr	r3, [pc, #272]	; (800101c <main+0x164>)
 8000f0c:	4a44      	ldr	r2, [pc, #272]	; (8001020 <main+0x168>)
 8000f0e:	601a      	str	r2, [r3, #0]
  lcd.RS_pin = RS_PIN;
 8000f10:	4b42      	ldr	r3, [pc, #264]	; (800101c <main+0x164>)
 8000f12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f16:	809a      	strh	r2, [r3, #4]

  lcd.EN_port = EN_PORT;
 8000f18:	4b40      	ldr	r3, [pc, #256]	; (800101c <main+0x164>)
 8000f1a:	4a42      	ldr	r2, [pc, #264]	; (8001024 <main+0x16c>)
 8000f1c:	611a      	str	r2, [r3, #16]
  lcd.EN_pin = EN_PIN;
 8000f1e:	4b3f      	ldr	r3, [pc, #252]	; (800101c <main+0x164>)
 8000f20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f24:	829a      	strh	r2, [r3, #20]

  lcd.D4_port = D4_PORT;
 8000f26:	4b3d      	ldr	r3, [pc, #244]	; (800101c <main+0x164>)
 8000f28:	4a3d      	ldr	r2, [pc, #244]	; (8001020 <main+0x168>)
 8000f2a:	619a      	str	r2, [r3, #24]
  lcd.D4_pin = D4_PIN;
 8000f2c:	4b3b      	ldr	r3, [pc, #236]	; (800101c <main+0x164>)
 8000f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f32:	839a      	strh	r2, [r3, #28]
  lcd.D5_port = D5_PORT;
 8000f34:	4b39      	ldr	r3, [pc, #228]	; (800101c <main+0x164>)
 8000f36:	4a3b      	ldr	r2, [pc, #236]	; (8001024 <main+0x16c>)
 8000f38:	621a      	str	r2, [r3, #32]
  lcd.D5_pin = D5_PIN;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <main+0x164>)
 8000f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f40:	849a      	strh	r2, [r3, #36]	; 0x24
  lcd.D6_port = D6_PORT;
 8000f42:	4b36      	ldr	r3, [pc, #216]	; (800101c <main+0x164>)
 8000f44:	4a37      	ldr	r2, [pc, #220]	; (8001024 <main+0x16c>)
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
  lcd.D6_pin = D6_PIN;
 8000f48:	4b34      	ldr	r3, [pc, #208]	; (800101c <main+0x164>)
 8000f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4e:	859a      	strh	r2, [r3, #44]	; 0x2c
  lcd.D7_port = D7_PORT;
 8000f50:	4b32      	ldr	r3, [pc, #200]	; (800101c <main+0x164>)
 8000f52:	4a33      	ldr	r2, [pc, #204]	; (8001020 <main+0x168>)
 8000f54:	631a      	str	r2, [r3, #48]	; 0x30
  lcd.D7_pin = D7_PIN;
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <main+0x164>)
 8000f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f5c:	869a      	strh	r2, [r3, #52]	; 0x34

  lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2202      	movs	r2, #2
 8000f62:	2110      	movs	r1, #16
 8000f64:	482d      	ldr	r0, [pc, #180]	; (800101c <main+0x164>)
 8000f66:	f7ff fb39 	bl	80005dc <lcd_begin>
  lcd_setCursor(&lcd, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	482b      	ldr	r0, [pc, #172]	; (800101c <main+0x164>)
 8000f70:	f7ff fbde 	bl	8000730 <lcd_setCursor>
  lcd_print(&lcd, message);
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4828      	ldr	r0, [pc, #160]	; (800101c <main+0x164>)
 8000f7a:	f7ff fc0b 	bl	8000794 <lcd_print>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint32_t pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000f7e:	2108      	movs	r1, #8
 8000f80:	4829      	ldr	r0, [pc, #164]	; (8001028 <main+0x170>)
 8000f82:	f000 ff6b 	bl	8001e5c <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54

	  if (pin_state != GPIO_PIN_SET) {
 8000f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d0f6      	beq.n	8000f7e <main+0xc6>
		  rgb=TCS34725_Get_RGBData();
 8000f90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fe27 	bl	8000be8 <TCS34725_Get_RGBData>
		  RGB888=TCS34725_GetRGB888(rgb);
 8000f9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fa2:	f7ff fe47 	bl	8000c34 <TCS34725_GetRGB888>
 8000fa6:	65f8      	str	r0, [r7, #92]	; 0x5c
		  r_data = RGB888>>16;
 8000fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000faa:	0c1b      	lsrs	r3, r3, #16
 8000fac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		  g_data = (RGB888>>8) & 0xff;
 8000fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		  b_data = (RGB888) & 0xff;
 8000fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fba:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

		  buffer_len = sprintf(buffer, "%u,%u,%u\n", r_data, g_data, b_data);
 8000fbe:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8000fc2:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
 8000fc6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000fca:	f107 0010 	add.w	r0, r7, #16
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4916      	ldr	r1, [pc, #88]	; (800102c <main+0x174>)
 8000fd4:	f004 f804 	bl	8004fe0 <siprintf>
 8000fd8:	6538      	str	r0, [r7, #80]	; 0x50
		  status = HAL_UART_Transmit(&huart3, (uint8_t *) buffer, buffer_len, 100);
 8000fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f107 0110 	add.w	r1, r7, #16
 8000fe2:	2364      	movs	r3, #100	; 0x64
 8000fe4:	4812      	ldr	r0, [pc, #72]	; (8001030 <main+0x178>)
 8000fe6:	f003 fb5d 	bl	80046a4 <HAL_UART_Transmit>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

//		if (status != HAL_OK) {
//			HAL_Delay(5000);
//		}

		if(TCS34725_GetLux_Interrupt(0xff00, 0x0Cff) == 1){
 8000ff0:	f640 41ff 	movw	r1, #3327	; 0xcff
 8000ff4:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8000ff8:	f7ff ff38 	bl	8000e6c <TCS34725_GetLux_Interrupt>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d103      	bne.n	800100a <main+0x152>
			printf("Lux_Interrupt = 1\r\n");
 8001002:	480c      	ldr	r0, [pc, #48]	; (8001034 <main+0x17c>)
 8001004:	f004 f922 	bl	800524c <puts>
 8001008:	e002      	b.n	8001010 <main+0x158>
		}else{
			printf("Lux_Interrupt = 0\r\n");
 800100a:	480b      	ldr	r0, [pc, #44]	; (8001038 <main+0x180>)
 800100c:	f004 f91e 	bl	800524c <puts>
		}
		printf("\r\n");
 8001010:	480a      	ldr	r0, [pc, #40]	; (800103c <main+0x184>)
 8001012:	f004 f91b 	bl	800524c <puts>
  {
 8001016:	e7b2      	b.n	8000f7e <main+0xc6>
 8001018:	08006058 	.word	0x08006058
 800101c:	200001ac 	.word	0x200001ac
 8001020:	40021400 	.word	0x40021400
 8001024:	40021000 	.word	0x40021000
 8001028:	40020000 	.word	0x40020000
 800102c:	08006020 	.word	0x08006020
 8001030:	20000124 	.word	0x20000124
 8001034:	0800602c 	.word	0x0800602c
 8001038:	08006040 	.word	0x08006040
 800103c:	08006054 	.word	0x08006054

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2234      	movs	r2, #52	; 0x34
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f004 f904 	bl	800525c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <SystemClock_Config+0xb0>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <SystemClock_Config+0xb0>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <SystemClock_Config+0xb0>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <SystemClock_Config+0xb4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <SystemClock_Config+0xb4>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <SystemClock_Config+0xb4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001098:	2302      	movs	r3, #2
 800109a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109c:	2301      	movs	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a0:	2310      	movs	r3, #16
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fcf7 	bl	8002aa0 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80010b8:	f000 f972 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	230f      	movs	r3, #15
 80010be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 ff90 	bl	8002ffc <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010e2:	f000 f95d 	bl	80013a0 <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3750      	adds	r7, #80	; 0x50
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_I2C2_Init+0x74>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <MX_I2C2_Init+0x78>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_I2C2_Init+0x74>)
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <MX_I2C2_Init+0x7c>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_I2C2_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_I2C2_Init+0x74>)
 8001110:	2201      	movs	r2, #1
 8001112:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_I2C2_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_I2C2_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_I2C2_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_I2C2_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_I2C2_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <MX_I2C2_Init+0x74>)
 8001134:	f000 fec4 	bl	8001ec0 <HAL_I2C_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800113e:	f000 f92f 	bl	80013a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <MX_I2C2_Init+0x74>)
 8001146:	f001 fc13 	bl	8002970 <HAL_I2CEx_ConfigAnalogFilter>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001150:	f000 f926 	bl	80013a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_I2C2_Init+0x74>)
 8001158:	f001 fc55 	bl	8002a06 <HAL_I2CEx_ConfigDigitalFilter>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001162:	f000 f91d 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000084 	.word	0x20000084
 8001170:	40005800 	.word	0x40005800
 8001174:	00303d5b 	.word	0x00303d5b

08001178 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	615a      	str	r2, [r3, #20]
 800119a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_TIM3_Init+0xac>)
 800119e:	4a22      	ldr	r2, [pc, #136]	; (8001228 <MX_TIM3_Init+0xb0>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36-1;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_TIM3_Init+0xac>)
 80011a4:	2223      	movs	r2, #35	; 0x23
 80011a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_TIM3_Init+0xac>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_TIM3_Init+0xac>)
 80011b0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80011b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_TIM3_Init+0xac>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_TIM3_Init+0xac>)
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_TIM3_Init+0xac>)
 80011c4:	f002 fd28 	bl	8003c18 <HAL_TIM_PWM_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80011ce:	f000 f8e7 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4810      	ldr	r0, [pc, #64]	; (8001224 <MX_TIM3_Init+0xac>)
 80011e2:	f003 f983 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80011ec:	f000 f8d8 	bl	80013a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f0:	2360      	movs	r3, #96	; 0x60
 80011f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	220c      	movs	r2, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <MX_TIM3_Init+0xac>)
 8001208:	f002 fd5e 	bl	8003cc8 <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001212:	f000 f8c5 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <MX_TIM3_Init+0xac>)
 8001218:	f000 f96c 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200000d8 	.word	0x200000d8
 8001228:	40000400 	.word	0x40000400

0800122c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <MX_USART3_UART_Init+0x5c>)
 8001234:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART3_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART3_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART3_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001270:	f003 f9ca 	bl	8004608 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800127a:	f000 f891 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000124 	.word	0x20000124
 8001288:	40004800 	.word	0x40004800

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <MX_GPIO_Init+0x104>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a3a      	ldr	r2, [pc, #232]	; (8001390 <MX_GPIO_Init+0x104>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <MX_GPIO_Init+0x104>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <MX_GPIO_Init+0x104>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a34      	ldr	r2, [pc, #208]	; (8001390 <MX_GPIO_Init+0x104>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <MX_GPIO_Init+0x104>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <MX_GPIO_Init+0x104>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a2e      	ldr	r2, [pc, #184]	; (8001390 <MX_GPIO_Init+0x104>)
 80012d8:	f043 0320 	orr.w	r3, r3, #32
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <MX_GPIO_Init+0x104>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0320 	and.w	r3, r3, #32
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_GPIO_Init+0x104>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <MX_GPIO_Init+0x104>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <MX_GPIO_Init+0x104>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <MX_GPIO_Init+0x104>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a22      	ldr	r2, [pc, #136]	; (8001390 <MX_GPIO_Init+0x104>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <MX_GPIO_Init+0x104>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001320:	481c      	ldr	r0, [pc, #112]	; (8001394 <MX_GPIO_Init+0x108>)
 8001322:	f000 fdb3 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_0, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f642 2101 	movw	r1, #10753	; 0x2a01
 800132c:	481a      	ldr	r0, [pc, #104]	; (8001398 <MX_GPIO_Init+0x10c>)
 800132e:	f000 fdad 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001332:	2308      	movs	r3, #8
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4815      	ldr	r0, [pc, #84]	; (800139c <MX_GPIO_Init+0x110>)
 8001346:	f000 fbdd 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800134a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <MX_GPIO_Init+0x108>)
 8001364:	f000 fbce 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE13 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_0;
 8001368:	f642 2301 	movw	r3, #10753	; 0x2a01
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_GPIO_Init+0x10c>)
 8001382:	f000 fbbf 	bl	8001b04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40021400 	.word	0x40021400
 8001398:	40021000 	.word	0x40021000
 800139c:	40020000 	.word	0x40020000

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_MspInit+0x44>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_MspInit+0x44>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_MspInit+0x44>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_MspInit+0x44>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_MspInit+0x44>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_MspInit+0x44>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0ae      	sub	sp, #184	; 0xb8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2290      	movs	r2, #144	; 0x90
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f003 ff21 	bl	800525c <memset>
  if(hi2c->Instance==I2C2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <HAL_I2C_MspInit+0xb4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d13c      	bne.n	800149e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001428:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800142a:	2300      	movs	r3, #0
 800142c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4618      	mov	r0, r3
 8001434:	f001 ffc8 	bl	80033c8 <HAL_RCCEx_PeriphCLKConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800143e:	f7ff ffaf 	bl	80013a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_I2C_MspInit+0xb8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a19      	ldr	r2, [pc, #100]	; (80014ac <HAL_I2C_MspInit+0xb8>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <HAL_I2C_MspInit+0xb8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800145a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800145e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001474:	2304      	movs	r3, #4
 8001476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800147e:	4619      	mov	r1, r3
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <HAL_I2C_MspInit+0xbc>)
 8001482:	f000 fb3f 	bl	8001b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_I2C_MspInit+0xb8>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_I2C_MspInit+0xb8>)
 800148c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_I2C_MspInit+0xb8>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	37b8      	adds	r7, #184	; 0xb8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40005800 	.word	0x40005800
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020400 	.word	0x40020400

080014b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_TIM_PWM_MspInit+0x38>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10b      	bne.n	80014de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40000400 	.word	0x40000400
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a11      	ldr	r2, [pc, #68]	; (8001558 <HAL_TIM_MspPostInit+0x64>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d11b      	bne.n	800154e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_TIM_MspPostInit+0x68>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_TIM_MspPostInit+0x68>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_TIM_MspPostInit+0x68>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800152e:	2302      	movs	r3, #2
 8001530:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800153e:	2302      	movs	r3, #2
 8001540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_TIM_MspPostInit+0x6c>)
 800154a:	f000 fadb 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40000400 	.word	0x40000400
 800155c:	40023800 	.word	0x40023800
 8001560:	40020400 	.word	0x40020400

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0ae      	sub	sp, #184	; 0xb8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2290      	movs	r2, #144	; 0x90
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f003 fe69 	bl	800525c <memset>
  if(huart->Instance==USART3)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <HAL_UART_MspInit+0xb4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d13c      	bne.n	800160e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001598:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800159a:	2300      	movs	r3, #0
 800159c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 ff10 	bl	80033c8 <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015ae:	f7ff fef7 	bl	80013a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a13      	ldr	r2, [pc, #76]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015fc:	2307      	movs	r3, #7
 80015fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_UART_MspInit+0xbc>)
 800160a:	f000 fa7b 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	37b8      	adds	r7, #184	; 0xb8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40004800 	.word	0x40004800
 800161c:	40023800 	.word	0x40023800
 8001620:	40020c00 	.word	0x40020c00

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001670:	f000 f91e 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00a      	b.n	80016a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168a:	f3af 8000 	nop.w
 800168e:	4601      	mov	r1, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf0      	blt.n	800168a <_read+0x12>
  }

  return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e009      	b.n	80016d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf1      	blt.n	80016c4 <_write+0x12>
  }
  return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_close>:

int _close(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001712:	605a      	str	r2, [r3, #4]
  return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_isatty>:

int _isatty(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f003 fd72 	bl	800526c <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20080000 	.word	0x20080000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	200001ec 	.word	0x200001ec
 80017bc:	20000340 	.word	0x20000340

080017c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ea:	490e      	ldr	r1, [pc, #56]	; (8001824 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017ec:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001800:	4c0b      	ldr	r4, [pc, #44]	; (8001830 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800180e:	f7ff ffd7 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001812:	f003 fd31 	bl	8005278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001816:	f7ff fb4f 	bl	8000eb8 <main>
  bx  lr    
 800181a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001828:	080060c4 	.word	0x080060c4
  ldr r2, =_sbss
 800182c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001830:	20000340 	.word	0x20000340

08001834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC_IRQHandler>

08001836 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183a:	2003      	movs	r0, #3
 800183c:	f000 f92e 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001840:	200f      	movs	r0, #15
 8001842:	f000 f805 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001846:	f7ff fdb1 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f93b 	bl	8001aea <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800188c:	f000 f911 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x20>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_IncTick+0x24>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008
 80018d4:	200001f0 	.word	0x200001f0

080018d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200001f0 	.word	0x200001f0

080018f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff ffee 	bl	80018d8 <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001908:	d005      	beq.n	8001916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_Delay+0x44>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001916:	bf00      	nop
 8001918:	f7ff ffde 	bl	80018d8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	d8f7      	bhi.n	8001918 <HAL_Delay+0x28>
  {
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000008 	.word	0x20000008

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <__NVIC_SetPriorityGrouping+0x40>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	4313      	orrs	r3, r2
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <__NVIC_SetPriorityGrouping+0x40>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00
 800197c:	05fa0000 	.word	0x05fa0000

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff47 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff5c 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff8e 	bl	80019f0 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffb0 	bl	8001a58 <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e175      	b.n	8001e10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8164 	bne.w	8001e0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d005      	beq.n	8001b5a <HAL_GPIO_Init+0x56>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d017      	beq.n	8001bf8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80be 	beq.w	8001e0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a65      	ldr	r2, [pc, #404]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b63      	ldr	r3, [pc, #396]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ca6:	4a61      	ldr	r2, [pc, #388]	; (8001e2c <HAL_GPIO_Init+0x328>)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a58      	ldr	r2, [pc, #352]	; (8001e30 <HAL_GPIO_Init+0x32c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d037      	beq.n	8001d42 <HAL_GPIO_Init+0x23e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a57      	ldr	r2, [pc, #348]	; (8001e34 <HAL_GPIO_Init+0x330>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d031      	beq.n	8001d3e <HAL_GPIO_Init+0x23a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a56      	ldr	r2, [pc, #344]	; (8001e38 <HAL_GPIO_Init+0x334>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d02b      	beq.n	8001d3a <HAL_GPIO_Init+0x236>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a55      	ldr	r2, [pc, #340]	; (8001e3c <HAL_GPIO_Init+0x338>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d025      	beq.n	8001d36 <HAL_GPIO_Init+0x232>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a54      	ldr	r2, [pc, #336]	; (8001e40 <HAL_GPIO_Init+0x33c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01f      	beq.n	8001d32 <HAL_GPIO_Init+0x22e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a53      	ldr	r2, [pc, #332]	; (8001e44 <HAL_GPIO_Init+0x340>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d019      	beq.n	8001d2e <HAL_GPIO_Init+0x22a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <HAL_GPIO_Init+0x344>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x226>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a51      	ldr	r2, [pc, #324]	; (8001e4c <HAL_GPIO_Init+0x348>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x222>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a50      	ldr	r2, [pc, #320]	; (8001e50 <HAL_GPIO_Init+0x34c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x21e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <HAL_GPIO_Init+0x350>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x21a>
 8001d1a:	2309      	movs	r3, #9
 8001d1c:	e012      	b.n	8001d44 <HAL_GPIO_Init+0x240>
 8001d1e:	230a      	movs	r3, #10
 8001d20:	e010      	b.n	8001d44 <HAL_GPIO_Init+0x240>
 8001d22:	2308      	movs	r3, #8
 8001d24:	e00e      	b.n	8001d44 <HAL_GPIO_Init+0x240>
 8001d26:	2307      	movs	r3, #7
 8001d28:	e00c      	b.n	8001d44 <HAL_GPIO_Init+0x240>
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	e00a      	b.n	8001d44 <HAL_GPIO_Init+0x240>
 8001d2e:	2305      	movs	r3, #5
 8001d30:	e008      	b.n	8001d44 <HAL_GPIO_Init+0x240>
 8001d32:	2304      	movs	r3, #4
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x240>
 8001d36:	2303      	movs	r3, #3
 8001d38:	e004      	b.n	8001d44 <HAL_GPIO_Init+0x240>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e002      	b.n	8001d44 <HAL_GPIO_Init+0x240>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_GPIO_Init+0x240>
 8001d42:	2300      	movs	r3, #0
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	f002 0203 	and.w	r2, r2, #3
 8001d4a:	0092      	lsls	r2, r2, #2
 8001d4c:	4093      	lsls	r3, r2
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d54:	4935      	ldr	r1, [pc, #212]	; (8001e2c <HAL_GPIO_Init+0x328>)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_GPIO_Init+0x354>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d86:	4a34      	ldr	r2, [pc, #208]	; (8001e58 <HAL_GPIO_Init+0x354>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d8c:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_GPIO_Init+0x354>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db0:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <HAL_GPIO_Init+0x354>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_GPIO_Init+0x354>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dda:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_GPIO_Init+0x354>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_GPIO_Init+0x354>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_GPIO_Init+0x354>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b0f      	cmp	r3, #15
 8001e14:	f67f ae86 	bls.w	8001b24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40013800 	.word	0x40013800
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020400 	.word	0x40020400
 8001e38:	40020800 	.word	0x40020800
 8001e3c:	40020c00 	.word	0x40020c00
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40021400 	.word	0x40021400
 8001e48:	40021800 	.word	0x40021800
 8001e4c:	40021c00 	.word	0x40021c00
 8001e50:	40022000 	.word	0x40022000
 8001e54:	40022400 	.word	0x40022400
 8001e58:	40013c00 	.word	0x40013c00

08001e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e001      	b.n	8001e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	619a      	str	r2, [r3, #24]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e07f      	b.n	8001fd2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fa84 	bl	80013f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	; 0x24
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e006      	b.n	8001f48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d104      	bne.n	8001f5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_I2C_Init+0x11c>)
 8001f66:	430b      	orrs	r3, r1
 8001f68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69d9      	ldr	r1, [r3, #28]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	02008000 	.word	0x02008000

08001fe0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	4608      	mov	r0, r1
 8001fea:	4611      	mov	r1, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	817b      	strh	r3, [r7, #10]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	813b      	strh	r3, [r7, #8]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b20      	cmp	r3, #32
 8002004:	f040 80f9 	bne.w	80021fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_I2C_Mem_Write+0x34>
 800200e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800201a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0ed      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_I2C_Mem_Write+0x4e>
 800202a:	2302      	movs	r3, #2
 800202c:	e0e6      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002036:	f7ff fc4f 	bl	80018d8 <HAL_GetTick>
 800203a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2319      	movs	r3, #25
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 fac3 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0d1      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2221      	movs	r2, #33	; 0x21
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2240      	movs	r2, #64	; 0x40
 8002064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a3a      	ldr	r2, [r7, #32]
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002080:	88f8      	ldrh	r0, [r7, #6]
 8002082:	893a      	ldrh	r2, [r7, #8]
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	4603      	mov	r3, r0
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f9d3 	bl	800243c <I2C_RequestMemoryWrite>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0a9      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2bff      	cmp	r3, #255	; 0xff
 80020b0:	d90e      	bls.n	80020d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	22ff      	movs	r2, #255	; 0xff
 80020b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	8979      	ldrh	r1, [r7, #10]
 80020c0:	2300      	movs	r3, #0
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fc1f 	bl	800290c <I2C_TransferConfig>
 80020ce:	e00f      	b.n	80020f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	8979      	ldrh	r1, [r7, #10]
 80020e2:	2300      	movs	r3, #0
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fc0e 	bl	800290c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 faad 	bl	8002654 <I2C_WaitOnTXISFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e07b      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d034      	beq.n	80021a8 <HAL_I2C_Mem_Write+0x1c8>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	2b00      	cmp	r3, #0
 8002144:	d130      	bne.n	80021a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	2200      	movs	r2, #0
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fa3f 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e04d      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	2bff      	cmp	r3, #255	; 0xff
 8002168:	d90e      	bls.n	8002188 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	22ff      	movs	r2, #255	; 0xff
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002174:	b2da      	uxtb	r2, r3
 8002176:	8979      	ldrh	r1, [r7, #10]
 8002178:	2300      	movs	r3, #0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fbc3 	bl	800290c <I2C_TransferConfig>
 8002186:	e00f      	b.n	80021a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	b2da      	uxtb	r2, r3
 8002198:	8979      	ldrh	r1, [r7, #10]
 800219a:	2300      	movs	r3, #0
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fbb2 	bl	800290c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d19e      	bne.n	80020f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa8c 	bl	80026d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e01a      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2220      	movs	r2, #32
 80021cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_I2C_Mem_Write+0x224>)
 80021da:	400b      	ands	r3, r1
 80021dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	fe00e800 	.word	0xfe00e800

08002208 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	4608      	mov	r0, r1
 8002212:	4611      	mov	r1, r2
 8002214:	461a      	mov	r2, r3
 8002216:	4603      	mov	r3, r0
 8002218:	817b      	strh	r3, [r7, #10]
 800221a:	460b      	mov	r3, r1
 800221c:	813b      	strh	r3, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	f040 80fd 	bne.w	800242a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_I2C_Mem_Read+0x34>
 8002236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0f1      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_I2C_Mem_Read+0x4e>
 8002252:	2302      	movs	r3, #2
 8002254:	e0ea      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800225e:	f7ff fb3b 	bl	80018d8 <HAL_GetTick>
 8002262:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2319      	movs	r3, #25
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f9af 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0d5      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2222      	movs	r2, #34	; 0x22
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a3a      	ldr	r2, [r7, #32]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022a8:	88f8      	ldrh	r0, [r7, #6]
 80022aa:	893a      	ldrh	r2, [r7, #8]
 80022ac:	8979      	ldrh	r1, [r7, #10]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	4603      	mov	r3, r0
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f913 	bl	80024e4 <I2C_RequestMemoryRead>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0ad      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2bff      	cmp	r3, #255	; 0xff
 80022d8:	d90e      	bls.n	80022f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	22ff      	movs	r2, #255	; 0xff
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	8979      	ldrh	r1, [r7, #10]
 80022e8:	4b52      	ldr	r3, [pc, #328]	; (8002434 <HAL_I2C_Mem_Read+0x22c>)
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fb0b 	bl	800290c <I2C_TransferConfig>
 80022f6:	e00f      	b.n	8002318 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	b2da      	uxtb	r2, r3
 8002308:	8979      	ldrh	r1, [r7, #10]
 800230a:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_I2C_Mem_Read+0x22c>)
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fafa 	bl	800290c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	2200      	movs	r2, #0
 8002320:	2104      	movs	r1, #4
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f956 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07c      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d034      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x1d0>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	2b00      	cmp	r3, #0
 8002374:	d130      	bne.n	80023d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	2200      	movs	r2, #0
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f927 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e04d      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	2bff      	cmp	r3, #255	; 0xff
 8002398:	d90e      	bls.n	80023b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	22ff      	movs	r2, #255	; 0xff
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	8979      	ldrh	r1, [r7, #10]
 80023a8:	2300      	movs	r3, #0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 faab 	bl	800290c <I2C_TransferConfig>
 80023b6:	e00f      	b.n	80023d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	8979      	ldrh	r1, [r7, #10]
 80023ca:	2300      	movs	r3, #0
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fa9a 	bl	800290c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d19a      	bne.n	8002318 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f974 	bl	80026d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e01a      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2220      	movs	r2, #32
 80023fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_I2C_Mem_Read+0x230>)
 800240a:	400b      	ands	r3, r1
 800240c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
  }
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	80002400 	.word	0x80002400
 8002438:	fe00e800 	.word	0xfe00e800

0800243c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	817b      	strh	r3, [r7, #10]
 800244e:	460b      	mov	r3, r1
 8002450:	813b      	strh	r3, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	8979      	ldrh	r1, [r7, #10]
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <I2C_RequestMemoryWrite+0xa4>)
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fa51 	bl	800290c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	69b9      	ldr	r1, [r7, #24]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f8f0 	bl	8002654 <I2C_WaitOnTXISFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e02c      	b.n	80024d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d105      	bne.n	8002490 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002484:	893b      	ldrh	r3, [r7, #8]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
 800248e:	e015      	b.n	80024bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002490:	893b      	ldrh	r3, [r7, #8]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b29b      	uxth	r3, r3
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f8d6 	bl	8002654 <I2C_WaitOnTXISFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e012      	b.n	80024d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024b2:	893b      	ldrh	r3, [r7, #8]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f884 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	80002000 	.word	0x80002000

080024e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <I2C_RequestMemoryRead+0xa4>)
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2300      	movs	r3, #0
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f9fe 	bl	800290c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	69b9      	ldr	r1, [r7, #24]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f89d 	bl	8002654 <I2C_WaitOnTXISFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e02c      	b.n	800257e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d105      	bne.n	8002536 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800252a:	893b      	ldrh	r3, [r7, #8]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
 8002534:	e015      	b.n	8002562 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002536:	893b      	ldrh	r3, [r7, #8]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	b29b      	uxth	r3, r3
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f883 	bl	8002654 <I2C_WaitOnTXISFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e012      	b.n	800257e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002558:	893b      	ldrh	r3, [r7, #8]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2200      	movs	r2, #0
 800256a:	2140      	movs	r1, #64	; 0x40
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f831 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	80002000 	.word	0x80002000

0800258c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d103      	bne.n	80025aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d007      	beq.n	80025c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	619a      	str	r2, [r3, #24]
  }
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e4:	e022      	b.n	800262c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ec:	d01e      	beq.n	800262c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7ff f973 	bl	80018d8 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d113      	bne.n	800262c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e00f      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4013      	ands	r3, r2
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	429a      	cmp	r2, r3
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	429a      	cmp	r2, r3
 8002648:	d0cd      	beq.n	80025e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002660:	e02c      	b.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f870 	bl	800274c <I2C_IsErrorOccurred>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e02a      	b.n	80026cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800267c:	d01e      	beq.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267e:	f7ff f92b 	bl	80018d8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	429a      	cmp	r2, r3
 800268c:	d302      	bcc.n	8002694 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d113      	bne.n	80026bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e007      	b.n	80026cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d1cb      	bne.n	8002662 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026e0:	e028      	b.n	8002734 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f830 	bl	800274c <I2C_IsErrorOccurred>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e026      	b.n	8002744 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7ff f8ef 	bl	80018d8 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d113      	bne.n	8002734 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e007      	b.n	8002744 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b20      	cmp	r3, #32
 8002740:	d1cf      	bne.n	80026e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	d068      	beq.n	800284a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2210      	movs	r2, #16
 800277e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002780:	e049      	b.n	8002816 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002788:	d045      	beq.n	8002816 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800278a:	f7ff f8a5 	bl	80018d8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	429a      	cmp	r2, r3
 8002798:	d302      	bcc.n	80027a0 <I2C_IsErrorOccurred+0x54>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d13a      	bne.n	8002816 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c2:	d121      	bne.n	8002808 <I2C_IsErrorOccurred+0xbc>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ca:	d01d      	beq.n	8002808 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d01a      	beq.n	8002808 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027e2:	f7ff f879 	bl	80018d8 <HAL_GetTick>
 80027e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e8:	e00e      	b.n	8002808 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027ea:	f7ff f875 	bl	80018d8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b19      	cmp	r3, #25
 80027f6:	d907      	bls.n	8002808 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f043 0320 	orr.w	r3, r3, #32
 80027fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002806:	e006      	b.n	8002816 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b20      	cmp	r3, #32
 8002814:	d1e9      	bne.n	80027ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b20      	cmp	r3, #32
 8002822:	d003      	beq.n	800282c <I2C_IsErrorOccurred+0xe0>
 8002824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0aa      	beq.n	8002782 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800282c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2220      	movs	r2, #32
 800283a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01c      	beq.n	80028fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f7ff fe63 	bl	800258c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <I2C_IsErrorOccurred+0x1bc>)
 80028d2:	400b      	ands	r3, r1
 80028d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	431a      	orrs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3728      	adds	r7, #40	; 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	fe00e800 	.word	0xfe00e800

0800290c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	817b      	strh	r3, [r7, #10]
 800291a:	4613      	mov	r3, r2
 800291c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002924:	7a7b      	ldrb	r3, [r7, #9]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800292c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	4313      	orrs	r3, r2
 8002936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800293a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	0d5b      	lsrs	r3, r3, #21
 8002946:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <I2C_TransferConfig+0x60>)
 800294c:	430b      	orrs	r3, r1
 800294e:	43db      	mvns	r3, r3
 8002950:	ea02 0103 	and.w	r1, r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	03ff63ff 	.word	0x03ff63ff

08002970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	d138      	bne.n	80029f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002990:	2302      	movs	r3, #2
 8002992:	e032      	b.n	80029fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d139      	bne.n	8002a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e033      	b.n	8002a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2224      	movs	r2, #36	; 0x24
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e29b      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8087 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac4:	4b96      	ldr	r3, [pc, #600]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d00c      	beq.n	8002aea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad0:	4b93      	ldr	r3, [pc, #588]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d112      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62>
 8002adc:	4b90      	ldr	r3, [pc, #576]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae8:	d10b      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aea:	4b8d      	ldr	r3, [pc, #564]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d06c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x130>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d168      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e275      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x7a>
 8002b0c:	4b84      	ldr	r3, [pc, #528]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a83      	ldr	r2, [pc, #524]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e02e      	b.n	8002b78 <HAL_RCC_OscConfig+0xd8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x9c>
 8002b22:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7e      	ldr	r2, [pc, #504]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b7c      	ldr	r3, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7b      	ldr	r2, [pc, #492]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e01d      	b.n	8002b78 <HAL_RCC_OscConfig+0xd8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0xc0>
 8002b46:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a75      	ldr	r2, [pc, #468]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a72      	ldr	r2, [pc, #456]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0xd8>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6e      	ldr	r2, [pc, #440]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b6c      	ldr	r3, [pc, #432]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6b      	ldr	r2, [pc, #428]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe feaa 	bl	80018d8 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fe fea6 	bl	80018d8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e229      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0xe8>
 8002ba6:	e014      	b.n	8002bd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fe96 	bl	80018d8 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fe fe92 	bl	80018d8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e215      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x110>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d069      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bde:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bea:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d11c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x190>
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_RCC_OscConfig+0x17a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e1e9      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	493d      	ldr	r1, [pc, #244]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	e040      	b.n	8002cb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d023      	beq.n	8002c80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a38      	ldr	r2, [pc, #224]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fe48 	bl	80018d8 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fe44 	bl	80018d8 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1c7      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4929      	ldr	r1, [pc, #164]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
 8002c7e:	e018      	b.n	8002cb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fe24 	bl	80018d8 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe fe20 	bl	80018d8 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1a3      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d038      	beq.n	8002d30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d019      	beq.n	8002cfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cca:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fe01 	bl	80018d8 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cda:	f7fe fdfd 	bl	80018d8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e180      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x23a>
 8002cf8:	e01a      	b.n	8002d30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_RCC_OscConfig+0x280>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe fde7 	bl	80018d8 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0e:	f7fe fde3 	bl	80018d8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d903      	bls.n	8002d24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e166      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
 8002d20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b92      	ldr	r3, [pc, #584]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ee      	bne.n	8002d0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a4 	beq.w	8002e86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3e:	4b8c      	ldr	r3, [pc, #560]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10d      	bne.n	8002d66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	4b89      	ldr	r3, [pc, #548]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4a88      	ldr	r2, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
 8002d56:	4b86      	ldr	r3, [pc, #536]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d66:	4b83      	ldr	r3, [pc, #524]	; (8002f74 <HAL_RCC_OscConfig+0x4d4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d118      	bne.n	8002da4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d72:	4b80      	ldr	r3, [pc, #512]	; (8002f74 <HAL_RCC_OscConfig+0x4d4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7f      	ldr	r2, [pc, #508]	; (8002f74 <HAL_RCC_OscConfig+0x4d4>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fdab 	bl	80018d8 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d86:	f7fe fda7 	bl	80018d8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e12a      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d98:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCC_OscConfig+0x4d4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x31a>
 8002dac:	4b70      	ldr	r3, [pc, #448]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a6f      	ldr	r2, [pc, #444]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
 8002db8:	e02d      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x33c>
 8002dc2:	4b6b      	ldr	r3, [pc, #428]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a6a      	ldr	r2, [pc, #424]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dce:	4b68      	ldr	r3, [pc, #416]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a67      	ldr	r2, [pc, #412]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	e01c      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d10c      	bne.n	8002dfe <HAL_RCC_OscConfig+0x35e>
 8002de4:	4b62      	ldr	r3, [pc, #392]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a61      	ldr	r2, [pc, #388]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002dea:	f043 0304 	orr.w	r3, r3, #4
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	4b5f      	ldr	r3, [pc, #380]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a5e      	ldr	r2, [pc, #376]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	e00b      	b.n	8002e16 <HAL_RCC_OscConfig+0x376>
 8002dfe:	4b5c      	ldr	r3, [pc, #368]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	4a5b      	ldr	r2, [pc, #364]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0a:	4b59      	ldr	r3, [pc, #356]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d015      	beq.n	8002e4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe fd5b 	bl	80018d8 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7fe fd57 	bl	80018d8 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0d8      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3c:	4b4c      	ldr	r3, [pc, #304]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ee      	beq.n	8002e26 <HAL_RCC_OscConfig+0x386>
 8002e48:	e014      	b.n	8002e74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fd45 	bl	80018d8 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe fd41 	bl	80018d8 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0c2      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e68:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ee      	bne.n	8002e52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d105      	bne.n	8002e86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7a:	4b3d      	ldr	r3, [pc, #244]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80ae 	beq.w	8002fec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e90:	4b37      	ldr	r3, [pc, #220]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d06d      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d14b      	bne.n	8002f3c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea4:	4b32      	ldr	r3, [pc, #200]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a31      	ldr	r2, [pc, #196]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fd12 	bl	80018d8 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fd0e 	bl	80018d8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e091      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	071b      	lsls	r3, r3, #28
 8002f02:	491b      	ldr	r1, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fce0 	bl	80018d8 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fcdc 	bl	80018d8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e05f      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x47c>
 8002f3a:	e057      	b.n	8002fec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fcc6 	bl	80018d8 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fcc2 	bl	80018d8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e045      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_RCC_OscConfig+0x4d0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4b0>
 8002f6e:	e03d      	b.n	8002fec <HAL_RCC_OscConfig+0x54c>
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f78:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <HAL_RCC_OscConfig+0x558>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d030      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d129      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d122      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa8:	4013      	ands	r3, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d119      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d10f      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800

08002ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0d0      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d910      	bls.n	8003044 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 020f 	bic.w	r2, r3, #15
 800302a:	4965      	ldr	r1, [pc, #404]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800305c:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003066:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003074:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800307e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003080:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	494d      	ldr	r1, [pc, #308]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d040      	beq.n	8003120 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d115      	bne.n	80030de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e073      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06b      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4936      	ldr	r1, [pc, #216]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f0:	f7fe fbf2 	bl	80018d8 <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fe fbee 	bl	80018d8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e053      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d210      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 020f 	bic.w	r2, r3, #15
 8003136:	4922      	ldr	r1, [pc, #136]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e032      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4916      	ldr	r1, [pc, #88]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490e      	ldr	r1, [pc, #56]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800318e:	f000 f821 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003192:	4602      	mov	r2, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	490a      	ldr	r1, [pc, #40]	; (80031c8 <HAL_RCC_ClockConfig+0x1cc>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	fa22 f303 	lsr.w	r3, r2, r3
 80031a6:	4a09      	ldr	r2, [pc, #36]	; (80031cc <HAL_RCC_ClockConfig+0x1d0>)
 80031a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_ClockConfig+0x1d4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fb4e 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023c00 	.word	0x40023c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08006068 	.word	0x08006068
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d8:	b090      	sub	sp, #64	; 0x40
 80031da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
 80031e0:	2300      	movs	r3, #0
 80031e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e4:	2300      	movs	r3, #0
 80031e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ec:	4b59      	ldr	r3, [pc, #356]	; (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d00d      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x40>
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	f200 80a1 	bhi.w	8003340 <HAL_RCC_GetSysClockFreq+0x16c>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x34>
 8003202:	2b04      	cmp	r3, #4
 8003204:	d003      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0x3a>
 8003206:	e09b      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b53      	ldr	r3, [pc, #332]	; (8003358 <HAL_RCC_GetSysClockFreq+0x184>)
 800320a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800320c:	e09b      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800320e:	4b53      	ldr	r3, [pc, #332]	; (800335c <HAL_RCC_GetSysClockFreq+0x188>)
 8003210:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003212:	e098      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800321e:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d028      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	2200      	movs	r2, #0
 8003232:	623b      	str	r3, [r7, #32]
 8003234:	627a      	str	r2, [r7, #36]	; 0x24
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800323c:	2100      	movs	r1, #0
 800323e:	4b47      	ldr	r3, [pc, #284]	; (800335c <HAL_RCC_GetSysClockFreq+0x188>)
 8003240:	fb03 f201 	mul.w	r2, r3, r1
 8003244:	2300      	movs	r3, #0
 8003246:	fb00 f303 	mul.w	r3, r0, r3
 800324a:	4413      	add	r3, r2
 800324c:	4a43      	ldr	r2, [pc, #268]	; (800335c <HAL_RCC_GetSysClockFreq+0x188>)
 800324e:	fba0 1202 	umull	r1, r2, r0, r2
 8003252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003254:	460a      	mov	r2, r1
 8003256:	62ba      	str	r2, [r7, #40]	; 0x28
 8003258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800325a:	4413      	add	r3, r2
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003260:	2200      	movs	r2, #0
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	61fa      	str	r2, [r7, #28]
 8003266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800326a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800326e:	f7fd f837 	bl	80002e0 <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4613      	mov	r3, r2
 8003278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327a:	e053      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327c:	4b35      	ldr	r3, [pc, #212]	; (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	2200      	movs	r2, #0
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	617a      	str	r2, [r7, #20]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800328e:	f04f 0b00 	mov.w	fp, #0
 8003292:	4652      	mov	r2, sl
 8003294:	465b      	mov	r3, fp
 8003296:	f04f 0000 	mov.w	r0, #0
 800329a:	f04f 0100 	mov.w	r1, #0
 800329e:	0159      	lsls	r1, r3, #5
 80032a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a4:	0150      	lsls	r0, r2, #5
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	ebb2 080a 	subs.w	r8, r2, sl
 80032ae:	eb63 090b 	sbc.w	r9, r3, fp
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032c6:	ebb2 0408 	subs.w	r4, r2, r8
 80032ca:	eb63 0509 	sbc.w	r5, r3, r9
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	00eb      	lsls	r3, r5, #3
 80032d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032dc:	00e2      	lsls	r2, r4, #3
 80032de:	4614      	mov	r4, r2
 80032e0:	461d      	mov	r5, r3
 80032e2:	eb14 030a 	adds.w	r3, r4, sl
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	eb45 030b 	adc.w	r3, r5, fp
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032fa:	4629      	mov	r1, r5
 80032fc:	028b      	lsls	r3, r1, #10
 80032fe:	4621      	mov	r1, r4
 8003300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003304:	4621      	mov	r1, r4
 8003306:	028a      	lsls	r2, r1, #10
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	2200      	movs	r2, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	60fa      	str	r2, [r7, #12]
 8003314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003318:	f7fc ffe2 	bl	80002e0 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4613      	mov	r3, r2
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_GetSysClockFreq+0x180>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	3301      	adds	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800333e:	e002      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCC_GetSysClockFreq+0x184>)
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003348:	4618      	mov	r0, r3
 800334a:	3740      	adds	r7, #64	; 0x40
 800334c:	46bd      	mov	sp, r7
 800334e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	00f42400 	.word	0x00f42400
 800335c:	017d7840 	.word	0x017d7840

08003360 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCC_GetHCLKFreq+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800337c:	f7ff fff0 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	; (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	08006078 	.word	0x08006078

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033a4:	f7ff ffdc 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0b5b      	lsrs	r3, r3, #13
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08006078 	.word	0x08006078

080033c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d012      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033f0:	4b69      	ldr	r3, [pc, #420]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a68      	ldr	r2, [pc, #416]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033fa:	6093      	str	r3, [r2, #8]
 80033fc:	4b66      	ldr	r3, [pc, #408]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003404:	4964      	ldr	r1, [pc, #400]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d017      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003422:	4b5d      	ldr	r3, [pc, #372]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	4959      	ldr	r1, [pc, #356]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003440:	d101      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003442:	2301      	movs	r3, #1
 8003444:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800344e:	2301      	movs	r3, #1
 8003450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d017      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800345e:	4b4e      	ldr	r3, [pc, #312]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003464:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	494a      	ldr	r1, [pc, #296]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347c:	d101      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800347e:	2301      	movs	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800348a:	2301      	movs	r3, #1
 800348c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800349a:	2301      	movs	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 808b 	beq.w	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034ac:	4b3a      	ldr	r3, [pc, #232]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	4a39      	ldr	r2, [pc, #228]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b6:	6413      	str	r3, [r2, #64]	; 0x40
 80034b8:	4b37      	ldr	r3, [pc, #220]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a34      	ldr	r2, [pc, #208]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d0:	f7fe fa02 	bl	80018d8 <HAL_GetTick>
 80034d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d8:	f7fe f9fe 	bl	80018d8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e38f      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034ea:	4b2c      	ldr	r3, [pc, #176]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f6:	4b28      	ldr	r3, [pc, #160]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d035      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	429a      	cmp	r2, r3
 8003512:	d02e      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003514:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003536:	4a18      	ldr	r2, [pc, #96]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800353c:	4b16      	ldr	r3, [pc, #88]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	d114      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe f9c6 	bl	80018d8 <HAL_GetTick>
 800354c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	e00a      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7fe f9c2 	bl	80018d8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e351      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0ee      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800357e:	d111      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800358e:	400b      	ands	r3, r1
 8003590:	4901      	ldr	r1, [pc, #4]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
 8003596:	e00b      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003598:	40023800 	.word	0x40023800
 800359c:	40007000 	.word	0x40007000
 80035a0:	0ffffcff 	.word	0x0ffffcff
 80035a4:	4bac      	ldr	r3, [pc, #688]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4aab      	ldr	r2, [pc, #684]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035ae:	6093      	str	r3, [r2, #8]
 80035b0:	4ba9      	ldr	r3, [pc, #676]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035bc:	49a6      	ldr	r1, [pc, #664]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d010      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ce:	4ba2      	ldr	r3, [pc, #648]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d4:	4aa0      	ldr	r2, [pc, #640]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035de:	4b9e      	ldr	r3, [pc, #632]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	499b      	ldr	r1, [pc, #620]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035fc:	4b96      	ldr	r3, [pc, #600]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360a:	4993      	ldr	r1, [pc, #588]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800361e:	4b8e      	ldr	r3, [pc, #568]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362c:	498a      	ldr	r1, [pc, #552]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003640:	4b85      	ldr	r3, [pc, #532]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364e:	4982      	ldr	r1, [pc, #520]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003662:	4b7d      	ldr	r3, [pc, #500]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	4979      	ldr	r1, [pc, #484]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003684:	4b74      	ldr	r3, [pc, #464]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	4971      	ldr	r1, [pc, #452]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a6:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f023 020c 	bic.w	r2, r3, #12
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b4:	4968      	ldr	r1, [pc, #416]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036c8:	4b63      	ldr	r3, [pc, #396]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	4960      	ldr	r1, [pc, #384]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036ea:	4b5b      	ldr	r3, [pc, #364]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f8:	4957      	ldr	r1, [pc, #348]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800370c:	4b52      	ldr	r3, [pc, #328]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	494f      	ldr	r1, [pc, #316]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800372e:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	4946      	ldr	r1, [pc, #280]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003750:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	493e      	ldr	r1, [pc, #248]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003780:	4935      	ldr	r1, [pc, #212]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003794:	4b30      	ldr	r3, [pc, #192]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a2:	492d      	ldr	r1, [pc, #180]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d011      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037b6:	4b28      	ldr	r3, [pc, #160]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c4:	4924      	ldr	r1, [pc, #144]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d4:	d101      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037e6:	2301      	movs	r3, #1
 80037e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037f6:	4b18      	ldr	r3, [pc, #96]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003804:	4914      	ldr	r1, [pc, #80]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003828:	490b      	ldr	r1, [pc, #44]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00f      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384c:	4902      	ldr	r1, [pc, #8]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003868:	4b8a      	ldr	r3, [pc, #552]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800386a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800386e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003878:	4986      	ldr	r1, [pc, #536]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00b      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800388c:	4b81      	ldr	r3, [pc, #516]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003892:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389c:	497d      	ldr	r1, [pc, #500]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d006      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80d6 	beq.w	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038b8:	4b76      	ldr	r3, [pc, #472]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a75      	ldr	r2, [pc, #468]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fe f808 	bl	80018d8 <HAL_GetTick>
 80038c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038cc:	f7fe f804 	bl	80018d8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e195      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038de:	4b6d      	ldr	r3, [pc, #436]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d021      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11d      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038fe:	4b65      	ldr	r3, [pc, #404]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800390c:	4b61      	ldr	r3, [pc, #388]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003912:	0e1b      	lsrs	r3, r3, #24
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	019a      	lsls	r2, r3, #6
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	061b      	lsls	r3, r3, #24
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	071b      	lsls	r3, r3, #28
 8003932:	4958      	ldr	r1, [pc, #352]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d004      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02e      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003964:	d129      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003966:	4b4b      	ldr	r3, [pc, #300]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003974:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800397a:	0f1b      	lsrs	r3, r3, #28
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	019a      	lsls	r2, r3, #6
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	061b      	lsls	r3, r3, #24
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	071b      	lsls	r3, r3, #28
 800399a:	493e      	ldr	r1, [pc, #248]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039a2:	4b3c      	ldr	r3, [pc, #240]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a8:	f023 021f 	bic.w	r2, r3, #31
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	3b01      	subs	r3, #1
 80039b2:	4938      	ldr	r1, [pc, #224]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01d      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039c6:	4b33      	ldr	r3, [pc, #204]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039cc:	0e1b      	lsrs	r3, r3, #24
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039d4:	4b2f      	ldr	r3, [pc, #188]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	0f1b      	lsrs	r3, r3, #28
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	019a      	lsls	r2, r3, #6
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	431a      	orrs	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	061b      	lsls	r3, r3, #24
 80039f4:	431a      	orrs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	071b      	lsls	r3, r3, #28
 80039fa:	4926      	ldr	r1, [pc, #152]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d011      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	019a      	lsls	r2, r3, #6
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	071b      	lsls	r3, r3, #28
 8003a2a:	491a      	ldr	r1, [pc, #104]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a32:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3e:	f7fd ff4b 	bl	80018d8 <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a46:	f7fd ff47 	bl	80018d8 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	; 0x64
 8003a52:	d901      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e0d8      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a58:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	f040 80ce 	bne.w	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a08      	ldr	r2, [pc, #32]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fd ff2e 	bl	80018d8 <HAL_GetTick>
 8003a7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a80:	f7fd ff2a 	bl	80018d8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d904      	bls.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e0bb      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a98:	4b5e      	ldr	r3, [pc, #376]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa4:	d0ec      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d02e      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d12a      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ace:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003adc:	4b4d      	ldr	r3, [pc, #308]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	0f1b      	lsrs	r3, r3, #28
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	019a      	lsls	r2, r3, #6
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	071b      	lsls	r3, r3, #28
 8003b02:	4944      	ldr	r1, [pc, #272]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b0a:	4b42      	ldr	r3, [pc, #264]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	493d      	ldr	r1, [pc, #244]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d022      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b38:	d11d      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b3a:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	0e1b      	lsrs	r3, r3, #24
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b48:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	0f1b      	lsrs	r3, r3, #28
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	019a      	lsls	r2, r3, #6
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	431a      	orrs	r2, r3
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	071b      	lsls	r3, r3, #28
 8003b6e:	4929      	ldr	r1, [pc, #164]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d028      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	0e1b      	lsrs	r3, r3, #24
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b90:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	019a      	lsls	r2, r3, #6
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	071b      	lsls	r3, r3, #28
 8003bb6:	4917      	ldr	r1, [pc, #92]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	4911      	ldr	r1, [pc, #68]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0e      	ldr	r2, [pc, #56]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be0:	f7fd fe7a 	bl	80018d8 <HAL_GetTick>
 8003be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003be8:	f7fd fe76 	bl	80018d8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e007      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c06:	d1ef      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800

08003c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e049      	b.n	8003cbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd fc38 	bl	80014b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 f94a 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0ff      	b.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b14      	cmp	r3, #20
 8003cf2:	f200 80f0 	bhi.w	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003ed7 	.word	0x08003ed7
 8003d04:	08003ed7 	.word	0x08003ed7
 8003d08:	08003ed7 	.word	0x08003ed7
 8003d0c:	08003d91 	.word	0x08003d91
 8003d10:	08003ed7 	.word	0x08003ed7
 8003d14:	08003ed7 	.word	0x08003ed7
 8003d18:	08003ed7 	.word	0x08003ed7
 8003d1c:	08003dd3 	.word	0x08003dd3
 8003d20:	08003ed7 	.word	0x08003ed7
 8003d24:	08003ed7 	.word	0x08003ed7
 8003d28:	08003ed7 	.word	0x08003ed7
 8003d2c:	08003e13 	.word	0x08003e13
 8003d30:	08003ed7 	.word	0x08003ed7
 8003d34:	08003ed7 	.word	0x08003ed7
 8003d38:	08003ed7 	.word	0x08003ed7
 8003d3c:	08003e55 	.word	0x08003e55
 8003d40:	08003ed7 	.word	0x08003ed7
 8003d44:	08003ed7 	.word	0x08003ed7
 8003d48:	08003ed7 	.word	0x08003ed7
 8003d4c:	08003e95 	.word	0x08003e95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f96a 	bl	8004030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0208 	orr.w	r2, r2, #8
 8003d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0204 	bic.w	r2, r2, #4
 8003d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6999      	ldr	r1, [r3, #24]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	619a      	str	r2, [r3, #24]
      break;
 8003d8e:	e0a5      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f9bc 	bl	8004114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6999      	ldr	r1, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	619a      	str	r2, [r3, #24]
      break;
 8003dd0:	e084      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fa13 	bl	8004204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0208 	orr.w	r2, r2, #8
 8003dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0204 	bic.w	r2, r2, #4
 8003dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69d9      	ldr	r1, [r3, #28]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	61da      	str	r2, [r3, #28]
      break;
 8003e10:	e064      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fa69 	bl	80042f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69d9      	ldr	r1, [r3, #28]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	021a      	lsls	r2, r3, #8
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	61da      	str	r2, [r3, #28]
      break;
 8003e52:	e043      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 faa0 	bl	80043a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0208 	orr.w	r2, r2, #8
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0204 	bic.w	r2, r2, #4
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e92:	e023      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fad2 	bl	8004444 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	021a      	lsls	r2, r3, #8
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ed4:	e002      	b.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop

08003ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a40      	ldr	r2, [pc, #256]	; (8004004 <TIM_Base_SetConfig+0x114>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0e:	d00f      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a3d      	ldr	r2, [pc, #244]	; (8004008 <TIM_Base_SetConfig+0x118>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a3c      	ldr	r2, [pc, #240]	; (800400c <TIM_Base_SetConfig+0x11c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a3b      	ldr	r2, [pc, #236]	; (8004010 <TIM_Base_SetConfig+0x120>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a3a      	ldr	r2, [pc, #232]	; (8004014 <TIM_Base_SetConfig+0x124>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d108      	bne.n	8003f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2f      	ldr	r2, [pc, #188]	; (8004004 <TIM_Base_SetConfig+0x114>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d02b      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f50:	d027      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2c      	ldr	r2, [pc, #176]	; (8004008 <TIM_Base_SetConfig+0x118>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d023      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2b      	ldr	r2, [pc, #172]	; (800400c <TIM_Base_SetConfig+0x11c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01f      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a2a      	ldr	r2, [pc, #168]	; (8004010 <TIM_Base_SetConfig+0x120>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01b      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a29      	ldr	r2, [pc, #164]	; (8004014 <TIM_Base_SetConfig+0x124>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d017      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a28      	ldr	r2, [pc, #160]	; (8004018 <TIM_Base_SetConfig+0x128>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a27      	ldr	r2, [pc, #156]	; (800401c <TIM_Base_SetConfig+0x12c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00f      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a26      	ldr	r2, [pc, #152]	; (8004020 <TIM_Base_SetConfig+0x130>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00b      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a25      	ldr	r2, [pc, #148]	; (8004024 <TIM_Base_SetConfig+0x134>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a24      	ldr	r2, [pc, #144]	; (8004028 <TIM_Base_SetConfig+0x138>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a23      	ldr	r2, [pc, #140]	; (800402c <TIM_Base_SetConfig+0x13c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d108      	bne.n	8003fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <TIM_Base_SetConfig+0x114>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_Base_SetConfig+0xf8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <TIM_Base_SetConfig+0x124>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d103      	bne.n	8003ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40010400 	.word	0x40010400
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800
 8004024:	40001800 	.word	0x40001800
 8004028:	40001c00 	.word	0x40001c00
 800402c:	40002000 	.word	0x40002000

08004030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <TIM_OC1_SetConfig+0xd8>)
 800405c:	4013      	ands	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 0302 	bic.w	r3, r3, #2
 8004078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a21      	ldr	r2, [pc, #132]	; (800410c <TIM_OC1_SetConfig+0xdc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_OC1_SetConfig+0x64>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a20      	ldr	r2, [pc, #128]	; (8004110 <TIM_OC1_SetConfig+0xe0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d10c      	bne.n	80040ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0308 	bic.w	r3, r3, #8
 800409a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f023 0304 	bic.w	r3, r3, #4
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a16      	ldr	r2, [pc, #88]	; (800410c <TIM_OC1_SetConfig+0xdc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC1_SetConfig+0x8e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a15      	ldr	r2, [pc, #84]	; (8004110 <TIM_OC1_SetConfig+0xe0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d111      	bne.n	80040e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	621a      	str	r2, [r3, #32]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	fffeff8f 	.word	0xfffeff8f
 800410c:	40010000 	.word	0x40010000
 8004110:	40010400 	.word	0x40010400

08004114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0210 	bic.w	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <TIM_OC2_SetConfig+0xe4>)
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0320 	bic.w	r3, r3, #32
 800415e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a23      	ldr	r2, [pc, #140]	; (80041fc <TIM_OC2_SetConfig+0xe8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC2_SetConfig+0x68>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a22      	ldr	r2, [pc, #136]	; (8004200 <TIM_OC2_SetConfig+0xec>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d10d      	bne.n	8004198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a18      	ldr	r2, [pc, #96]	; (80041fc <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_OC2_SetConfig+0x94>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a17      	ldr	r2, [pc, #92]	; (8004200 <TIM_OC2_SetConfig+0xec>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d113      	bne.n	80041d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	feff8fff 	.word	0xfeff8fff
 80041fc:	40010000 	.word	0x40010000
 8004200:	40010400 	.word	0x40010400

08004204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <TIM_OC3_SetConfig+0xe0>)
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800424c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <TIM_OC3_SetConfig+0xe4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d003      	beq.n	800426a <TIM_OC3_SetConfig+0x66>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a21      	ldr	r2, [pc, #132]	; (80042ec <TIM_OC3_SetConfig+0xe8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10d      	bne.n	8004286 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <TIM_OC3_SetConfig+0xe4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_OC3_SetConfig+0x92>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a16      	ldr	r2, [pc, #88]	; (80042ec <TIM_OC3_SetConfig+0xe8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d113      	bne.n	80042be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800429c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	621a      	str	r2, [r3, #32]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	fffeff8f 	.word	0xfffeff8f
 80042e8:	40010000 	.word	0x40010000
 80042ec:	40010400 	.word	0x40010400

080042f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <TIM_OC4_SetConfig+0xa4>)
 800431c:	4013      	ands	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	031b      	lsls	r3, r3, #12
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a13      	ldr	r2, [pc, #76]	; (8004398 <TIM_OC4_SetConfig+0xa8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_OC4_SetConfig+0x68>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <TIM_OC4_SetConfig+0xac>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d109      	bne.n	800436c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	019b      	lsls	r3, r3, #6
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	feff8fff 	.word	0xfeff8fff
 8004398:	40010000 	.word	0x40010000
 800439c:	40010400 	.word	0x40010400

080043a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <TIM_OC5_SetConfig+0x98>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a12      	ldr	r2, [pc, #72]	; (800443c <TIM_OC5_SetConfig+0x9c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d003      	beq.n	80043fe <TIM_OC5_SetConfig+0x5e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a11      	ldr	r2, [pc, #68]	; (8004440 <TIM_OC5_SetConfig+0xa0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d109      	bne.n	8004412 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004404:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	621a      	str	r2, [r3, #32]
}
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	fffeff8f 	.word	0xfffeff8f
 800443c:	40010000 	.word	0x40010000
 8004440:	40010400 	.word	0x40010400

08004444 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <TIM_OC6_SetConfig+0x9c>)
 8004470:	4013      	ands	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	051b      	lsls	r3, r3, #20
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <TIM_OC6_SetConfig+0xa0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_OC6_SetConfig+0x60>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <TIM_OC6_SetConfig+0xa4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d109      	bne.n	80044b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	029b      	lsls	r3, r3, #10
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	feff8fff 	.word	0xfeff8fff
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40010400 	.word	0x40010400

080044ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004500:	2302      	movs	r3, #2
 8004502:	e06d      	b.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a30      	ldr	r2, [pc, #192]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2f      	ldr	r2, [pc, #188]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d108      	bne.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800453e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a20      	ldr	r2, [pc, #128]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d022      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004576:	d01d      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d018      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00e      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d009      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a16      	ldr	r2, [pc, #88]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a15      	ldr	r2, [pc, #84]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10c      	bne.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40010400 	.word	0x40010400
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40014000 	.word	0x40014000
 8004604:	40001800 	.word	0x40001800

08004608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e040      	b.n	800469c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc ff9a 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	; 0x24
 8004634:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8b0 	bl	80047ac <UART_SetConfig>
 800464c:	4603      	mov	r3, r0
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e022      	b.n	800469c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fb08 	bl	8004c74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb8f 	bl	8004db8 <UART_CheckIdleState>
 800469a:	4603      	mov	r3, r0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d171      	bne.n	80047a0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_UART_Transmit+0x24>
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e06a      	b.n	80047a2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2221      	movs	r2, #33	; 0x21
 80046d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046da:	f7fd f8fd 	bl	80018d8 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f8:	d108      	bne.n	800470c <HAL_UART_Transmit+0x68>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e003      	b.n	8004714 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004714:	e02c      	b.n	8004770 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2200      	movs	r2, #0
 800471e:	2180      	movs	r1, #128	; 0x80
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 fb96 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e038      	b.n	80047a2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004744:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	3302      	adds	r3, #2
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	e007      	b.n	800475e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	781a      	ldrb	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3301      	adds	r3, #1
 800475c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1cc      	bne.n	8004716 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fb63 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e005      	b.n	80047a2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4ba6      	ldr	r3, [pc, #664]	; (8004a70 <UART_SetConfig+0x2c4>)
 80047d8:	4013      	ands	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	6979      	ldr	r1, [r7, #20]
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	430a      	orrs	r2, r1
 800481c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a94      	ldr	r2, [pc, #592]	; (8004a74 <UART_SetConfig+0x2c8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d120      	bne.n	800486a <UART_SetConfig+0xbe>
 8004828:	4b93      	ldr	r3, [pc, #588]	; (8004a78 <UART_SetConfig+0x2cc>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b03      	cmp	r3, #3
 8004834:	d816      	bhi.n	8004864 <UART_SetConfig+0xb8>
 8004836:	a201      	add	r2, pc, #4	; (adr r2, 800483c <UART_SetConfig+0x90>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	0800484d 	.word	0x0800484d
 8004840:	08004859 	.word	0x08004859
 8004844:	08004853 	.word	0x08004853
 8004848:	0800485f 	.word	0x0800485f
 800484c:	2301      	movs	r3, #1
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e150      	b.n	8004af4 <UART_SetConfig+0x348>
 8004852:	2302      	movs	r3, #2
 8004854:	77fb      	strb	r3, [r7, #31]
 8004856:	e14d      	b.n	8004af4 <UART_SetConfig+0x348>
 8004858:	2304      	movs	r3, #4
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e14a      	b.n	8004af4 <UART_SetConfig+0x348>
 800485e:	2308      	movs	r3, #8
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e147      	b.n	8004af4 <UART_SetConfig+0x348>
 8004864:	2310      	movs	r3, #16
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e144      	b.n	8004af4 <UART_SetConfig+0x348>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a83      	ldr	r2, [pc, #524]	; (8004a7c <UART_SetConfig+0x2d0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d132      	bne.n	80048da <UART_SetConfig+0x12e>
 8004874:	4b80      	ldr	r3, [pc, #512]	; (8004a78 <UART_SetConfig+0x2cc>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b0c      	cmp	r3, #12
 8004880:	d828      	bhi.n	80048d4 <UART_SetConfig+0x128>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0xdc>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048bd 	.word	0x080048bd
 800488c:	080048d5 	.word	0x080048d5
 8004890:	080048d5 	.word	0x080048d5
 8004894:	080048d5 	.word	0x080048d5
 8004898:	080048c9 	.word	0x080048c9
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048d5 	.word	0x080048d5
 80048a8:	080048c3 	.word	0x080048c3
 80048ac:	080048d5 	.word	0x080048d5
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048d5 	.word	0x080048d5
 80048b8:	080048cf 	.word	0x080048cf
 80048bc:	2300      	movs	r3, #0
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e118      	b.n	8004af4 <UART_SetConfig+0x348>
 80048c2:	2302      	movs	r3, #2
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e115      	b.n	8004af4 <UART_SetConfig+0x348>
 80048c8:	2304      	movs	r3, #4
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e112      	b.n	8004af4 <UART_SetConfig+0x348>
 80048ce:	2308      	movs	r3, #8
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e10f      	b.n	8004af4 <UART_SetConfig+0x348>
 80048d4:	2310      	movs	r3, #16
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e10c      	b.n	8004af4 <UART_SetConfig+0x348>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a68      	ldr	r2, [pc, #416]	; (8004a80 <UART_SetConfig+0x2d4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d120      	bne.n	8004926 <UART_SetConfig+0x17a>
 80048e4:	4b64      	ldr	r3, [pc, #400]	; (8004a78 <UART_SetConfig+0x2cc>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ee:	2b30      	cmp	r3, #48	; 0x30
 80048f0:	d013      	beq.n	800491a <UART_SetConfig+0x16e>
 80048f2:	2b30      	cmp	r3, #48	; 0x30
 80048f4:	d814      	bhi.n	8004920 <UART_SetConfig+0x174>
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d009      	beq.n	800490e <UART_SetConfig+0x162>
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d810      	bhi.n	8004920 <UART_SetConfig+0x174>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <UART_SetConfig+0x15c>
 8004902:	2b10      	cmp	r3, #16
 8004904:	d006      	beq.n	8004914 <UART_SetConfig+0x168>
 8004906:	e00b      	b.n	8004920 <UART_SetConfig+0x174>
 8004908:	2300      	movs	r3, #0
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e0f2      	b.n	8004af4 <UART_SetConfig+0x348>
 800490e:	2302      	movs	r3, #2
 8004910:	77fb      	strb	r3, [r7, #31]
 8004912:	e0ef      	b.n	8004af4 <UART_SetConfig+0x348>
 8004914:	2304      	movs	r3, #4
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e0ec      	b.n	8004af4 <UART_SetConfig+0x348>
 800491a:	2308      	movs	r3, #8
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e0e9      	b.n	8004af4 <UART_SetConfig+0x348>
 8004920:	2310      	movs	r3, #16
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e0e6      	b.n	8004af4 <UART_SetConfig+0x348>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a56      	ldr	r2, [pc, #344]	; (8004a84 <UART_SetConfig+0x2d8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d120      	bne.n	8004972 <UART_SetConfig+0x1c6>
 8004930:	4b51      	ldr	r3, [pc, #324]	; (8004a78 <UART_SetConfig+0x2cc>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800493a:	2bc0      	cmp	r3, #192	; 0xc0
 800493c:	d013      	beq.n	8004966 <UART_SetConfig+0x1ba>
 800493e:	2bc0      	cmp	r3, #192	; 0xc0
 8004940:	d814      	bhi.n	800496c <UART_SetConfig+0x1c0>
 8004942:	2b80      	cmp	r3, #128	; 0x80
 8004944:	d009      	beq.n	800495a <UART_SetConfig+0x1ae>
 8004946:	2b80      	cmp	r3, #128	; 0x80
 8004948:	d810      	bhi.n	800496c <UART_SetConfig+0x1c0>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <UART_SetConfig+0x1a8>
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d006      	beq.n	8004960 <UART_SetConfig+0x1b4>
 8004952:	e00b      	b.n	800496c <UART_SetConfig+0x1c0>
 8004954:	2300      	movs	r3, #0
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e0cc      	b.n	8004af4 <UART_SetConfig+0x348>
 800495a:	2302      	movs	r3, #2
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e0c9      	b.n	8004af4 <UART_SetConfig+0x348>
 8004960:	2304      	movs	r3, #4
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e0c6      	b.n	8004af4 <UART_SetConfig+0x348>
 8004966:	2308      	movs	r3, #8
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e0c3      	b.n	8004af4 <UART_SetConfig+0x348>
 800496c:	2310      	movs	r3, #16
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e0c0      	b.n	8004af4 <UART_SetConfig+0x348>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a44      	ldr	r2, [pc, #272]	; (8004a88 <UART_SetConfig+0x2dc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d125      	bne.n	80049c8 <UART_SetConfig+0x21c>
 800497c:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <UART_SetConfig+0x2cc>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800498a:	d017      	beq.n	80049bc <UART_SetConfig+0x210>
 800498c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004990:	d817      	bhi.n	80049c2 <UART_SetConfig+0x216>
 8004992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004996:	d00b      	beq.n	80049b0 <UART_SetConfig+0x204>
 8004998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499c:	d811      	bhi.n	80049c2 <UART_SetConfig+0x216>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <UART_SetConfig+0x1fe>
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a6:	d006      	beq.n	80049b6 <UART_SetConfig+0x20a>
 80049a8:	e00b      	b.n	80049c2 <UART_SetConfig+0x216>
 80049aa:	2300      	movs	r3, #0
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e0a1      	b.n	8004af4 <UART_SetConfig+0x348>
 80049b0:	2302      	movs	r3, #2
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e09e      	b.n	8004af4 <UART_SetConfig+0x348>
 80049b6:	2304      	movs	r3, #4
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e09b      	b.n	8004af4 <UART_SetConfig+0x348>
 80049bc:	2308      	movs	r3, #8
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e098      	b.n	8004af4 <UART_SetConfig+0x348>
 80049c2:	2310      	movs	r3, #16
 80049c4:	77fb      	strb	r3, [r7, #31]
 80049c6:	e095      	b.n	8004af4 <UART_SetConfig+0x348>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2f      	ldr	r2, [pc, #188]	; (8004a8c <UART_SetConfig+0x2e0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d125      	bne.n	8004a1e <UART_SetConfig+0x272>
 80049d2:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <UART_SetConfig+0x2cc>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049e0:	d017      	beq.n	8004a12 <UART_SetConfig+0x266>
 80049e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049e6:	d817      	bhi.n	8004a18 <UART_SetConfig+0x26c>
 80049e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ec:	d00b      	beq.n	8004a06 <UART_SetConfig+0x25a>
 80049ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f2:	d811      	bhi.n	8004a18 <UART_SetConfig+0x26c>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <UART_SetConfig+0x254>
 80049f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fc:	d006      	beq.n	8004a0c <UART_SetConfig+0x260>
 80049fe:	e00b      	b.n	8004a18 <UART_SetConfig+0x26c>
 8004a00:	2301      	movs	r3, #1
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e076      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a06:	2302      	movs	r3, #2
 8004a08:	77fb      	strb	r3, [r7, #31]
 8004a0a:	e073      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e070      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a12:	2308      	movs	r3, #8
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e06d      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e06a      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <UART_SetConfig+0x2e4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d138      	bne.n	8004a9a <UART_SetConfig+0x2ee>
 8004a28:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <UART_SetConfig+0x2cc>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a36:	d017      	beq.n	8004a68 <UART_SetConfig+0x2bc>
 8004a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a3c:	d82a      	bhi.n	8004a94 <UART_SetConfig+0x2e8>
 8004a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a42:	d00b      	beq.n	8004a5c <UART_SetConfig+0x2b0>
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a48:	d824      	bhi.n	8004a94 <UART_SetConfig+0x2e8>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <UART_SetConfig+0x2aa>
 8004a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a52:	d006      	beq.n	8004a62 <UART_SetConfig+0x2b6>
 8004a54:	e01e      	b.n	8004a94 <UART_SetConfig+0x2e8>
 8004a56:	2300      	movs	r3, #0
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e04b      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e048      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a62:	2304      	movs	r3, #4
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e045      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a68:	2308      	movs	r3, #8
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e042      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a6e:	bf00      	nop
 8004a70:	efff69f3 	.word	0xefff69f3
 8004a74:	40011000 	.word	0x40011000
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40004400 	.word	0x40004400
 8004a80:	40004800 	.word	0x40004800
 8004a84:	40004c00 	.word	0x40004c00
 8004a88:	40005000 	.word	0x40005000
 8004a8c:	40011400 	.word	0x40011400
 8004a90:	40007800 	.word	0x40007800
 8004a94:	2310      	movs	r3, #16
 8004a96:	77fb      	strb	r3, [r7, #31]
 8004a98:	e02c      	b.n	8004af4 <UART_SetConfig+0x348>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a72      	ldr	r2, [pc, #456]	; (8004c68 <UART_SetConfig+0x4bc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d125      	bne.n	8004af0 <UART_SetConfig+0x344>
 8004aa4:	4b71      	ldr	r3, [pc, #452]	; (8004c6c <UART_SetConfig+0x4c0>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aaa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004aae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ab2:	d017      	beq.n	8004ae4 <UART_SetConfig+0x338>
 8004ab4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ab8:	d817      	bhi.n	8004aea <UART_SetConfig+0x33e>
 8004aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abe:	d00b      	beq.n	8004ad8 <UART_SetConfig+0x32c>
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac4:	d811      	bhi.n	8004aea <UART_SetConfig+0x33e>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <UART_SetConfig+0x326>
 8004aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ace:	d006      	beq.n	8004ade <UART_SetConfig+0x332>
 8004ad0:	e00b      	b.n	8004aea <UART_SetConfig+0x33e>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e00d      	b.n	8004af4 <UART_SetConfig+0x348>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e00a      	b.n	8004af4 <UART_SetConfig+0x348>
 8004ade:	2304      	movs	r3, #4
 8004ae0:	77fb      	strb	r3, [r7, #31]
 8004ae2:	e007      	b.n	8004af4 <UART_SetConfig+0x348>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e004      	b.n	8004af4 <UART_SetConfig+0x348>
 8004aea:	2310      	movs	r3, #16
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e001      	b.n	8004af4 <UART_SetConfig+0x348>
 8004af0:	2310      	movs	r3, #16
 8004af2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afc:	d15b      	bne.n	8004bb6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d828      	bhi.n	8004b56 <UART_SetConfig+0x3aa>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x360>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe fc22 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8004b34:	61b8      	str	r0, [r7, #24]
        break;
 8004b36:	e013      	b.n	8004b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fe fc32 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8004b3c:	61b8      	str	r0, [r7, #24]
        break;
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b4b      	ldr	r3, [pc, #300]	; (8004c70 <UART_SetConfig+0x4c4>)
 8004b42:	61bb      	str	r3, [r7, #24]
        break;
 8004b44:	e00c      	b.n	8004b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fe fb45 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8004b4a:	61b8      	str	r0, [r7, #24]
        break;
 8004b4c:	e008      	b.n	8004b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b52:	61bb      	str	r3, [r7, #24]
        break;
 8004b54:	e004      	b.n	8004b60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d074      	beq.n	8004c50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	005a      	lsls	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d916      	bls.n	8004bb0 <UART_SetConfig+0x404>
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d212      	bcs.n	8004bb0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f023 030f 	bic.w	r3, r3, #15
 8004b92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	89fb      	ldrh	r3, [r7, #14]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	89fa      	ldrh	r2, [r7, #14]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	e04f      	b.n	8004c50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	77bb      	strb	r3, [r7, #30]
 8004bb4:	e04c      	b.n	8004c50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bb6:	7ffb      	ldrb	r3, [r7, #31]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d828      	bhi.n	8004c0e <UART_SetConfig+0x462>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0x418>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	08004c0f 	.word	0x08004c0f
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004c0f 	.word	0x08004c0f
 8004bdc:	08004c0f 	.word	0x08004c0f
 8004be0:	08004c0f 	.word	0x08004c0f
 8004be4:	08004c07 	.word	0x08004c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fe fbc6 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8004bec:	61b8      	str	r0, [r7, #24]
        break;
 8004bee:	e013      	b.n	8004c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7fe fbd6 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8004bf4:	61b8      	str	r0, [r7, #24]
        break;
 8004bf6:	e00f      	b.n	8004c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <UART_SetConfig+0x4c4>)
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e00c      	b.n	8004c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfe:	f7fe fae9 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8004c02:	61b8      	str	r0, [r7, #24]
        break;
 8004c04:	e008      	b.n	8004c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c0a:	61bb      	str	r3, [r7, #24]
        break;
 8004c0c:	e004      	b.n	8004c18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	77bb      	strb	r3, [r7, #30]
        break;
 8004c16:	bf00      	nop
    }

    if (pclk != 0U)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	085a      	lsrs	r2, r3, #1
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	441a      	add	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b0f      	cmp	r3, #15
 8004c36:	d909      	bls.n	8004c4c <UART_SetConfig+0x4a0>
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3e:	d205      	bcs.n	8004c4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	e001      	b.n	8004c50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40007c00 	.word	0x40007c00
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	00f42400 	.word	0x00f42400

08004c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01a      	beq.n	8004d8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d72:	d10a      	bne.n	8004d8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	605a      	str	r2, [r3, #4]
  }
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dc8:	f7fc fd86 	bl	80018d8 <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d10e      	bne.n	8004dfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f831 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e027      	b.n	8004e4a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d10e      	bne.n	8004e26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f81b 	bl	8004e52 <UART_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e011      	b.n	8004e4a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b09c      	sub	sp, #112	; 0x70
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e62:	e0a7      	b.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6a:	f000 80a3 	beq.w	8004fb4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fc fd33 	bl	80018d8 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d13f      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e98:	667b      	str	r3, [r7, #100]	; 0x64
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e6      	bne.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ed6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ed8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e5      	bne.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e068      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d050      	beq.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f20:	d148      	bne.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e6      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3308      	adds	r3, #8
 8004f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f7e:	623a      	str	r2, [r7, #32]
 8004f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	69f9      	ldr	r1, [r7, #28]
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e5      	bne.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e010      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	f43f af48 	beq.w	8004e64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3770      	adds	r7, #112	; 0x70
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <siprintf>:
 8004fe0:	b40e      	push	{r1, r2, r3}
 8004fe2:	b500      	push	{lr}
 8004fe4:	b09c      	sub	sp, #112	; 0x70
 8004fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8004fe8:	9002      	str	r0, [sp, #8]
 8004fea:	9006      	str	r0, [sp, #24]
 8004fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ff0:	4809      	ldr	r0, [pc, #36]	; (8005018 <siprintf+0x38>)
 8004ff2:	9107      	str	r1, [sp, #28]
 8004ff4:	9104      	str	r1, [sp, #16]
 8004ff6:	4909      	ldr	r1, [pc, #36]	; (800501c <siprintf+0x3c>)
 8004ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ffc:	9105      	str	r1, [sp, #20]
 8004ffe:	6800      	ldr	r0, [r0, #0]
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	a902      	add	r1, sp, #8
 8005004:	f000 f9ba 	bl	800537c <_svfiprintf_r>
 8005008:	9b02      	ldr	r3, [sp, #8]
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	b01c      	add	sp, #112	; 0x70
 8005010:	f85d eb04 	ldr.w	lr, [sp], #4
 8005014:	b003      	add	sp, #12
 8005016:	4770      	bx	lr
 8005018:	20000064 	.word	0x20000064
 800501c:	ffff0208 	.word	0xffff0208

08005020 <std>:
 8005020:	2300      	movs	r3, #0
 8005022:	b510      	push	{r4, lr}
 8005024:	4604      	mov	r4, r0
 8005026:	e9c0 3300 	strd	r3, r3, [r0]
 800502a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800502e:	6083      	str	r3, [r0, #8]
 8005030:	8181      	strh	r1, [r0, #12]
 8005032:	6643      	str	r3, [r0, #100]	; 0x64
 8005034:	81c2      	strh	r2, [r0, #14]
 8005036:	6183      	str	r3, [r0, #24]
 8005038:	4619      	mov	r1, r3
 800503a:	2208      	movs	r2, #8
 800503c:	305c      	adds	r0, #92	; 0x5c
 800503e:	f000 f90d 	bl	800525c <memset>
 8005042:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <std+0x58>)
 8005044:	6263      	str	r3, [r4, #36]	; 0x24
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <std+0x5c>)
 8005048:	62a3      	str	r3, [r4, #40]	; 0x28
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <std+0x60>)
 800504c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800504e:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <std+0x64>)
 8005050:	6323      	str	r3, [r4, #48]	; 0x30
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <std+0x68>)
 8005054:	6224      	str	r4, [r4, #32]
 8005056:	429c      	cmp	r4, r3
 8005058:	d006      	beq.n	8005068 <std+0x48>
 800505a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800505e:	4294      	cmp	r4, r2
 8005060:	d002      	beq.n	8005068 <std+0x48>
 8005062:	33d0      	adds	r3, #208	; 0xd0
 8005064:	429c      	cmp	r4, r3
 8005066:	d105      	bne.n	8005074 <std+0x54>
 8005068:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800506c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005070:	f000 b926 	b.w	80052c0 <__retarget_lock_init_recursive>
 8005074:	bd10      	pop	{r4, pc}
 8005076:	bf00      	nop
 8005078:	08005b4d 	.word	0x08005b4d
 800507c:	08005b6f 	.word	0x08005b6f
 8005080:	08005ba7 	.word	0x08005ba7
 8005084:	08005bcb 	.word	0x08005bcb
 8005088:	200001f4 	.word	0x200001f4

0800508c <stdio_exit_handler>:
 800508c:	4a02      	ldr	r2, [pc, #8]	; (8005098 <stdio_exit_handler+0xc>)
 800508e:	4903      	ldr	r1, [pc, #12]	; (800509c <stdio_exit_handler+0x10>)
 8005090:	4803      	ldr	r0, [pc, #12]	; (80050a0 <stdio_exit_handler+0x14>)
 8005092:	f000 b869 	b.w	8005168 <_fwalk_sglue>
 8005096:	bf00      	nop
 8005098:	2000000c 	.word	0x2000000c
 800509c:	08005ae5 	.word	0x08005ae5
 80050a0:	20000018 	.word	0x20000018

080050a4 <cleanup_stdio>:
 80050a4:	6841      	ldr	r1, [r0, #4]
 80050a6:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <cleanup_stdio+0x34>)
 80050a8:	4299      	cmp	r1, r3
 80050aa:	b510      	push	{r4, lr}
 80050ac:	4604      	mov	r4, r0
 80050ae:	d001      	beq.n	80050b4 <cleanup_stdio+0x10>
 80050b0:	f000 fd18 	bl	8005ae4 <_fflush_r>
 80050b4:	68a1      	ldr	r1, [r4, #8]
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <cleanup_stdio+0x38>)
 80050b8:	4299      	cmp	r1, r3
 80050ba:	d002      	beq.n	80050c2 <cleanup_stdio+0x1e>
 80050bc:	4620      	mov	r0, r4
 80050be:	f000 fd11 	bl	8005ae4 <_fflush_r>
 80050c2:	68e1      	ldr	r1, [r4, #12]
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <cleanup_stdio+0x3c>)
 80050c6:	4299      	cmp	r1, r3
 80050c8:	d004      	beq.n	80050d4 <cleanup_stdio+0x30>
 80050ca:	4620      	mov	r0, r4
 80050cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d0:	f000 bd08 	b.w	8005ae4 <_fflush_r>
 80050d4:	bd10      	pop	{r4, pc}
 80050d6:	bf00      	nop
 80050d8:	200001f4 	.word	0x200001f4
 80050dc:	2000025c 	.word	0x2000025c
 80050e0:	200002c4 	.word	0x200002c4

080050e4 <global_stdio_init.part.0>:
 80050e4:	b510      	push	{r4, lr}
 80050e6:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <global_stdio_init.part.0+0x30>)
 80050e8:	4c0b      	ldr	r4, [pc, #44]	; (8005118 <global_stdio_init.part.0+0x34>)
 80050ea:	4a0c      	ldr	r2, [pc, #48]	; (800511c <global_stdio_init.part.0+0x38>)
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	4620      	mov	r0, r4
 80050f0:	2200      	movs	r2, #0
 80050f2:	2104      	movs	r1, #4
 80050f4:	f7ff ff94 	bl	8005020 <std>
 80050f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80050fc:	2201      	movs	r2, #1
 80050fe:	2109      	movs	r1, #9
 8005100:	f7ff ff8e 	bl	8005020 <std>
 8005104:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005108:	2202      	movs	r2, #2
 800510a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800510e:	2112      	movs	r1, #18
 8005110:	f7ff bf86 	b.w	8005020 <std>
 8005114:	2000032c 	.word	0x2000032c
 8005118:	200001f4 	.word	0x200001f4
 800511c:	0800508d 	.word	0x0800508d

08005120 <__sfp_lock_acquire>:
 8005120:	4801      	ldr	r0, [pc, #4]	; (8005128 <__sfp_lock_acquire+0x8>)
 8005122:	f000 b8ce 	b.w	80052c2 <__retarget_lock_acquire_recursive>
 8005126:	bf00      	nop
 8005128:	20000331 	.word	0x20000331

0800512c <__sfp_lock_release>:
 800512c:	4801      	ldr	r0, [pc, #4]	; (8005134 <__sfp_lock_release+0x8>)
 800512e:	f000 b8c9 	b.w	80052c4 <__retarget_lock_release_recursive>
 8005132:	bf00      	nop
 8005134:	20000331 	.word	0x20000331

08005138 <__sinit>:
 8005138:	b510      	push	{r4, lr}
 800513a:	4604      	mov	r4, r0
 800513c:	f7ff fff0 	bl	8005120 <__sfp_lock_acquire>
 8005140:	6a23      	ldr	r3, [r4, #32]
 8005142:	b11b      	cbz	r3, 800514c <__sinit+0x14>
 8005144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005148:	f7ff bff0 	b.w	800512c <__sfp_lock_release>
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <__sinit+0x28>)
 800514e:	6223      	str	r3, [r4, #32]
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <__sinit+0x2c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f5      	bne.n	8005144 <__sinit+0xc>
 8005158:	f7ff ffc4 	bl	80050e4 <global_stdio_init.part.0>
 800515c:	e7f2      	b.n	8005144 <__sinit+0xc>
 800515e:	bf00      	nop
 8005160:	080050a5 	.word	0x080050a5
 8005164:	2000032c 	.word	0x2000032c

08005168 <_fwalk_sglue>:
 8005168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800516c:	4607      	mov	r7, r0
 800516e:	4688      	mov	r8, r1
 8005170:	4614      	mov	r4, r2
 8005172:	2600      	movs	r6, #0
 8005174:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005178:	f1b9 0901 	subs.w	r9, r9, #1
 800517c:	d505      	bpl.n	800518a <_fwalk_sglue+0x22>
 800517e:	6824      	ldr	r4, [r4, #0]
 8005180:	2c00      	cmp	r4, #0
 8005182:	d1f7      	bne.n	8005174 <_fwalk_sglue+0xc>
 8005184:	4630      	mov	r0, r6
 8005186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800518a:	89ab      	ldrh	r3, [r5, #12]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d907      	bls.n	80051a0 <_fwalk_sglue+0x38>
 8005190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005194:	3301      	adds	r3, #1
 8005196:	d003      	beq.n	80051a0 <_fwalk_sglue+0x38>
 8005198:	4629      	mov	r1, r5
 800519a:	4638      	mov	r0, r7
 800519c:	47c0      	blx	r8
 800519e:	4306      	orrs	r6, r0
 80051a0:	3568      	adds	r5, #104	; 0x68
 80051a2:	e7e9      	b.n	8005178 <_fwalk_sglue+0x10>

080051a4 <_puts_r>:
 80051a4:	6a03      	ldr	r3, [r0, #32]
 80051a6:	b570      	push	{r4, r5, r6, lr}
 80051a8:	6884      	ldr	r4, [r0, #8]
 80051aa:	4605      	mov	r5, r0
 80051ac:	460e      	mov	r6, r1
 80051ae:	b90b      	cbnz	r3, 80051b4 <_puts_r+0x10>
 80051b0:	f7ff ffc2 	bl	8005138 <__sinit>
 80051b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051b6:	07db      	lsls	r3, r3, #31
 80051b8:	d405      	bmi.n	80051c6 <_puts_r+0x22>
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	0598      	lsls	r0, r3, #22
 80051be:	d402      	bmi.n	80051c6 <_puts_r+0x22>
 80051c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051c2:	f000 f87e 	bl	80052c2 <__retarget_lock_acquire_recursive>
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	0719      	lsls	r1, r3, #28
 80051ca:	d513      	bpl.n	80051f4 <_puts_r+0x50>
 80051cc:	6923      	ldr	r3, [r4, #16]
 80051ce:	b18b      	cbz	r3, 80051f4 <_puts_r+0x50>
 80051d0:	3e01      	subs	r6, #1
 80051d2:	68a3      	ldr	r3, [r4, #8]
 80051d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051d8:	3b01      	subs	r3, #1
 80051da:	60a3      	str	r3, [r4, #8]
 80051dc:	b9e9      	cbnz	r1, 800521a <_puts_r+0x76>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da2e      	bge.n	8005240 <_puts_r+0x9c>
 80051e2:	4622      	mov	r2, r4
 80051e4:	210a      	movs	r1, #10
 80051e6:	4628      	mov	r0, r5
 80051e8:	f000 fd22 	bl	8005c30 <__swbuf_r>
 80051ec:	3001      	adds	r0, #1
 80051ee:	d007      	beq.n	8005200 <_puts_r+0x5c>
 80051f0:	250a      	movs	r5, #10
 80051f2:	e007      	b.n	8005204 <_puts_r+0x60>
 80051f4:	4621      	mov	r1, r4
 80051f6:	4628      	mov	r0, r5
 80051f8:	f000 fd58 	bl	8005cac <__swsetup_r>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d0e7      	beq.n	80051d0 <_puts_r+0x2c>
 8005200:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005206:	07da      	lsls	r2, r3, #31
 8005208:	d405      	bmi.n	8005216 <_puts_r+0x72>
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	059b      	lsls	r3, r3, #22
 800520e:	d402      	bmi.n	8005216 <_puts_r+0x72>
 8005210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005212:	f000 f857 	bl	80052c4 <__retarget_lock_release_recursive>
 8005216:	4628      	mov	r0, r5
 8005218:	bd70      	pop	{r4, r5, r6, pc}
 800521a:	2b00      	cmp	r3, #0
 800521c:	da04      	bge.n	8005228 <_puts_r+0x84>
 800521e:	69a2      	ldr	r2, [r4, #24]
 8005220:	429a      	cmp	r2, r3
 8005222:	dc06      	bgt.n	8005232 <_puts_r+0x8e>
 8005224:	290a      	cmp	r1, #10
 8005226:	d004      	beq.n	8005232 <_puts_r+0x8e>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	6022      	str	r2, [r4, #0]
 800522e:	7019      	strb	r1, [r3, #0]
 8005230:	e7cf      	b.n	80051d2 <_puts_r+0x2e>
 8005232:	4622      	mov	r2, r4
 8005234:	4628      	mov	r0, r5
 8005236:	f000 fcfb 	bl	8005c30 <__swbuf_r>
 800523a:	3001      	adds	r0, #1
 800523c:	d1c9      	bne.n	80051d2 <_puts_r+0x2e>
 800523e:	e7df      	b.n	8005200 <_puts_r+0x5c>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	250a      	movs	r5, #10
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	6022      	str	r2, [r4, #0]
 8005248:	701d      	strb	r5, [r3, #0]
 800524a:	e7db      	b.n	8005204 <_puts_r+0x60>

0800524c <puts>:
 800524c:	4b02      	ldr	r3, [pc, #8]	; (8005258 <puts+0xc>)
 800524e:	4601      	mov	r1, r0
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	f7ff bfa7 	b.w	80051a4 <_puts_r>
 8005256:	bf00      	nop
 8005258:	20000064 	.word	0x20000064

0800525c <memset>:
 800525c:	4402      	add	r2, r0
 800525e:	4603      	mov	r3, r0
 8005260:	4293      	cmp	r3, r2
 8005262:	d100      	bne.n	8005266 <memset+0xa>
 8005264:	4770      	bx	lr
 8005266:	f803 1b01 	strb.w	r1, [r3], #1
 800526a:	e7f9      	b.n	8005260 <memset+0x4>

0800526c <__errno>:
 800526c:	4b01      	ldr	r3, [pc, #4]	; (8005274 <__errno+0x8>)
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000064 	.word	0x20000064

08005278 <__libc_init_array>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4d0d      	ldr	r5, [pc, #52]	; (80052b0 <__libc_init_array+0x38>)
 800527c:	4c0d      	ldr	r4, [pc, #52]	; (80052b4 <__libc_init_array+0x3c>)
 800527e:	1b64      	subs	r4, r4, r5
 8005280:	10a4      	asrs	r4, r4, #2
 8005282:	2600      	movs	r6, #0
 8005284:	42a6      	cmp	r6, r4
 8005286:	d109      	bne.n	800529c <__libc_init_array+0x24>
 8005288:	4d0b      	ldr	r5, [pc, #44]	; (80052b8 <__libc_init_array+0x40>)
 800528a:	4c0c      	ldr	r4, [pc, #48]	; (80052bc <__libc_init_array+0x44>)
 800528c:	f000 febc 	bl	8006008 <_init>
 8005290:	1b64      	subs	r4, r4, r5
 8005292:	10a4      	asrs	r4, r4, #2
 8005294:	2600      	movs	r6, #0
 8005296:	42a6      	cmp	r6, r4
 8005298:	d105      	bne.n	80052a6 <__libc_init_array+0x2e>
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a0:	4798      	blx	r3
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7ee      	b.n	8005284 <__libc_init_array+0xc>
 80052a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052aa:	4798      	blx	r3
 80052ac:	3601      	adds	r6, #1
 80052ae:	e7f2      	b.n	8005296 <__libc_init_array+0x1e>
 80052b0:	080060bc 	.word	0x080060bc
 80052b4:	080060bc 	.word	0x080060bc
 80052b8:	080060bc 	.word	0x080060bc
 80052bc:	080060c0 	.word	0x080060c0

080052c0 <__retarget_lock_init_recursive>:
 80052c0:	4770      	bx	lr

080052c2 <__retarget_lock_acquire_recursive>:
 80052c2:	4770      	bx	lr

080052c4 <__retarget_lock_release_recursive>:
 80052c4:	4770      	bx	lr

080052c6 <__ssputs_r>:
 80052c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ca:	688e      	ldr	r6, [r1, #8]
 80052cc:	461f      	mov	r7, r3
 80052ce:	42be      	cmp	r6, r7
 80052d0:	680b      	ldr	r3, [r1, #0]
 80052d2:	4682      	mov	sl, r0
 80052d4:	460c      	mov	r4, r1
 80052d6:	4690      	mov	r8, r2
 80052d8:	d82c      	bhi.n	8005334 <__ssputs_r+0x6e>
 80052da:	898a      	ldrh	r2, [r1, #12]
 80052dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052e0:	d026      	beq.n	8005330 <__ssputs_r+0x6a>
 80052e2:	6965      	ldr	r5, [r4, #20]
 80052e4:	6909      	ldr	r1, [r1, #16]
 80052e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052ea:	eba3 0901 	sub.w	r9, r3, r1
 80052ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052f2:	1c7b      	adds	r3, r7, #1
 80052f4:	444b      	add	r3, r9
 80052f6:	106d      	asrs	r5, r5, #1
 80052f8:	429d      	cmp	r5, r3
 80052fa:	bf38      	it	cc
 80052fc:	461d      	movcc	r5, r3
 80052fe:	0553      	lsls	r3, r2, #21
 8005300:	d527      	bpl.n	8005352 <__ssputs_r+0x8c>
 8005302:	4629      	mov	r1, r5
 8005304:	f000 f958 	bl	80055b8 <_malloc_r>
 8005308:	4606      	mov	r6, r0
 800530a:	b360      	cbz	r0, 8005366 <__ssputs_r+0xa0>
 800530c:	6921      	ldr	r1, [r4, #16]
 800530e:	464a      	mov	r2, r9
 8005310:	f000 fe18 	bl	8005f44 <memcpy>
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800531a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	6126      	str	r6, [r4, #16]
 8005322:	6165      	str	r5, [r4, #20]
 8005324:	444e      	add	r6, r9
 8005326:	eba5 0509 	sub.w	r5, r5, r9
 800532a:	6026      	str	r6, [r4, #0]
 800532c:	60a5      	str	r5, [r4, #8]
 800532e:	463e      	mov	r6, r7
 8005330:	42be      	cmp	r6, r7
 8005332:	d900      	bls.n	8005336 <__ssputs_r+0x70>
 8005334:	463e      	mov	r6, r7
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	4632      	mov	r2, r6
 800533a:	4641      	mov	r1, r8
 800533c:	f000 fd70 	bl	8005e20 <memmove>
 8005340:	68a3      	ldr	r3, [r4, #8]
 8005342:	1b9b      	subs	r3, r3, r6
 8005344:	60a3      	str	r3, [r4, #8]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	4433      	add	r3, r6
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	2000      	movs	r0, #0
 800534e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005352:	462a      	mov	r2, r5
 8005354:	f000 fc3d 	bl	8005bd2 <_realloc_r>
 8005358:	4606      	mov	r6, r0
 800535a:	2800      	cmp	r0, #0
 800535c:	d1e0      	bne.n	8005320 <__ssputs_r+0x5a>
 800535e:	6921      	ldr	r1, [r4, #16]
 8005360:	4650      	mov	r0, sl
 8005362:	f000 fdfd 	bl	8005f60 <_free_r>
 8005366:	230c      	movs	r3, #12
 8005368:	f8ca 3000 	str.w	r3, [sl]
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005372:	81a3      	strh	r3, [r4, #12]
 8005374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005378:	e7e9      	b.n	800534e <__ssputs_r+0x88>
	...

0800537c <_svfiprintf_r>:
 800537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005380:	4698      	mov	r8, r3
 8005382:	898b      	ldrh	r3, [r1, #12]
 8005384:	061b      	lsls	r3, r3, #24
 8005386:	b09d      	sub	sp, #116	; 0x74
 8005388:	4607      	mov	r7, r0
 800538a:	460d      	mov	r5, r1
 800538c:	4614      	mov	r4, r2
 800538e:	d50e      	bpl.n	80053ae <_svfiprintf_r+0x32>
 8005390:	690b      	ldr	r3, [r1, #16]
 8005392:	b963      	cbnz	r3, 80053ae <_svfiprintf_r+0x32>
 8005394:	2140      	movs	r1, #64	; 0x40
 8005396:	f000 f90f 	bl	80055b8 <_malloc_r>
 800539a:	6028      	str	r0, [r5, #0]
 800539c:	6128      	str	r0, [r5, #16]
 800539e:	b920      	cbnz	r0, 80053aa <_svfiprintf_r+0x2e>
 80053a0:	230c      	movs	r3, #12
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053a8:	e0d0      	b.n	800554c <_svfiprintf_r+0x1d0>
 80053aa:	2340      	movs	r3, #64	; 0x40
 80053ac:	616b      	str	r3, [r5, #20]
 80053ae:	2300      	movs	r3, #0
 80053b0:	9309      	str	r3, [sp, #36]	; 0x24
 80053b2:	2320      	movs	r3, #32
 80053b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80053bc:	2330      	movs	r3, #48	; 0x30
 80053be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005564 <_svfiprintf_r+0x1e8>
 80053c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053c6:	f04f 0901 	mov.w	r9, #1
 80053ca:	4623      	mov	r3, r4
 80053cc:	469a      	mov	sl, r3
 80053ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053d2:	b10a      	cbz	r2, 80053d8 <_svfiprintf_r+0x5c>
 80053d4:	2a25      	cmp	r2, #37	; 0x25
 80053d6:	d1f9      	bne.n	80053cc <_svfiprintf_r+0x50>
 80053d8:	ebba 0b04 	subs.w	fp, sl, r4
 80053dc:	d00b      	beq.n	80053f6 <_svfiprintf_r+0x7a>
 80053de:	465b      	mov	r3, fp
 80053e0:	4622      	mov	r2, r4
 80053e2:	4629      	mov	r1, r5
 80053e4:	4638      	mov	r0, r7
 80053e6:	f7ff ff6e 	bl	80052c6 <__ssputs_r>
 80053ea:	3001      	adds	r0, #1
 80053ec:	f000 80a9 	beq.w	8005542 <_svfiprintf_r+0x1c6>
 80053f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053f2:	445a      	add	r2, fp
 80053f4:	9209      	str	r2, [sp, #36]	; 0x24
 80053f6:	f89a 3000 	ldrb.w	r3, [sl]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80a1 	beq.w	8005542 <_svfiprintf_r+0x1c6>
 8005400:	2300      	movs	r3, #0
 8005402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800540a:	f10a 0a01 	add.w	sl, sl, #1
 800540e:	9304      	str	r3, [sp, #16]
 8005410:	9307      	str	r3, [sp, #28]
 8005412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005416:	931a      	str	r3, [sp, #104]	; 0x68
 8005418:	4654      	mov	r4, sl
 800541a:	2205      	movs	r2, #5
 800541c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005420:	4850      	ldr	r0, [pc, #320]	; (8005564 <_svfiprintf_r+0x1e8>)
 8005422:	f7fa ff0d 	bl	8000240 <memchr>
 8005426:	9a04      	ldr	r2, [sp, #16]
 8005428:	b9d8      	cbnz	r0, 8005462 <_svfiprintf_r+0xe6>
 800542a:	06d0      	lsls	r0, r2, #27
 800542c:	bf44      	itt	mi
 800542e:	2320      	movmi	r3, #32
 8005430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005434:	0711      	lsls	r1, r2, #28
 8005436:	bf44      	itt	mi
 8005438:	232b      	movmi	r3, #43	; 0x2b
 800543a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800543e:	f89a 3000 	ldrb.w	r3, [sl]
 8005442:	2b2a      	cmp	r3, #42	; 0x2a
 8005444:	d015      	beq.n	8005472 <_svfiprintf_r+0xf6>
 8005446:	9a07      	ldr	r2, [sp, #28]
 8005448:	4654      	mov	r4, sl
 800544a:	2000      	movs	r0, #0
 800544c:	f04f 0c0a 	mov.w	ip, #10
 8005450:	4621      	mov	r1, r4
 8005452:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005456:	3b30      	subs	r3, #48	; 0x30
 8005458:	2b09      	cmp	r3, #9
 800545a:	d94d      	bls.n	80054f8 <_svfiprintf_r+0x17c>
 800545c:	b1b0      	cbz	r0, 800548c <_svfiprintf_r+0x110>
 800545e:	9207      	str	r2, [sp, #28]
 8005460:	e014      	b.n	800548c <_svfiprintf_r+0x110>
 8005462:	eba0 0308 	sub.w	r3, r0, r8
 8005466:	fa09 f303 	lsl.w	r3, r9, r3
 800546a:	4313      	orrs	r3, r2
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	46a2      	mov	sl, r4
 8005470:	e7d2      	b.n	8005418 <_svfiprintf_r+0x9c>
 8005472:	9b03      	ldr	r3, [sp, #12]
 8005474:	1d19      	adds	r1, r3, #4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	9103      	str	r1, [sp, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	bfbb      	ittet	lt
 800547e:	425b      	neglt	r3, r3
 8005480:	f042 0202 	orrlt.w	r2, r2, #2
 8005484:	9307      	strge	r3, [sp, #28]
 8005486:	9307      	strlt	r3, [sp, #28]
 8005488:	bfb8      	it	lt
 800548a:	9204      	strlt	r2, [sp, #16]
 800548c:	7823      	ldrb	r3, [r4, #0]
 800548e:	2b2e      	cmp	r3, #46	; 0x2e
 8005490:	d10c      	bne.n	80054ac <_svfiprintf_r+0x130>
 8005492:	7863      	ldrb	r3, [r4, #1]
 8005494:	2b2a      	cmp	r3, #42	; 0x2a
 8005496:	d134      	bne.n	8005502 <_svfiprintf_r+0x186>
 8005498:	9b03      	ldr	r3, [sp, #12]
 800549a:	1d1a      	adds	r2, r3, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	9203      	str	r2, [sp, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bfb8      	it	lt
 80054a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054a8:	3402      	adds	r4, #2
 80054aa:	9305      	str	r3, [sp, #20]
 80054ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005574 <_svfiprintf_r+0x1f8>
 80054b0:	7821      	ldrb	r1, [r4, #0]
 80054b2:	2203      	movs	r2, #3
 80054b4:	4650      	mov	r0, sl
 80054b6:	f7fa fec3 	bl	8000240 <memchr>
 80054ba:	b138      	cbz	r0, 80054cc <_svfiprintf_r+0x150>
 80054bc:	9b04      	ldr	r3, [sp, #16]
 80054be:	eba0 000a 	sub.w	r0, r0, sl
 80054c2:	2240      	movs	r2, #64	; 0x40
 80054c4:	4082      	lsls	r2, r0
 80054c6:	4313      	orrs	r3, r2
 80054c8:	3401      	adds	r4, #1
 80054ca:	9304      	str	r3, [sp, #16]
 80054cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d0:	4825      	ldr	r0, [pc, #148]	; (8005568 <_svfiprintf_r+0x1ec>)
 80054d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054d6:	2206      	movs	r2, #6
 80054d8:	f7fa feb2 	bl	8000240 <memchr>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d038      	beq.n	8005552 <_svfiprintf_r+0x1d6>
 80054e0:	4b22      	ldr	r3, [pc, #136]	; (800556c <_svfiprintf_r+0x1f0>)
 80054e2:	bb1b      	cbnz	r3, 800552c <_svfiprintf_r+0x1b0>
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	3307      	adds	r3, #7
 80054e8:	f023 0307 	bic.w	r3, r3, #7
 80054ec:	3308      	adds	r3, #8
 80054ee:	9303      	str	r3, [sp, #12]
 80054f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f2:	4433      	add	r3, r6
 80054f4:	9309      	str	r3, [sp, #36]	; 0x24
 80054f6:	e768      	b.n	80053ca <_svfiprintf_r+0x4e>
 80054f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80054fc:	460c      	mov	r4, r1
 80054fe:	2001      	movs	r0, #1
 8005500:	e7a6      	b.n	8005450 <_svfiprintf_r+0xd4>
 8005502:	2300      	movs	r3, #0
 8005504:	3401      	adds	r4, #1
 8005506:	9305      	str	r3, [sp, #20]
 8005508:	4619      	mov	r1, r3
 800550a:	f04f 0c0a 	mov.w	ip, #10
 800550e:	4620      	mov	r0, r4
 8005510:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005514:	3a30      	subs	r2, #48	; 0x30
 8005516:	2a09      	cmp	r2, #9
 8005518:	d903      	bls.n	8005522 <_svfiprintf_r+0x1a6>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0c6      	beq.n	80054ac <_svfiprintf_r+0x130>
 800551e:	9105      	str	r1, [sp, #20]
 8005520:	e7c4      	b.n	80054ac <_svfiprintf_r+0x130>
 8005522:	fb0c 2101 	mla	r1, ip, r1, r2
 8005526:	4604      	mov	r4, r0
 8005528:	2301      	movs	r3, #1
 800552a:	e7f0      	b.n	800550e <_svfiprintf_r+0x192>
 800552c:	ab03      	add	r3, sp, #12
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	462a      	mov	r2, r5
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <_svfiprintf_r+0x1f4>)
 8005534:	a904      	add	r1, sp, #16
 8005536:	4638      	mov	r0, r7
 8005538:	f3af 8000 	nop.w
 800553c:	1c42      	adds	r2, r0, #1
 800553e:	4606      	mov	r6, r0
 8005540:	d1d6      	bne.n	80054f0 <_svfiprintf_r+0x174>
 8005542:	89ab      	ldrh	r3, [r5, #12]
 8005544:	065b      	lsls	r3, r3, #25
 8005546:	f53f af2d 	bmi.w	80053a4 <_svfiprintf_r+0x28>
 800554a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800554c:	b01d      	add	sp, #116	; 0x74
 800554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005552:	ab03      	add	r3, sp, #12
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	462a      	mov	r2, r5
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <_svfiprintf_r+0x1f4>)
 800555a:	a904      	add	r1, sp, #16
 800555c:	4638      	mov	r0, r7
 800555e:	f000 f919 	bl	8005794 <_printf_i>
 8005562:	e7eb      	b.n	800553c <_svfiprintf_r+0x1c0>
 8005564:	08006080 	.word	0x08006080
 8005568:	0800608a 	.word	0x0800608a
 800556c:	00000000 	.word	0x00000000
 8005570:	080052c7 	.word	0x080052c7
 8005574:	08006086 	.word	0x08006086

08005578 <sbrk_aligned>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	4e0e      	ldr	r6, [pc, #56]	; (80055b4 <sbrk_aligned+0x3c>)
 800557c:	460c      	mov	r4, r1
 800557e:	6831      	ldr	r1, [r6, #0]
 8005580:	4605      	mov	r5, r0
 8005582:	b911      	cbnz	r1, 800558a <sbrk_aligned+0x12>
 8005584:	f000 fcbc 	bl	8005f00 <_sbrk_r>
 8005588:	6030      	str	r0, [r6, #0]
 800558a:	4621      	mov	r1, r4
 800558c:	4628      	mov	r0, r5
 800558e:	f000 fcb7 	bl	8005f00 <_sbrk_r>
 8005592:	1c43      	adds	r3, r0, #1
 8005594:	d00a      	beq.n	80055ac <sbrk_aligned+0x34>
 8005596:	1cc4      	adds	r4, r0, #3
 8005598:	f024 0403 	bic.w	r4, r4, #3
 800559c:	42a0      	cmp	r0, r4
 800559e:	d007      	beq.n	80055b0 <sbrk_aligned+0x38>
 80055a0:	1a21      	subs	r1, r4, r0
 80055a2:	4628      	mov	r0, r5
 80055a4:	f000 fcac 	bl	8005f00 <_sbrk_r>
 80055a8:	3001      	adds	r0, #1
 80055aa:	d101      	bne.n	80055b0 <sbrk_aligned+0x38>
 80055ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055b0:	4620      	mov	r0, r4
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	20000338 	.word	0x20000338

080055b8 <_malloc_r>:
 80055b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055bc:	1ccd      	adds	r5, r1, #3
 80055be:	f025 0503 	bic.w	r5, r5, #3
 80055c2:	3508      	adds	r5, #8
 80055c4:	2d0c      	cmp	r5, #12
 80055c6:	bf38      	it	cc
 80055c8:	250c      	movcc	r5, #12
 80055ca:	2d00      	cmp	r5, #0
 80055cc:	4607      	mov	r7, r0
 80055ce:	db01      	blt.n	80055d4 <_malloc_r+0x1c>
 80055d0:	42a9      	cmp	r1, r5
 80055d2:	d905      	bls.n	80055e0 <_malloc_r+0x28>
 80055d4:	230c      	movs	r3, #12
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	2600      	movs	r6, #0
 80055da:	4630      	mov	r0, r6
 80055dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056b4 <_malloc_r+0xfc>
 80055e4:	f000 faa6 	bl	8005b34 <__malloc_lock>
 80055e8:	f8d8 3000 	ldr.w	r3, [r8]
 80055ec:	461c      	mov	r4, r3
 80055ee:	bb5c      	cbnz	r4, 8005648 <_malloc_r+0x90>
 80055f0:	4629      	mov	r1, r5
 80055f2:	4638      	mov	r0, r7
 80055f4:	f7ff ffc0 	bl	8005578 <sbrk_aligned>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	4604      	mov	r4, r0
 80055fc:	d155      	bne.n	80056aa <_malloc_r+0xf2>
 80055fe:	f8d8 4000 	ldr.w	r4, [r8]
 8005602:	4626      	mov	r6, r4
 8005604:	2e00      	cmp	r6, #0
 8005606:	d145      	bne.n	8005694 <_malloc_r+0xdc>
 8005608:	2c00      	cmp	r4, #0
 800560a:	d048      	beq.n	800569e <_malloc_r+0xe6>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	4631      	mov	r1, r6
 8005610:	4638      	mov	r0, r7
 8005612:	eb04 0903 	add.w	r9, r4, r3
 8005616:	f000 fc73 	bl	8005f00 <_sbrk_r>
 800561a:	4581      	cmp	r9, r0
 800561c:	d13f      	bne.n	800569e <_malloc_r+0xe6>
 800561e:	6821      	ldr	r1, [r4, #0]
 8005620:	1a6d      	subs	r5, r5, r1
 8005622:	4629      	mov	r1, r5
 8005624:	4638      	mov	r0, r7
 8005626:	f7ff ffa7 	bl	8005578 <sbrk_aligned>
 800562a:	3001      	adds	r0, #1
 800562c:	d037      	beq.n	800569e <_malloc_r+0xe6>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	442b      	add	r3, r5
 8005632:	6023      	str	r3, [r4, #0]
 8005634:	f8d8 3000 	ldr.w	r3, [r8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d038      	beq.n	80056ae <_malloc_r+0xf6>
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	42a2      	cmp	r2, r4
 8005640:	d12b      	bne.n	800569a <_malloc_r+0xe2>
 8005642:	2200      	movs	r2, #0
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	e00f      	b.n	8005668 <_malloc_r+0xb0>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	1b52      	subs	r2, r2, r5
 800564c:	d41f      	bmi.n	800568e <_malloc_r+0xd6>
 800564e:	2a0b      	cmp	r2, #11
 8005650:	d917      	bls.n	8005682 <_malloc_r+0xca>
 8005652:	1961      	adds	r1, r4, r5
 8005654:	42a3      	cmp	r3, r4
 8005656:	6025      	str	r5, [r4, #0]
 8005658:	bf18      	it	ne
 800565a:	6059      	strne	r1, [r3, #4]
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	bf08      	it	eq
 8005660:	f8c8 1000 	streq.w	r1, [r8]
 8005664:	5162      	str	r2, [r4, r5]
 8005666:	604b      	str	r3, [r1, #4]
 8005668:	4638      	mov	r0, r7
 800566a:	f104 060b 	add.w	r6, r4, #11
 800566e:	f000 fa67 	bl	8005b40 <__malloc_unlock>
 8005672:	f026 0607 	bic.w	r6, r6, #7
 8005676:	1d23      	adds	r3, r4, #4
 8005678:	1af2      	subs	r2, r6, r3
 800567a:	d0ae      	beq.n	80055da <_malloc_r+0x22>
 800567c:	1b9b      	subs	r3, r3, r6
 800567e:	50a3      	str	r3, [r4, r2]
 8005680:	e7ab      	b.n	80055da <_malloc_r+0x22>
 8005682:	42a3      	cmp	r3, r4
 8005684:	6862      	ldr	r2, [r4, #4]
 8005686:	d1dd      	bne.n	8005644 <_malloc_r+0x8c>
 8005688:	f8c8 2000 	str.w	r2, [r8]
 800568c:	e7ec      	b.n	8005668 <_malloc_r+0xb0>
 800568e:	4623      	mov	r3, r4
 8005690:	6864      	ldr	r4, [r4, #4]
 8005692:	e7ac      	b.n	80055ee <_malloc_r+0x36>
 8005694:	4634      	mov	r4, r6
 8005696:	6876      	ldr	r6, [r6, #4]
 8005698:	e7b4      	b.n	8005604 <_malloc_r+0x4c>
 800569a:	4613      	mov	r3, r2
 800569c:	e7cc      	b.n	8005638 <_malloc_r+0x80>
 800569e:	230c      	movs	r3, #12
 80056a0:	603b      	str	r3, [r7, #0]
 80056a2:	4638      	mov	r0, r7
 80056a4:	f000 fa4c 	bl	8005b40 <__malloc_unlock>
 80056a8:	e797      	b.n	80055da <_malloc_r+0x22>
 80056aa:	6025      	str	r5, [r4, #0]
 80056ac:	e7dc      	b.n	8005668 <_malloc_r+0xb0>
 80056ae:	605b      	str	r3, [r3, #4]
 80056b0:	deff      	udf	#255	; 0xff
 80056b2:	bf00      	nop
 80056b4:	20000334 	.word	0x20000334

080056b8 <_printf_common>:
 80056b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056bc:	4616      	mov	r6, r2
 80056be:	4699      	mov	r9, r3
 80056c0:	688a      	ldr	r2, [r1, #8]
 80056c2:	690b      	ldr	r3, [r1, #16]
 80056c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056c8:	4293      	cmp	r3, r2
 80056ca:	bfb8      	it	lt
 80056cc:	4613      	movlt	r3, r2
 80056ce:	6033      	str	r3, [r6, #0]
 80056d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056d4:	4607      	mov	r7, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	b10a      	cbz	r2, 80056de <_printf_common+0x26>
 80056da:	3301      	adds	r3, #1
 80056dc:	6033      	str	r3, [r6, #0]
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	0699      	lsls	r1, r3, #26
 80056e2:	bf42      	ittt	mi
 80056e4:	6833      	ldrmi	r3, [r6, #0]
 80056e6:	3302      	addmi	r3, #2
 80056e8:	6033      	strmi	r3, [r6, #0]
 80056ea:	6825      	ldr	r5, [r4, #0]
 80056ec:	f015 0506 	ands.w	r5, r5, #6
 80056f0:	d106      	bne.n	8005700 <_printf_common+0x48>
 80056f2:	f104 0a19 	add.w	sl, r4, #25
 80056f6:	68e3      	ldr	r3, [r4, #12]
 80056f8:	6832      	ldr	r2, [r6, #0]
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	42ab      	cmp	r3, r5
 80056fe:	dc26      	bgt.n	800574e <_printf_common+0x96>
 8005700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005704:	1e13      	subs	r3, r2, #0
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	bf18      	it	ne
 800570a:	2301      	movne	r3, #1
 800570c:	0692      	lsls	r2, r2, #26
 800570e:	d42b      	bmi.n	8005768 <_printf_common+0xb0>
 8005710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005714:	4649      	mov	r1, r9
 8005716:	4638      	mov	r0, r7
 8005718:	47c0      	blx	r8
 800571a:	3001      	adds	r0, #1
 800571c:	d01e      	beq.n	800575c <_printf_common+0xa4>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	6922      	ldr	r2, [r4, #16]
 8005722:	f003 0306 	and.w	r3, r3, #6
 8005726:	2b04      	cmp	r3, #4
 8005728:	bf02      	ittt	eq
 800572a:	68e5      	ldreq	r5, [r4, #12]
 800572c:	6833      	ldreq	r3, [r6, #0]
 800572e:	1aed      	subeq	r5, r5, r3
 8005730:	68a3      	ldr	r3, [r4, #8]
 8005732:	bf0c      	ite	eq
 8005734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005738:	2500      	movne	r5, #0
 800573a:	4293      	cmp	r3, r2
 800573c:	bfc4      	itt	gt
 800573e:	1a9b      	subgt	r3, r3, r2
 8005740:	18ed      	addgt	r5, r5, r3
 8005742:	2600      	movs	r6, #0
 8005744:	341a      	adds	r4, #26
 8005746:	42b5      	cmp	r5, r6
 8005748:	d11a      	bne.n	8005780 <_printf_common+0xc8>
 800574a:	2000      	movs	r0, #0
 800574c:	e008      	b.n	8005760 <_printf_common+0xa8>
 800574e:	2301      	movs	r3, #1
 8005750:	4652      	mov	r2, sl
 8005752:	4649      	mov	r1, r9
 8005754:	4638      	mov	r0, r7
 8005756:	47c0      	blx	r8
 8005758:	3001      	adds	r0, #1
 800575a:	d103      	bne.n	8005764 <_printf_common+0xac>
 800575c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005764:	3501      	adds	r5, #1
 8005766:	e7c6      	b.n	80056f6 <_printf_common+0x3e>
 8005768:	18e1      	adds	r1, r4, r3
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	2030      	movs	r0, #48	; 0x30
 800576e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005772:	4422      	add	r2, r4
 8005774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800577c:	3302      	adds	r3, #2
 800577e:	e7c7      	b.n	8005710 <_printf_common+0x58>
 8005780:	2301      	movs	r3, #1
 8005782:	4622      	mov	r2, r4
 8005784:	4649      	mov	r1, r9
 8005786:	4638      	mov	r0, r7
 8005788:	47c0      	blx	r8
 800578a:	3001      	adds	r0, #1
 800578c:	d0e6      	beq.n	800575c <_printf_common+0xa4>
 800578e:	3601      	adds	r6, #1
 8005790:	e7d9      	b.n	8005746 <_printf_common+0x8e>
	...

08005794 <_printf_i>:
 8005794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	7e0f      	ldrb	r7, [r1, #24]
 800579a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800579c:	2f78      	cmp	r7, #120	; 0x78
 800579e:	4691      	mov	r9, r2
 80057a0:	4680      	mov	r8, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	469a      	mov	sl, r3
 80057a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057aa:	d807      	bhi.n	80057bc <_printf_i+0x28>
 80057ac:	2f62      	cmp	r7, #98	; 0x62
 80057ae:	d80a      	bhi.n	80057c6 <_printf_i+0x32>
 80057b0:	2f00      	cmp	r7, #0
 80057b2:	f000 80d4 	beq.w	800595e <_printf_i+0x1ca>
 80057b6:	2f58      	cmp	r7, #88	; 0x58
 80057b8:	f000 80c0 	beq.w	800593c <_printf_i+0x1a8>
 80057bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057c4:	e03a      	b.n	800583c <_printf_i+0xa8>
 80057c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ca:	2b15      	cmp	r3, #21
 80057cc:	d8f6      	bhi.n	80057bc <_printf_i+0x28>
 80057ce:	a101      	add	r1, pc, #4	; (adr r1, 80057d4 <_printf_i+0x40>)
 80057d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057d4:	0800582d 	.word	0x0800582d
 80057d8:	08005841 	.word	0x08005841
 80057dc:	080057bd 	.word	0x080057bd
 80057e0:	080057bd 	.word	0x080057bd
 80057e4:	080057bd 	.word	0x080057bd
 80057e8:	080057bd 	.word	0x080057bd
 80057ec:	08005841 	.word	0x08005841
 80057f0:	080057bd 	.word	0x080057bd
 80057f4:	080057bd 	.word	0x080057bd
 80057f8:	080057bd 	.word	0x080057bd
 80057fc:	080057bd 	.word	0x080057bd
 8005800:	08005945 	.word	0x08005945
 8005804:	0800586d 	.word	0x0800586d
 8005808:	080058ff 	.word	0x080058ff
 800580c:	080057bd 	.word	0x080057bd
 8005810:	080057bd 	.word	0x080057bd
 8005814:	08005967 	.word	0x08005967
 8005818:	080057bd 	.word	0x080057bd
 800581c:	0800586d 	.word	0x0800586d
 8005820:	080057bd 	.word	0x080057bd
 8005824:	080057bd 	.word	0x080057bd
 8005828:	08005907 	.word	0x08005907
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	1d1a      	adds	r2, r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	602a      	str	r2, [r5, #0]
 8005834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800583c:	2301      	movs	r3, #1
 800583e:	e09f      	b.n	8005980 <_printf_i+0x1ec>
 8005840:	6820      	ldr	r0, [r4, #0]
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	0607      	lsls	r7, r0, #24
 8005846:	f103 0104 	add.w	r1, r3, #4
 800584a:	6029      	str	r1, [r5, #0]
 800584c:	d501      	bpl.n	8005852 <_printf_i+0xbe>
 800584e:	681e      	ldr	r6, [r3, #0]
 8005850:	e003      	b.n	800585a <_printf_i+0xc6>
 8005852:	0646      	lsls	r6, r0, #25
 8005854:	d5fb      	bpl.n	800584e <_printf_i+0xba>
 8005856:	f9b3 6000 	ldrsh.w	r6, [r3]
 800585a:	2e00      	cmp	r6, #0
 800585c:	da03      	bge.n	8005866 <_printf_i+0xd2>
 800585e:	232d      	movs	r3, #45	; 0x2d
 8005860:	4276      	negs	r6, r6
 8005862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005866:	485a      	ldr	r0, [pc, #360]	; (80059d0 <_printf_i+0x23c>)
 8005868:	230a      	movs	r3, #10
 800586a:	e012      	b.n	8005892 <_printf_i+0xfe>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	6820      	ldr	r0, [r4, #0]
 8005870:	1d19      	adds	r1, r3, #4
 8005872:	6029      	str	r1, [r5, #0]
 8005874:	0605      	lsls	r5, r0, #24
 8005876:	d501      	bpl.n	800587c <_printf_i+0xe8>
 8005878:	681e      	ldr	r6, [r3, #0]
 800587a:	e002      	b.n	8005882 <_printf_i+0xee>
 800587c:	0641      	lsls	r1, r0, #25
 800587e:	d5fb      	bpl.n	8005878 <_printf_i+0xe4>
 8005880:	881e      	ldrh	r6, [r3, #0]
 8005882:	4853      	ldr	r0, [pc, #332]	; (80059d0 <_printf_i+0x23c>)
 8005884:	2f6f      	cmp	r7, #111	; 0x6f
 8005886:	bf0c      	ite	eq
 8005888:	2308      	moveq	r3, #8
 800588a:	230a      	movne	r3, #10
 800588c:	2100      	movs	r1, #0
 800588e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005892:	6865      	ldr	r5, [r4, #4]
 8005894:	60a5      	str	r5, [r4, #8]
 8005896:	2d00      	cmp	r5, #0
 8005898:	bfa2      	ittt	ge
 800589a:	6821      	ldrge	r1, [r4, #0]
 800589c:	f021 0104 	bicge.w	r1, r1, #4
 80058a0:	6021      	strge	r1, [r4, #0]
 80058a2:	b90e      	cbnz	r6, 80058a8 <_printf_i+0x114>
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	d04b      	beq.n	8005940 <_printf_i+0x1ac>
 80058a8:	4615      	mov	r5, r2
 80058aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ae:	fb03 6711 	mls	r7, r3, r1, r6
 80058b2:	5dc7      	ldrb	r7, [r0, r7]
 80058b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058b8:	4637      	mov	r7, r6
 80058ba:	42bb      	cmp	r3, r7
 80058bc:	460e      	mov	r6, r1
 80058be:	d9f4      	bls.n	80058aa <_printf_i+0x116>
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d10b      	bne.n	80058dc <_printf_i+0x148>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	07de      	lsls	r6, r3, #31
 80058c8:	d508      	bpl.n	80058dc <_printf_i+0x148>
 80058ca:	6923      	ldr	r3, [r4, #16]
 80058cc:	6861      	ldr	r1, [r4, #4]
 80058ce:	4299      	cmp	r1, r3
 80058d0:	bfde      	ittt	le
 80058d2:	2330      	movle	r3, #48	; 0x30
 80058d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058dc:	1b52      	subs	r2, r2, r5
 80058de:	6122      	str	r2, [r4, #16]
 80058e0:	f8cd a000 	str.w	sl, [sp]
 80058e4:	464b      	mov	r3, r9
 80058e6:	aa03      	add	r2, sp, #12
 80058e8:	4621      	mov	r1, r4
 80058ea:	4640      	mov	r0, r8
 80058ec:	f7ff fee4 	bl	80056b8 <_printf_common>
 80058f0:	3001      	adds	r0, #1
 80058f2:	d14a      	bne.n	800598a <_printf_i+0x1f6>
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f8:	b004      	add	sp, #16
 80058fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	f043 0320 	orr.w	r3, r3, #32
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	4833      	ldr	r0, [pc, #204]	; (80059d4 <_printf_i+0x240>)
 8005908:	2778      	movs	r7, #120	; 0x78
 800590a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	6829      	ldr	r1, [r5, #0]
 8005912:	061f      	lsls	r7, r3, #24
 8005914:	f851 6b04 	ldr.w	r6, [r1], #4
 8005918:	d402      	bmi.n	8005920 <_printf_i+0x18c>
 800591a:	065f      	lsls	r7, r3, #25
 800591c:	bf48      	it	mi
 800591e:	b2b6      	uxthmi	r6, r6
 8005920:	07df      	lsls	r7, r3, #31
 8005922:	bf48      	it	mi
 8005924:	f043 0320 	orrmi.w	r3, r3, #32
 8005928:	6029      	str	r1, [r5, #0]
 800592a:	bf48      	it	mi
 800592c:	6023      	strmi	r3, [r4, #0]
 800592e:	b91e      	cbnz	r6, 8005938 <_printf_i+0x1a4>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	f023 0320 	bic.w	r3, r3, #32
 8005936:	6023      	str	r3, [r4, #0]
 8005938:	2310      	movs	r3, #16
 800593a:	e7a7      	b.n	800588c <_printf_i+0xf8>
 800593c:	4824      	ldr	r0, [pc, #144]	; (80059d0 <_printf_i+0x23c>)
 800593e:	e7e4      	b.n	800590a <_printf_i+0x176>
 8005940:	4615      	mov	r5, r2
 8005942:	e7bd      	b.n	80058c0 <_printf_i+0x12c>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	6826      	ldr	r6, [r4, #0]
 8005948:	6961      	ldr	r1, [r4, #20]
 800594a:	1d18      	adds	r0, r3, #4
 800594c:	6028      	str	r0, [r5, #0]
 800594e:	0635      	lsls	r5, r6, #24
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	d501      	bpl.n	8005958 <_printf_i+0x1c4>
 8005954:	6019      	str	r1, [r3, #0]
 8005956:	e002      	b.n	800595e <_printf_i+0x1ca>
 8005958:	0670      	lsls	r0, r6, #25
 800595a:	d5fb      	bpl.n	8005954 <_printf_i+0x1c0>
 800595c:	8019      	strh	r1, [r3, #0]
 800595e:	2300      	movs	r3, #0
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	4615      	mov	r5, r2
 8005964:	e7bc      	b.n	80058e0 <_printf_i+0x14c>
 8005966:	682b      	ldr	r3, [r5, #0]
 8005968:	1d1a      	adds	r2, r3, #4
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	681d      	ldr	r5, [r3, #0]
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	2100      	movs	r1, #0
 8005972:	4628      	mov	r0, r5
 8005974:	f7fa fc64 	bl	8000240 <memchr>
 8005978:	b108      	cbz	r0, 800597e <_printf_i+0x1ea>
 800597a:	1b40      	subs	r0, r0, r5
 800597c:	6060      	str	r0, [r4, #4]
 800597e:	6863      	ldr	r3, [r4, #4]
 8005980:	6123      	str	r3, [r4, #16]
 8005982:	2300      	movs	r3, #0
 8005984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005988:	e7aa      	b.n	80058e0 <_printf_i+0x14c>
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	462a      	mov	r2, r5
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d0ad      	beq.n	80058f4 <_printf_i+0x160>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	079b      	lsls	r3, r3, #30
 800599c:	d413      	bmi.n	80059c6 <_printf_i+0x232>
 800599e:	68e0      	ldr	r0, [r4, #12]
 80059a0:	9b03      	ldr	r3, [sp, #12]
 80059a2:	4298      	cmp	r0, r3
 80059a4:	bfb8      	it	lt
 80059a6:	4618      	movlt	r0, r3
 80059a8:	e7a6      	b.n	80058f8 <_printf_i+0x164>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4632      	mov	r2, r6
 80059ae:	4649      	mov	r1, r9
 80059b0:	4640      	mov	r0, r8
 80059b2:	47d0      	blx	sl
 80059b4:	3001      	adds	r0, #1
 80059b6:	d09d      	beq.n	80058f4 <_printf_i+0x160>
 80059b8:	3501      	adds	r5, #1
 80059ba:	68e3      	ldr	r3, [r4, #12]
 80059bc:	9903      	ldr	r1, [sp, #12]
 80059be:	1a5b      	subs	r3, r3, r1
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	dcf2      	bgt.n	80059aa <_printf_i+0x216>
 80059c4:	e7eb      	b.n	800599e <_printf_i+0x20a>
 80059c6:	2500      	movs	r5, #0
 80059c8:	f104 0619 	add.w	r6, r4, #25
 80059cc:	e7f5      	b.n	80059ba <_printf_i+0x226>
 80059ce:	bf00      	nop
 80059d0:	08006091 	.word	0x08006091
 80059d4:	080060a2 	.word	0x080060a2

080059d8 <__sflush_r>:
 80059d8:	898a      	ldrh	r2, [r1, #12]
 80059da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059de:	4605      	mov	r5, r0
 80059e0:	0710      	lsls	r0, r2, #28
 80059e2:	460c      	mov	r4, r1
 80059e4:	d458      	bmi.n	8005a98 <__sflush_r+0xc0>
 80059e6:	684b      	ldr	r3, [r1, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	dc05      	bgt.n	80059f8 <__sflush_r+0x20>
 80059ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	dc02      	bgt.n	80059f8 <__sflush_r+0x20>
 80059f2:	2000      	movs	r0, #0
 80059f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	d0f9      	beq.n	80059f2 <__sflush_r+0x1a>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a04:	682f      	ldr	r7, [r5, #0]
 8005a06:	6a21      	ldr	r1, [r4, #32]
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	d032      	beq.n	8005a72 <__sflush_r+0x9a>
 8005a0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	075a      	lsls	r2, r3, #29
 8005a12:	d505      	bpl.n	8005a20 <__sflush_r+0x48>
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	1ac0      	subs	r0, r0, r3
 8005a18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a1a:	b10b      	cbz	r3, 8005a20 <__sflush_r+0x48>
 8005a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a1e:	1ac0      	subs	r0, r0, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	4602      	mov	r2, r0
 8005a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a26:	6a21      	ldr	r1, [r4, #32]
 8005a28:	4628      	mov	r0, r5
 8005a2a:	47b0      	blx	r6
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	d106      	bne.n	8005a40 <__sflush_r+0x68>
 8005a32:	6829      	ldr	r1, [r5, #0]
 8005a34:	291d      	cmp	r1, #29
 8005a36:	d82b      	bhi.n	8005a90 <__sflush_r+0xb8>
 8005a38:	4a29      	ldr	r2, [pc, #164]	; (8005ae0 <__sflush_r+0x108>)
 8005a3a:	410a      	asrs	r2, r1
 8005a3c:	07d6      	lsls	r6, r2, #31
 8005a3e:	d427      	bmi.n	8005a90 <__sflush_r+0xb8>
 8005a40:	2200      	movs	r2, #0
 8005a42:	6062      	str	r2, [r4, #4]
 8005a44:	04d9      	lsls	r1, r3, #19
 8005a46:	6922      	ldr	r2, [r4, #16]
 8005a48:	6022      	str	r2, [r4, #0]
 8005a4a:	d504      	bpl.n	8005a56 <__sflush_r+0x7e>
 8005a4c:	1c42      	adds	r2, r0, #1
 8005a4e:	d101      	bne.n	8005a54 <__sflush_r+0x7c>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b903      	cbnz	r3, 8005a56 <__sflush_r+0x7e>
 8005a54:	6560      	str	r0, [r4, #84]	; 0x54
 8005a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a58:	602f      	str	r7, [r5, #0]
 8005a5a:	2900      	cmp	r1, #0
 8005a5c:	d0c9      	beq.n	80059f2 <__sflush_r+0x1a>
 8005a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a62:	4299      	cmp	r1, r3
 8005a64:	d002      	beq.n	8005a6c <__sflush_r+0x94>
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 fa7a 	bl	8005f60 <_free_r>
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	6360      	str	r0, [r4, #52]	; 0x34
 8005a70:	e7c0      	b.n	80059f4 <__sflush_r+0x1c>
 8005a72:	2301      	movs	r3, #1
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b0      	blx	r6
 8005a78:	1c41      	adds	r1, r0, #1
 8005a7a:	d1c8      	bne.n	8005a0e <__sflush_r+0x36>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0c5      	beq.n	8005a0e <__sflush_r+0x36>
 8005a82:	2b1d      	cmp	r3, #29
 8005a84:	d001      	beq.n	8005a8a <__sflush_r+0xb2>
 8005a86:	2b16      	cmp	r3, #22
 8005a88:	d101      	bne.n	8005a8e <__sflush_r+0xb6>
 8005a8a:	602f      	str	r7, [r5, #0]
 8005a8c:	e7b1      	b.n	80059f2 <__sflush_r+0x1a>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	e7ad      	b.n	80059f4 <__sflush_r+0x1c>
 8005a98:	690f      	ldr	r7, [r1, #16]
 8005a9a:	2f00      	cmp	r7, #0
 8005a9c:	d0a9      	beq.n	80059f2 <__sflush_r+0x1a>
 8005a9e:	0793      	lsls	r3, r2, #30
 8005aa0:	680e      	ldr	r6, [r1, #0]
 8005aa2:	bf08      	it	eq
 8005aa4:	694b      	ldreq	r3, [r1, #20]
 8005aa6:	600f      	str	r7, [r1, #0]
 8005aa8:	bf18      	it	ne
 8005aaa:	2300      	movne	r3, #0
 8005aac:	eba6 0807 	sub.w	r8, r6, r7
 8005ab0:	608b      	str	r3, [r1, #8]
 8005ab2:	f1b8 0f00 	cmp.w	r8, #0
 8005ab6:	dd9c      	ble.n	80059f2 <__sflush_r+0x1a>
 8005ab8:	6a21      	ldr	r1, [r4, #32]
 8005aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005abc:	4643      	mov	r3, r8
 8005abe:	463a      	mov	r2, r7
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b0      	blx	r6
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	dc06      	bgt.n	8005ad6 <__sflush_r+0xfe>
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad4:	e78e      	b.n	80059f4 <__sflush_r+0x1c>
 8005ad6:	4407      	add	r7, r0
 8005ad8:	eba8 0800 	sub.w	r8, r8, r0
 8005adc:	e7e9      	b.n	8005ab2 <__sflush_r+0xda>
 8005ade:	bf00      	nop
 8005ae0:	dfbffffe 	.word	0xdfbffffe

08005ae4 <_fflush_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	690b      	ldr	r3, [r1, #16]
 8005ae8:	4605      	mov	r5, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	b913      	cbnz	r3, 8005af4 <_fflush_r+0x10>
 8005aee:	2500      	movs	r5, #0
 8005af0:	4628      	mov	r0, r5
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	b118      	cbz	r0, 8005afe <_fflush_r+0x1a>
 8005af6:	6a03      	ldr	r3, [r0, #32]
 8005af8:	b90b      	cbnz	r3, 8005afe <_fflush_r+0x1a>
 8005afa:	f7ff fb1d 	bl	8005138 <__sinit>
 8005afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f3      	beq.n	8005aee <_fflush_r+0xa>
 8005b06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b08:	07d0      	lsls	r0, r2, #31
 8005b0a:	d404      	bmi.n	8005b16 <_fflush_r+0x32>
 8005b0c:	0599      	lsls	r1, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_fflush_r+0x32>
 8005b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b12:	f7ff fbd6 	bl	80052c2 <__retarget_lock_acquire_recursive>
 8005b16:	4628      	mov	r0, r5
 8005b18:	4621      	mov	r1, r4
 8005b1a:	f7ff ff5d 	bl	80059d8 <__sflush_r>
 8005b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b20:	07da      	lsls	r2, r3, #31
 8005b22:	4605      	mov	r5, r0
 8005b24:	d4e4      	bmi.n	8005af0 <_fflush_r+0xc>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	059b      	lsls	r3, r3, #22
 8005b2a:	d4e1      	bmi.n	8005af0 <_fflush_r+0xc>
 8005b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b2e:	f7ff fbc9 	bl	80052c4 <__retarget_lock_release_recursive>
 8005b32:	e7dd      	b.n	8005af0 <_fflush_r+0xc>

08005b34 <__malloc_lock>:
 8005b34:	4801      	ldr	r0, [pc, #4]	; (8005b3c <__malloc_lock+0x8>)
 8005b36:	f7ff bbc4 	b.w	80052c2 <__retarget_lock_acquire_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	20000330 	.word	0x20000330

08005b40 <__malloc_unlock>:
 8005b40:	4801      	ldr	r0, [pc, #4]	; (8005b48 <__malloc_unlock+0x8>)
 8005b42:	f7ff bbbf 	b.w	80052c4 <__retarget_lock_release_recursive>
 8005b46:	bf00      	nop
 8005b48:	20000330 	.word	0x20000330

08005b4c <__sread>:
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	460c      	mov	r4, r1
 8005b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b54:	f000 f9c2 	bl	8005edc <_read_r>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	bfab      	itete	ge
 8005b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b60:	181b      	addge	r3, r3, r0
 8005b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b66:	bfac      	ite	ge
 8005b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b6a:	81a3      	strhlt	r3, [r4, #12]
 8005b6c:	bd10      	pop	{r4, pc}

08005b6e <__swrite>:
 8005b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b72:	461f      	mov	r7, r3
 8005b74:	898b      	ldrh	r3, [r1, #12]
 8005b76:	05db      	lsls	r3, r3, #23
 8005b78:	4605      	mov	r5, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	4616      	mov	r6, r2
 8005b7e:	d505      	bpl.n	8005b8c <__swrite+0x1e>
 8005b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b84:	2302      	movs	r3, #2
 8005b86:	2200      	movs	r2, #0
 8005b88:	f000 f996 	bl	8005eb8 <_lseek_r>
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	4632      	mov	r2, r6
 8005b9a:	463b      	mov	r3, r7
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba2:	f000 b9bd 	b.w	8005f20 <_write_r>

08005ba6 <__sseek>:
 8005ba6:	b510      	push	{r4, lr}
 8005ba8:	460c      	mov	r4, r1
 8005baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bae:	f000 f983 	bl	8005eb8 <_lseek_r>
 8005bb2:	1c43      	adds	r3, r0, #1
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	bf15      	itete	ne
 8005bb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bc2:	81a3      	strheq	r3, [r4, #12]
 8005bc4:	bf18      	it	ne
 8005bc6:	81a3      	strhne	r3, [r4, #12]
 8005bc8:	bd10      	pop	{r4, pc}

08005bca <__sclose>:
 8005bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bce:	f000 b941 	b.w	8005e54 <_close_r>

08005bd2 <_realloc_r>:
 8005bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd6:	4680      	mov	r8, r0
 8005bd8:	4614      	mov	r4, r2
 8005bda:	460e      	mov	r6, r1
 8005bdc:	b921      	cbnz	r1, 8005be8 <_realloc_r+0x16>
 8005bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005be2:	4611      	mov	r1, r2
 8005be4:	f7ff bce8 	b.w	80055b8 <_malloc_r>
 8005be8:	b92a      	cbnz	r2, 8005bf6 <_realloc_r+0x24>
 8005bea:	f000 f9b9 	bl	8005f60 <_free_r>
 8005bee:	4625      	mov	r5, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf6:	f000 f9ff 	bl	8005ff8 <_malloc_usable_size_r>
 8005bfa:	4284      	cmp	r4, r0
 8005bfc:	4607      	mov	r7, r0
 8005bfe:	d802      	bhi.n	8005c06 <_realloc_r+0x34>
 8005c00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c04:	d812      	bhi.n	8005c2c <_realloc_r+0x5a>
 8005c06:	4621      	mov	r1, r4
 8005c08:	4640      	mov	r0, r8
 8005c0a:	f7ff fcd5 	bl	80055b8 <_malloc_r>
 8005c0e:	4605      	mov	r5, r0
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d0ed      	beq.n	8005bf0 <_realloc_r+0x1e>
 8005c14:	42bc      	cmp	r4, r7
 8005c16:	4622      	mov	r2, r4
 8005c18:	4631      	mov	r1, r6
 8005c1a:	bf28      	it	cs
 8005c1c:	463a      	movcs	r2, r7
 8005c1e:	f000 f991 	bl	8005f44 <memcpy>
 8005c22:	4631      	mov	r1, r6
 8005c24:	4640      	mov	r0, r8
 8005c26:	f000 f99b 	bl	8005f60 <_free_r>
 8005c2a:	e7e1      	b.n	8005bf0 <_realloc_r+0x1e>
 8005c2c:	4635      	mov	r5, r6
 8005c2e:	e7df      	b.n	8005bf0 <_realloc_r+0x1e>

08005c30 <__swbuf_r>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	460e      	mov	r6, r1
 8005c34:	4614      	mov	r4, r2
 8005c36:	4605      	mov	r5, r0
 8005c38:	b118      	cbz	r0, 8005c42 <__swbuf_r+0x12>
 8005c3a:	6a03      	ldr	r3, [r0, #32]
 8005c3c:	b90b      	cbnz	r3, 8005c42 <__swbuf_r+0x12>
 8005c3e:	f7ff fa7b 	bl	8005138 <__sinit>
 8005c42:	69a3      	ldr	r3, [r4, #24]
 8005c44:	60a3      	str	r3, [r4, #8]
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	071a      	lsls	r2, r3, #28
 8005c4a:	d525      	bpl.n	8005c98 <__swbuf_r+0x68>
 8005c4c:	6923      	ldr	r3, [r4, #16]
 8005c4e:	b31b      	cbz	r3, 8005c98 <__swbuf_r+0x68>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	6922      	ldr	r2, [r4, #16]
 8005c54:	1a98      	subs	r0, r3, r2
 8005c56:	6963      	ldr	r3, [r4, #20]
 8005c58:	b2f6      	uxtb	r6, r6
 8005c5a:	4283      	cmp	r3, r0
 8005c5c:	4637      	mov	r7, r6
 8005c5e:	dc04      	bgt.n	8005c6a <__swbuf_r+0x3a>
 8005c60:	4621      	mov	r1, r4
 8005c62:	4628      	mov	r0, r5
 8005c64:	f7ff ff3e 	bl	8005ae4 <_fflush_r>
 8005c68:	b9e0      	cbnz	r0, 8005ca4 <__swbuf_r+0x74>
 8005c6a:	68a3      	ldr	r3, [r4, #8]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	60a3      	str	r3, [r4, #8]
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	6022      	str	r2, [r4, #0]
 8005c76:	701e      	strb	r6, [r3, #0]
 8005c78:	6962      	ldr	r2, [r4, #20]
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d004      	beq.n	8005c8a <__swbuf_r+0x5a>
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	07db      	lsls	r3, r3, #31
 8005c84:	d506      	bpl.n	8005c94 <__swbuf_r+0x64>
 8005c86:	2e0a      	cmp	r6, #10
 8005c88:	d104      	bne.n	8005c94 <__swbuf_r+0x64>
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f7ff ff29 	bl	8005ae4 <_fflush_r>
 8005c92:	b938      	cbnz	r0, 8005ca4 <__swbuf_r+0x74>
 8005c94:	4638      	mov	r0, r7
 8005c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f806 	bl	8005cac <__swsetup_r>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d0d5      	beq.n	8005c50 <__swbuf_r+0x20>
 8005ca4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ca8:	e7f4      	b.n	8005c94 <__swbuf_r+0x64>
	...

08005cac <__swsetup_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4b2a      	ldr	r3, [pc, #168]	; (8005d58 <__swsetup_r+0xac>)
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	b118      	cbz	r0, 8005cc0 <__swsetup_r+0x14>
 8005cb8:	6a03      	ldr	r3, [r0, #32]
 8005cba:	b90b      	cbnz	r3, 8005cc0 <__swsetup_r+0x14>
 8005cbc:	f7ff fa3c 	bl	8005138 <__sinit>
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cc6:	0718      	lsls	r0, r3, #28
 8005cc8:	d422      	bmi.n	8005d10 <__swsetup_r+0x64>
 8005cca:	06d9      	lsls	r1, r3, #27
 8005ccc:	d407      	bmi.n	8005cde <__swsetup_r+0x32>
 8005cce:	2309      	movs	r3, #9
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cdc:	e034      	b.n	8005d48 <__swsetup_r+0x9c>
 8005cde:	0758      	lsls	r0, r3, #29
 8005ce0:	d512      	bpl.n	8005d08 <__swsetup_r+0x5c>
 8005ce2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ce4:	b141      	cbz	r1, 8005cf8 <__swsetup_r+0x4c>
 8005ce6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cea:	4299      	cmp	r1, r3
 8005cec:	d002      	beq.n	8005cf4 <__swsetup_r+0x48>
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 f936 	bl	8005f60 <_free_r>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6363      	str	r3, [r4, #52]	; 0x34
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	2300      	movs	r3, #0
 8005d02:	6063      	str	r3, [r4, #4]
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f043 0308 	orr.w	r3, r3, #8
 8005d0e:	81a3      	strh	r3, [r4, #12]
 8005d10:	6923      	ldr	r3, [r4, #16]
 8005d12:	b94b      	cbnz	r3, 8005d28 <__swsetup_r+0x7c>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1e:	d003      	beq.n	8005d28 <__swsetup_r+0x7c>
 8005d20:	4621      	mov	r1, r4
 8005d22:	4628      	mov	r0, r5
 8005d24:	f000 f840 	bl	8005da8 <__smakebuf_r>
 8005d28:	89a0      	ldrh	r0, [r4, #12]
 8005d2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d2e:	f010 0301 	ands.w	r3, r0, #1
 8005d32:	d00a      	beq.n	8005d4a <__swsetup_r+0x9e>
 8005d34:	2300      	movs	r3, #0
 8005d36:	60a3      	str	r3, [r4, #8]
 8005d38:	6963      	ldr	r3, [r4, #20]
 8005d3a:	425b      	negs	r3, r3
 8005d3c:	61a3      	str	r3, [r4, #24]
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	b943      	cbnz	r3, 8005d54 <__swsetup_r+0xa8>
 8005d42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d46:	d1c4      	bne.n	8005cd2 <__swsetup_r+0x26>
 8005d48:	bd38      	pop	{r3, r4, r5, pc}
 8005d4a:	0781      	lsls	r1, r0, #30
 8005d4c:	bf58      	it	pl
 8005d4e:	6963      	ldrpl	r3, [r4, #20]
 8005d50:	60a3      	str	r3, [r4, #8]
 8005d52:	e7f4      	b.n	8005d3e <__swsetup_r+0x92>
 8005d54:	2000      	movs	r0, #0
 8005d56:	e7f7      	b.n	8005d48 <__swsetup_r+0x9c>
 8005d58:	20000064 	.word	0x20000064

08005d5c <__swhatbuf_r>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	2900      	cmp	r1, #0
 8005d66:	b096      	sub	sp, #88	; 0x58
 8005d68:	4615      	mov	r5, r2
 8005d6a:	461e      	mov	r6, r3
 8005d6c:	da0d      	bge.n	8005d8a <__swhatbuf_r+0x2e>
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d74:	f04f 0100 	mov.w	r1, #0
 8005d78:	bf0c      	ite	eq
 8005d7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d7e:	2340      	movne	r3, #64	; 0x40
 8005d80:	2000      	movs	r0, #0
 8005d82:	6031      	str	r1, [r6, #0]
 8005d84:	602b      	str	r3, [r5, #0]
 8005d86:	b016      	add	sp, #88	; 0x58
 8005d88:	bd70      	pop	{r4, r5, r6, pc}
 8005d8a:	466a      	mov	r2, sp
 8005d8c:	f000 f872 	bl	8005e74 <_fstat_r>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	dbec      	blt.n	8005d6e <__swhatbuf_r+0x12>
 8005d94:	9901      	ldr	r1, [sp, #4]
 8005d96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d9e:	4259      	negs	r1, r3
 8005da0:	4159      	adcs	r1, r3
 8005da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005da6:	e7eb      	b.n	8005d80 <__swhatbuf_r+0x24>

08005da8 <__smakebuf_r>:
 8005da8:	898b      	ldrh	r3, [r1, #12]
 8005daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dac:	079d      	lsls	r5, r3, #30
 8005dae:	4606      	mov	r6, r0
 8005db0:	460c      	mov	r4, r1
 8005db2:	d507      	bpl.n	8005dc4 <__smakebuf_r+0x1c>
 8005db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	6123      	str	r3, [r4, #16]
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	6163      	str	r3, [r4, #20]
 8005dc0:	b002      	add	sp, #8
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	ab01      	add	r3, sp, #4
 8005dc6:	466a      	mov	r2, sp
 8005dc8:	f7ff ffc8 	bl	8005d5c <__swhatbuf_r>
 8005dcc:	9900      	ldr	r1, [sp, #0]
 8005dce:	4605      	mov	r5, r0
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f7ff fbf1 	bl	80055b8 <_malloc_r>
 8005dd6:	b948      	cbnz	r0, 8005dec <__smakebuf_r+0x44>
 8005dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ddc:	059a      	lsls	r2, r3, #22
 8005dde:	d4ef      	bmi.n	8005dc0 <__smakebuf_r+0x18>
 8005de0:	f023 0303 	bic.w	r3, r3, #3
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	e7e3      	b.n	8005db4 <__smakebuf_r+0xc>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	6020      	str	r0, [r4, #0]
 8005df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	9b00      	ldr	r3, [sp, #0]
 8005df8:	6163      	str	r3, [r4, #20]
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	6120      	str	r0, [r4, #16]
 8005dfe:	b15b      	cbz	r3, 8005e18 <__smakebuf_r+0x70>
 8005e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e04:	4630      	mov	r0, r6
 8005e06:	f000 f847 	bl	8005e98 <_isatty_r>
 8005e0a:	b128      	cbz	r0, 8005e18 <__smakebuf_r+0x70>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	431d      	orrs	r5, r3
 8005e1c:	81a5      	strh	r5, [r4, #12]
 8005e1e:	e7cf      	b.n	8005dc0 <__smakebuf_r+0x18>

08005e20 <memmove>:
 8005e20:	4288      	cmp	r0, r1
 8005e22:	b510      	push	{r4, lr}
 8005e24:	eb01 0402 	add.w	r4, r1, r2
 8005e28:	d902      	bls.n	8005e30 <memmove+0x10>
 8005e2a:	4284      	cmp	r4, r0
 8005e2c:	4623      	mov	r3, r4
 8005e2e:	d807      	bhi.n	8005e40 <memmove+0x20>
 8005e30:	1e43      	subs	r3, r0, #1
 8005e32:	42a1      	cmp	r1, r4
 8005e34:	d008      	beq.n	8005e48 <memmove+0x28>
 8005e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e3e:	e7f8      	b.n	8005e32 <memmove+0x12>
 8005e40:	4402      	add	r2, r0
 8005e42:	4601      	mov	r1, r0
 8005e44:	428a      	cmp	r2, r1
 8005e46:	d100      	bne.n	8005e4a <memmove+0x2a>
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e52:	e7f7      	b.n	8005e44 <memmove+0x24>

08005e54 <_close_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4d06      	ldr	r5, [pc, #24]	; (8005e70 <_close_r+0x1c>)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	602b      	str	r3, [r5, #0]
 8005e60:	f7fb fc43 	bl	80016ea <_close>
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	d102      	bne.n	8005e6e <_close_r+0x1a>
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	b103      	cbz	r3, 8005e6e <_close_r+0x1a>
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	2000033c 	.word	0x2000033c

08005e74 <_fstat_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d07      	ldr	r5, [pc, #28]	; (8005e94 <_fstat_r+0x20>)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	602b      	str	r3, [r5, #0]
 8005e82:	f7fb fc3e 	bl	8001702 <_fstat>
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	d102      	bne.n	8005e90 <_fstat_r+0x1c>
 8005e8a:	682b      	ldr	r3, [r5, #0]
 8005e8c:	b103      	cbz	r3, 8005e90 <_fstat_r+0x1c>
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	bd38      	pop	{r3, r4, r5, pc}
 8005e92:	bf00      	nop
 8005e94:	2000033c 	.word	0x2000033c

08005e98 <_isatty_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d06      	ldr	r5, [pc, #24]	; (8005eb4 <_isatty_r+0x1c>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	602b      	str	r3, [r5, #0]
 8005ea4:	f7fb fc3d 	bl	8001722 <_isatty>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_isatty_r+0x1a>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_isatty_r+0x1a>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	2000033c 	.word	0x2000033c

08005eb8 <_lseek_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4d07      	ldr	r5, [pc, #28]	; (8005ed8 <_lseek_r+0x20>)
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	4608      	mov	r0, r1
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	602a      	str	r2, [r5, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f7fb fc36 	bl	8001738 <_lseek>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_lseek_r+0x1e>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_lseek_r+0x1e>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	2000033c 	.word	0x2000033c

08005edc <_read_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d07      	ldr	r5, [pc, #28]	; (8005efc <_read_r+0x20>)
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	4608      	mov	r0, r1
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	602a      	str	r2, [r5, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f7fb fbc4 	bl	8001678 <_read>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_read_r+0x1e>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_read_r+0x1e>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	2000033c 	.word	0x2000033c

08005f00 <_sbrk_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d06      	ldr	r5, [pc, #24]	; (8005f1c <_sbrk_r+0x1c>)
 8005f04:	2300      	movs	r3, #0
 8005f06:	4604      	mov	r4, r0
 8005f08:	4608      	mov	r0, r1
 8005f0a:	602b      	str	r3, [r5, #0]
 8005f0c:	f7fb fc22 	bl	8001754 <_sbrk>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d102      	bne.n	8005f1a <_sbrk_r+0x1a>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	b103      	cbz	r3, 8005f1a <_sbrk_r+0x1a>
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	2000033c 	.word	0x2000033c

08005f20 <_write_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4d07      	ldr	r5, [pc, #28]	; (8005f40 <_write_r+0x20>)
 8005f24:	4604      	mov	r4, r0
 8005f26:	4608      	mov	r0, r1
 8005f28:	4611      	mov	r1, r2
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	602a      	str	r2, [r5, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f7fb fbbf 	bl	80016b2 <_write>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d102      	bne.n	8005f3e <_write_r+0x1e>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	b103      	cbz	r3, 8005f3e <_write_r+0x1e>
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	2000033c 	.word	0x2000033c

08005f44 <memcpy>:
 8005f44:	440a      	add	r2, r1
 8005f46:	4291      	cmp	r1, r2
 8005f48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f4c:	d100      	bne.n	8005f50 <memcpy+0xc>
 8005f4e:	4770      	bx	lr
 8005f50:	b510      	push	{r4, lr}
 8005f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f5a:	4291      	cmp	r1, r2
 8005f5c:	d1f9      	bne.n	8005f52 <memcpy+0xe>
 8005f5e:	bd10      	pop	{r4, pc}

08005f60 <_free_r>:
 8005f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f62:	2900      	cmp	r1, #0
 8005f64:	d044      	beq.n	8005ff0 <_free_r+0x90>
 8005f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6a:	9001      	str	r0, [sp, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f72:	bfb8      	it	lt
 8005f74:	18e4      	addlt	r4, r4, r3
 8005f76:	f7ff fddd 	bl	8005b34 <__malloc_lock>
 8005f7a:	4a1e      	ldr	r2, [pc, #120]	; (8005ff4 <_free_r+0x94>)
 8005f7c:	9801      	ldr	r0, [sp, #4]
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	b933      	cbnz	r3, 8005f90 <_free_r+0x30>
 8005f82:	6063      	str	r3, [r4, #4]
 8005f84:	6014      	str	r4, [r2, #0]
 8005f86:	b003      	add	sp, #12
 8005f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f8c:	f7ff bdd8 	b.w	8005b40 <__malloc_unlock>
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d908      	bls.n	8005fa6 <_free_r+0x46>
 8005f94:	6825      	ldr	r5, [r4, #0]
 8005f96:	1961      	adds	r1, r4, r5
 8005f98:	428b      	cmp	r3, r1
 8005f9a:	bf01      	itttt	eq
 8005f9c:	6819      	ldreq	r1, [r3, #0]
 8005f9e:	685b      	ldreq	r3, [r3, #4]
 8005fa0:	1949      	addeq	r1, r1, r5
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	e7ed      	b.n	8005f82 <_free_r+0x22>
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b10b      	cbz	r3, 8005fb0 <_free_r+0x50>
 8005fac:	42a3      	cmp	r3, r4
 8005fae:	d9fa      	bls.n	8005fa6 <_free_r+0x46>
 8005fb0:	6811      	ldr	r1, [r2, #0]
 8005fb2:	1855      	adds	r5, r2, r1
 8005fb4:	42a5      	cmp	r5, r4
 8005fb6:	d10b      	bne.n	8005fd0 <_free_r+0x70>
 8005fb8:	6824      	ldr	r4, [r4, #0]
 8005fba:	4421      	add	r1, r4
 8005fbc:	1854      	adds	r4, r2, r1
 8005fbe:	42a3      	cmp	r3, r4
 8005fc0:	6011      	str	r1, [r2, #0]
 8005fc2:	d1e0      	bne.n	8005f86 <_free_r+0x26>
 8005fc4:	681c      	ldr	r4, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	6053      	str	r3, [r2, #4]
 8005fca:	440c      	add	r4, r1
 8005fcc:	6014      	str	r4, [r2, #0]
 8005fce:	e7da      	b.n	8005f86 <_free_r+0x26>
 8005fd0:	d902      	bls.n	8005fd8 <_free_r+0x78>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	6003      	str	r3, [r0, #0]
 8005fd6:	e7d6      	b.n	8005f86 <_free_r+0x26>
 8005fd8:	6825      	ldr	r5, [r4, #0]
 8005fda:	1961      	adds	r1, r4, r5
 8005fdc:	428b      	cmp	r3, r1
 8005fde:	bf04      	itt	eq
 8005fe0:	6819      	ldreq	r1, [r3, #0]
 8005fe2:	685b      	ldreq	r3, [r3, #4]
 8005fe4:	6063      	str	r3, [r4, #4]
 8005fe6:	bf04      	itt	eq
 8005fe8:	1949      	addeq	r1, r1, r5
 8005fea:	6021      	streq	r1, [r4, #0]
 8005fec:	6054      	str	r4, [r2, #4]
 8005fee:	e7ca      	b.n	8005f86 <_free_r+0x26>
 8005ff0:	b003      	add	sp, #12
 8005ff2:	bd30      	pop	{r4, r5, pc}
 8005ff4:	20000334 	.word	0x20000334

08005ff8 <_malloc_usable_size_r>:
 8005ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ffc:	1f18      	subs	r0, r3, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bfbc      	itt	lt
 8006002:	580b      	ldrlt	r3, [r1, r0]
 8006004:	18c0      	addlt	r0, r0, r3
 8006006:	4770      	bx	lr

08006008 <_init>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr

08006014 <_fini>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr
