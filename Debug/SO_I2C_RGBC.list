
SO_I2C_RGBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f84  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f8  080061f8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080061f8  080061f8  000161f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006200  08006200  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006204  08006204  00016204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000005c  08006264  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08006264  00020330  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129b7  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002570  00000000  00000000  00032a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00034ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d55  00000000  00000000  000360e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000283c6  00000000  00000000  00036e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014bd5  00000000  00000000  0005f203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcc38  00000000  00000000  00073dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d74  00000000  00000000  00170a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00175784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800616c 	.word	0x0800616c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	0800616c 	.word	0x0800616c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <lcd_begin>:
static void lcd_sendCmd(LCD_t *lcd, char cmd);
static void delay_us(uint16_t time);

/* Exported functions --------------------------------------------------------*/
//init lcd display
void lcd_begin(LCD_t *lcd, uint8_t cols, uint8_t rows, uint8_t dotsize) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	4608      	mov	r0, r1
 80005e6:	4611      	mov	r1, r2
 80005e8:	461a      	mov	r2, r3
 80005ea:	4603      	mov	r3, r0
 80005ec:	70fb      	strb	r3, [r7, #3]
 80005ee:	460b      	mov	r3, r1
 80005f0:	70bb      	strb	r3, [r7, #2]
 80005f2:	4613      	mov	r3, r2
 80005f4:	707b      	strb	r3, [r7, #1]
	// 4 bit initialization
	lcd->displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if (rows > 1) lcd->displayfunction |= LCD_2LINE;
 80005fe:	78bb      	ldrb	r3, [r7, #2]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d908      	bls.n	8000616 <lcd_begin+0x3a>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	lcd->rows = rows;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	78ba      	ldrb	r2, [r7, #2]
 800061a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	lcd->cols = cols;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	78fa      	ldrb	r2, [r7, #3]
 8000622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	lcd_setRowOffsets(lcd, 0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000626:	78fa      	ldrb	r2, [r7, #3]
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	3340      	adds	r3, #64	; 0x40
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	4613      	mov	r3, r2
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	2100      	movs	r1, #0
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 f8c4 	bl	80007c2 <lcd_setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (rows == 1)) {
 800063a:	787b      	ldrb	r3, [r7, #1]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00b      	beq.n	8000658 <lcd_begin+0x7c>
 8000640:	78bb      	ldrb	r3, [r7, #2]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d108      	bne.n	8000658 <lcd_begin+0x7c>
		lcd->displayfunction |= LCD_5x10DOTS;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	b2da      	uxtb	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}

	HAL_Delay(50);	// wait for >40ms
 8000658:	2032      	movs	r0, #50	; 0x32
 800065a:	f001 f833 	bl	80016c4 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 800065e:	2103      	movs	r1, #3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 f948 	bl	80008f6 <lcd_sendCmd>
	HAL_Delay(5);		// wait for >4.1ms
 8000666:	2005      	movs	r0, #5
 8000668:	f001 f82c 	bl	80016c4 <HAL_Delay>
	lcd_sendCmd(lcd, 0x03);
 800066c:	2103      	movs	r1, #3
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 f941 	bl	80008f6 <lcd_sendCmd>
	delay_us(150);	// wait for >100us
 8000674:	2096      	movs	r0, #150	; 0x96
 8000676:	f000 f95b 	bl	8000930 <delay_us>
	lcd_sendCmd(lcd, 0x03);
 800067a:	2103      	movs	r1, #3
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f93a 	bl	80008f6 <lcd_sendCmd>
	lcd_sendCmd(lcd, 0x02);	//set 4 bit mode
 8000682:	2102      	movs	r1, #2
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f936 	bl	80008f6 <lcd_sendCmd>
	HAL_Delay(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f001 f81a 	bl	80016c4 <HAL_Delay>

	// finally, set interface type, # lines and font size
	lcd_sendCmd(lcd, LCD_FUNCTIONSET | lcd->displayfunction);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000696:	f043 0320 	orr.w	r3, r3, #32
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f929 	bl	80008f6 <lcd_sendCmd>
	//set display control D=1,C=0, B=0, display on, cursor off and cursor blink off
	lcd->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2204      	movs	r2, #4
 80006a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_display(lcd);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f824 	bl	80006fa <lcd_display>
	lcd_clear(lcd);  // clear display
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f815 	bl	80006e2 <lcd_clear>
	HAL_Delay(2);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f001 f803 	bl	80016c4 <HAL_Delay>
	// set the entry mode --> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2202      	movs	r2, #2
 80006c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd_sendCmd(lcd, LCD_ENTRYMODESET | lcd->displaymode);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f90e 	bl	80008f6 <lcd_sendCmd>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <lcd_clear>:
// ----------------------------------------------------------------

//clear lcd display
void lcd_clear(LCD_t *lcd) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	lcd_sendCmd(lcd, LCD_CLEARDISPLAY);
 80006ea:	2101      	movs	r1, #1
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f902 	bl	80008f6 <lcd_sendCmd>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <lcd_display>:
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
}
// ----------------------------------------------------------------

// Turn the display on
void lcd_display(LCD_t *lcd) {
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
	lcd->displaycontrol |= LCD_DISPLAYON;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	b2da      	uxtb	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	lcd_sendCmd(lcd, LCD_DISPLAYCONTROL | lcd->displaycontrol);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4619      	mov	r1, r3
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f000 f8e7 	bl	80008f6 <lcd_sendCmd>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <lcd_setCursor>:
	lcd_sendCmd(lcd, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}
// ----------------------------------------------------------------

//set cursor position
void lcd_setCursor(LCD_t *lcd, uint8_t col, uint8_t row) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
 800073c:	4613      	mov	r3, r2
 800073e:	70bb      	strb	r3, [r7, #2]
	const size_t max_rows = sizeof(lcd->row_offsets) / sizeof(*lcd->row_offsets);
 8000740:	2304      	movs	r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
	if (row >= max_rows) {
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	429a      	cmp	r2, r3
 800074a:	d803      	bhi.n	8000754 <lcd_setCursor+0x24>
		row = max_rows - 1;    // we count rows starting w/0
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	3b01      	subs	r3, #1
 8000752:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= lcd->rows) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800075a:	78ba      	ldrb	r2, [r7, #2]
 800075c:	429a      	cmp	r2, r3
 800075e:	d304      	bcc.n	800076a <lcd_setCursor+0x3a>
		row = lcd->rows - 1;    // we count rows starting w/0
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000766:	3b01      	subs	r3, #1
 8000768:	70bb      	strb	r3, [r7, #2]
	}

	lcd_sendCmd(lcd, LCD_SETDDRAMADDR | (col + lcd->row_offsets[row]));
 800076a:	78bb      	ldrb	r3, [r7, #2]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	4413      	add	r3, r2
 8000778:	b2db      	uxtb	r3, r3
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000780:	b25b      	sxtb	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f8b5 	bl	80008f6 <lcd_sendCmd>
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <lcd_print>:
// ----------------------------------------------------------------

//send strings to lcd
void lcd_print(LCD_t *lcd, char *str) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	while (*str)
 800079e:	e007      	b.n	80007b0 <lcd_print+0x1c>
		lcd_sendData(lcd, *str++);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	603a      	str	r2, [r7, #0]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 f886 	bl	80008bc <lcd_sendData>
	while (*str)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f3      	bne.n	80007a0 <lcd_print+0xc>
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <lcd_setRowOffsets>:
// ----------------------------------------------------------------

/* Privated functions --------------------------------------------------------*/
//set row offset for diferent display
static void lcd_setRowOffsets(LCD_t *lcd, int row0, int row1, int row2,
    int row3) {
 80007c2:	b480      	push	{r7}
 80007c4:	b085      	sub	sp, #20
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60f8      	str	r0, [r7, #12]
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	603b      	str	r3, [r7, #0]
	lcd->row_offsets[0] = row0;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	lcd->row_offsets[1] = row1;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	lcd->row_offsets[2] = row2;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	lcd->row_offsets[3] = row3;
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <lcd_send>:
// ----------------------------------------------------------------

//send info to lcd in 4 byte mode
static void lcd_send(LCD_t *lcd, char data, uint8_t rs) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
 8000810:	4613      	mov	r3, r2
 8000812:	70bb      	strb	r3, [r7, #2]
	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(lcd->RS_port, lcd->RS_pin, rs);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	889b      	ldrh	r3, [r3, #4]
 800081c:	78ba      	ldrb	r2, [r7, #2]
 800081e:	4619      	mov	r1, r3
 8000820:	f001 fadc 	bl	8001ddc <HAL_GPIO_WritePin>

	// write the data to the respective pin
	HAL_GPIO_WritePin(lcd->D7_port, lcd->D7_pin, ((data >> 3) & 0x01));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	08db      	lsrs	r3, r3, #3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	f001 facf 	bl	8001ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_port, lcd->D6_pin, ((data >> 2) & 0x01));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	089b      	lsrs	r3, r3, #2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	f001 fac2 	bl	8001ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_port, lcd->D5_pin, ((data >> 1) & 0x01));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a18      	ldr	r0, [r3, #32]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	085b      	lsrs	r3, r3, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	f001 fab5 	bl	8001ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_port, lcd->D4_pin, ((data >> 0) & 0x01));
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6998      	ldr	r0, [r3, #24]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	8b99      	ldrh	r1, [r3, #28]
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	461a      	mov	r2, r3
 8000884:	f001 faaa 	bl	8001ddc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_SET);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6918      	ldr	r0, [r3, #16]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	8a9b      	ldrh	r3, [r3, #20]
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f001 faa2 	bl	8001ddc <HAL_GPIO_WritePin>
	delay_us(1);	// enable pulse must be > 450ns
 8000898:	2001      	movs	r0, #1
 800089a:	f000 f849 	bl	8000930 <delay_us>
	HAL_GPIO_WritePin(lcd->EN_port, lcd->EN_pin, GPIO_PIN_RESET);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6918      	ldr	r0, [r3, #16]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	8a9b      	ldrh	r3, [r3, #20]
 80008a6:	2200      	movs	r2, #0
 80008a8:	4619      	mov	r1, r3
 80008aa:	f001 fa97 	bl	8001ddc <HAL_GPIO_WritePin>
	delay_us(50);	// commands need > 37us to settle
 80008ae:	2032      	movs	r0, #50	; 0x32
 80008b0:	f000 f83e 	bl	8000930 <delay_us>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <lcd_sendData>:
// ----------------------------------------------------------------

//send data to lcd
static void lcd_sendData(LCD_t *lcd, char data) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	char _data;

	// send higher nibble
	_data = ((data >> 4) & 0x0f);
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	091b      	lsrs	r3, r3, #4
 80008cc:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);  // rs =1 for sending data
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff95 	bl	8000804 <lcd_send>

	// send Lower nibble
	_data = ((data) & 0x0f);
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	f003 030f 	and.w	r3, r3, #15
 80008e0:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _data, 1);
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	2201      	movs	r2, #1
 80008e6:	4619      	mov	r1, r3
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ff8b 	bl	8000804 <lcd_send>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <lcd_sendCmd>:
// ----------------------------------------------------------------

//send command to lcd
static void lcd_sendCmd(LCD_t *lcd, char cmd) {
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	70fb      	strb	r3, [r7, #3]
	char _cmd;

	// send higher nibble
	_cmd = ((cmd >> 4) & 0x0f);
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	091b      	lsrs	r3, r3, #4
 8000906:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);  // rs = 0 for sending command
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ff78 	bl	8000804 <lcd_send>

	// send Lower nibble
	_cmd = ((cmd) & 0x0f);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	73fb      	strb	r3, [r7, #15]
	lcd_send(lcd, _cmd, 0);
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	2200      	movs	r2, #0
 8000920:	4619      	mov	r1, r3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ff6e 	bl	8000804 <lcd_send>
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <delay_us>:
// ----------------------------------------------------------------

//set delay in microseconds
static void delay_us(uint16_t time) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
	uint16_t delay = time * (HAL_RCC_GetHCLKFreq() / 1000000);
 800093a:	f002 fcb9 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 800093e:	4603      	mov	r3, r0
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <delay_us+0x44>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	0c9b      	lsrs	r3, r3, #18
 8000948:	b29b      	uxth	r3, r3
 800094a:	88fa      	ldrh	r2, [r7, #6]
 800094c:	fb12 f303 	smulbb	r3, r2, r3
 8000950:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < delay; i += 14) {
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e003      	b.n	8000960 <delay_us+0x30>
		__ASM("NOP");
 8000958:	bf00      	nop
	for (int i = 0; i < delay; i += 14) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	330e      	adds	r3, #14
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	897b      	ldrh	r3, [r7, #10]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf7      	blt.n	8000958 <delay_us+0x28>
	}
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	431bde83 	.word	0x431bde83

08000978 <display_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void display_message ( char *title,  char *message ) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
//	lcd_clear(&lcd);
	lcd_setCursor(&lcd, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <display_message+0x38>)
 8000988:	f7ff fed2 	bl	8000730 <lcd_setCursor>
	lcd_print(&lcd, title);
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4808      	ldr	r0, [pc, #32]	; (80009b0 <display_message+0x38>)
 8000990:	f7ff ff00 	bl	8000794 <lcd_print>
	lcd_setCursor(&lcd, 0, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	2100      	movs	r1, #0
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <display_message+0x38>)
 800099a:	f7ff fec9 	bl	8000730 <lcd_setCursor>
	lcd_print(&lcd, message);
 800099e:	6839      	ldr	r1, [r7, #0]
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <display_message+0x38>)
 80009a2:	f7ff fef7 	bl	8000794 <lcd_print>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200001a0 	.word	0x200001a0

080009b4 <DEV_I2C_ReadWord>:


uint16_t DEV_I2C_ReadWord(uint8_t add_)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af04      	add	r7, sp, #16
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
    uint8_t Buf[2]={0, 0};
 80009be:	2300      	movs	r3, #0
 80009c0:	81bb      	strh	r3, [r7, #12]
		HAL_I2C_Mem_Read(&hi2c2, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	2310      	movs	r3, #16
 80009c8:	9302      	str	r3, [sp, #8]
 80009ca:	2302      	movs	r3, #2
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	2152      	movs	r1, #82	; 0x52
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <DEV_I2C_ReadWord+0x44>)
 80009da:	f001 fbbd 	bl	8002158 <HAL_I2C_Mem_Read>
    return ((Buf[1] << 8) | (Buf[0] & 0xff));
 80009de:	7b7b      	ldrb	r3, [r7, #13]
 80009e0:	021b      	lsls	r3, r3, #8
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	7b3b      	ldrb	r3, [r7, #12]
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b29b      	uxth	r3, r3
} // DEV_I2C_ReadWord END
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000078 	.word	0x20000078

080009fc <TCS34725_ReadWord>:


static uint16_t TCS34725_ReadWord(uint8_t add)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
    add = add | TCS34725_CMD_BIT;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a0c:	71fb      	strb	r3, [r7, #7]
    return DEV_I2C_ReadWord(add);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ffcf 	bl	80009b4 <DEV_I2C_ReadWord>
 8000a16:	4603      	mov	r3, r0
} // TCS34725_ReadWord END
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <DEV_I2C_WriteByte>:

void DEV_I2C_WriteByte(uint8_t add_, uint8_t data_)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af04      	add	r7, sp, #16
 8000a26:	4603      	mov	r3, r0
 8000a28:	460a      	mov	r2, r1
 8000a2a:	71fb      	strb	r3, [r7, #7]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71bb      	strb	r3, [r7, #6]
	uint8_t Buf[1] = {0};
 8000a30:	2300      	movs	r3, #0
 8000a32:	733b      	strb	r3, [r7, #12]
	Buf[0] = data_;
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c2, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	2301      	movs	r3, #1
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	2152      	movs	r1, #82	; 0x52
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <DEV_I2C_WriteByte+0x3c>)
 8000a50:	f001 fa6e 	bl	8001f30 <HAL_I2C_Mem_Write>
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000078 	.word	0x20000078

08000a60 <TCS34725_WriteByte>:

void TCS34725_WriteByte(uint8_t add, uint8_t data)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	71bb      	strb	r3, [r7, #6]
    add = add | TCS34725_CMD_BIT;
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a76:	71fb      	strb	r3, [r7, #7]
    DEV_I2C_WriteByte(add, data);
 8000a78:	79ba      	ldrb	r2, [r7, #6]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ffce 	bl	8000a20 <DEV_I2C_WriteByte>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <TCS34725_Init>:

void TCS34725_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8000a90:	2101      	movs	r1, #1
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff ffe4 	bl	8000a60 <TCS34725_WriteByte>
	HAL_Delay(3);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 fe13 	bl	80016c4 <HAL_Delay>
	TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff ffdd 	bl	8000a60 <TCS34725_WriteByte>
	HAL_Delay(3);
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f000 fe0c 	bl	80016c4 <HAL_Delay>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <TCS34725_Set_Integration_Time>:

void TCS34725_Set_Integration_Time(uint16_t time)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
    /* Update the timing register */
    TCS34725_WriteByte(TCS34725_ATIME, time);
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4619      	mov	r1, r3
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff ffcd 	bl	8000a60 <TCS34725_WriteByte>
//    IntegrationTime_t = time;
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <TCS34725_Set_Gain>:

void TCS34725_Set_Gain(uint16_t gain)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	80fb      	strh	r3, [r7, #6]
	TCS34725_WriteByte(TCS34725_CONTROL, gain);
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4619      	mov	r1, r3
 8000ade:	200f      	movs	r0, #15
 8000ae0:	f7ff ffbe 	bl	8000a60 <TCS34725_WriteByte>
//    Gain_t = gain;
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <TCS34725_Get_RGBData>:

RGB TCS34725_Get_RGBData()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    RGB temp;
    temp.C = TCS34725_ReadWord(TCS34725_CDATAL | TCS34725_CMD_Read_Word);
 8000af4:	2034      	movs	r0, #52	; 0x34
 8000af6:	f7ff ff81 	bl	80009fc <TCS34725_ReadWord>
 8000afa:	4603      	mov	r3, r0
 8000afc:	81fb      	strh	r3, [r7, #14]
    temp.R = TCS34725_ReadWord(TCS34725_RDATAL | TCS34725_CMD_Read_Word);
 8000afe:	2036      	movs	r0, #54	; 0x36
 8000b00:	f7ff ff7c 	bl	80009fc <TCS34725_ReadWord>
 8000b04:	4603      	mov	r3, r0
 8000b06:	813b      	strh	r3, [r7, #8]
    temp.G = TCS34725_ReadWord(TCS34725_GDATAL | TCS34725_CMD_Read_Word);
 8000b08:	2038      	movs	r0, #56	; 0x38
 8000b0a:	f7ff ff77 	bl	80009fc <TCS34725_ReadWord>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	817b      	strh	r3, [r7, #10]
    temp.B = TCS34725_ReadWord(TCS34725_BDATAL | TCS34725_CMD_Read_Word);
 8000b12:	203a      	movs	r0, #58	; 0x3a
 8000b14:	f7ff ff72 	bl	80009fc <TCS34725_ReadWord>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	81bb      	strh	r3, [r7, #12]

    HAL_Delay(3);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 fdd1 	bl	80016c4 <HAL_Delay>
    return temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	461a      	mov	r2, r3
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	cb03      	ldmia	r3!, {r0, r1}
 8000b2c:	6010      	str	r0, [r2, #0]
 8000b2e:	6051      	str	r1, [r2, #4]
} // TCS34725_Get_RGBData END
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <TCS34725_GetRGB888>:
function:   Convert raw RGB values to RGB888 format
parameter	:
     rgb    : RGBC Numerical value
******************************************************************************/
uint32_t TCS34725_GetRGB888(RGB rgb)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	463b      	mov	r3, r7
 8000b40:	e883 0003 	stmia.w	r3, {r0, r1}
    float i=1;
 8000b44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b48:	60fb      	str	r3, [r7, #12]
    //Limit data range
    if(rgb.R >= rgb.G && rgb.R >= rgb.B){
 8000b4a:	883a      	ldrh	r2, [r7, #0]
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d311      	bcc.n	8000b76 <TCS34725_GetRGB888+0x3e>
 8000b52:	883a      	ldrh	r2, [r7, #0]
 8000b54:	88bb      	ldrh	r3, [r7, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d30d      	bcc.n	8000b76 <TCS34725_GetRGB888+0x3e>
        i = rgb.R / 255 + 1;
 8000b5a:	883b      	ldrh	r3, [r7, #0]
 8000b5c:	4a63      	ldr	r2, [pc, #396]	; (8000cec <TCS34725_GetRGB888+0x1b4>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	09db      	lsrs	r3, r3, #7
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	3301      	adds	r3, #1
 8000b68:	ee07 3a90 	vmov	s15, r3
 8000b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b70:	edc7 7a03 	vstr	s15, [r7, #12]
 8000b74:	e02a      	b.n	8000bcc <TCS34725_GetRGB888+0x94>
    }
    else if(rgb.G >= rgb.R && rgb.G >= rgb.B){
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	883b      	ldrh	r3, [r7, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d311      	bcc.n	8000ba2 <TCS34725_GetRGB888+0x6a>
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	88bb      	ldrh	r3, [r7, #4]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d30d      	bcc.n	8000ba2 <TCS34725_GetRGB888+0x6a>
        i = rgb.G / 255 + 1;
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	4a58      	ldr	r2, [pc, #352]	; (8000cec <TCS34725_GetRGB888+0x1b4>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	09db      	lsrs	r3, r3, #7
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	3301      	adds	r3, #1
 8000b94:	ee07 3a90 	vmov	s15, r3
 8000b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b9c:	edc7 7a03 	vstr	s15, [r7, #12]
 8000ba0:	e014      	b.n	8000bcc <TCS34725_GetRGB888+0x94>
    }
    else if(rgb.B >=  rgb.G && rgb.B >= rgb.R){
 8000ba2:	88ba      	ldrh	r2, [r7, #4]
 8000ba4:	887b      	ldrh	r3, [r7, #2]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d310      	bcc.n	8000bcc <TCS34725_GetRGB888+0x94>
 8000baa:	88ba      	ldrh	r2, [r7, #4]
 8000bac:	883b      	ldrh	r3, [r7, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d30c      	bcc.n	8000bcc <TCS34725_GetRGB888+0x94>
        i = rgb.B / 255 + 1;
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	4a4d      	ldr	r2, [pc, #308]	; (8000cec <TCS34725_GetRGB888+0x1b4>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	09db      	lsrs	r3, r3, #7
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc8:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    if(i!=0)
 8000bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd8:	d02c      	beq.n	8000c34 <TCS34725_GetRGB888+0xfc>
    {
        rgb.R = (rgb.R) / i;
 8000bda:	883b      	ldrh	r3, [r7, #0]
 8000bdc:	ee07 3a90 	vmov	s15, r3
 8000be0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000be4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bf0:	ee17 3a90 	vmov	r3, s15
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	803b      	strh	r3, [r7, #0]
        rgb.G = (rgb.G) / i;
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	ee07 3a90 	vmov	s15, r3
 8000bfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c02:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c0e:	ee17 3a90 	vmov	r3, s15
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	807b      	strh	r3, [r7, #2]
        rgb.B = (rgb.B) / i;
 8000c16:	88bb      	ldrh	r3, [r7, #4]
 8000c18:	ee07 3a90 	vmov	s15, r3
 8000c1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c20:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c2c:	ee17 3a90 	vmov	r3, s15
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	80bb      	strh	r3, [r7, #4]
    }

    if(rgb.R > 30)
 8000c34:	883b      	ldrh	r3, [r7, #0]
 8000c36:	2b1e      	cmp	r3, #30
 8000c38:	d903      	bls.n	8000c42 <TCS34725_GetRGB888+0x10a>
        rgb.R = rgb.R - 30;
 8000c3a:	883b      	ldrh	r3, [r7, #0]
 8000c3c:	3b1e      	subs	r3, #30
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	803b      	strh	r3, [r7, #0]
    if(rgb.G > 30)
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b1e      	cmp	r3, #30
 8000c46:	d903      	bls.n	8000c50 <TCS34725_GetRGB888+0x118>
        rgb.G = rgb.G - 30;
 8000c48:	887b      	ldrh	r3, [r7, #2]
 8000c4a:	3b1e      	subs	r3, #30
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	807b      	strh	r3, [r7, #2]
    if(rgb.B > 30)
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	2b1e      	cmp	r3, #30
 8000c54:	d903      	bls.n	8000c5e <TCS34725_GetRGB888+0x126>
        rgb.B = rgb.B - 30;
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	3b1e      	subs	r3, #30
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	80bb      	strh	r3, [r7, #4]
    rgb.R = rgb.R * 255 / 225;
 8000c5e:	883b      	ldrh	r3, [r7, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4613      	mov	r3, r2
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <TCS34725_GetRGB888+0x1b8>)
 8000c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6e:	441a      	add	r2, r3
 8000c70:	11d2      	asrs	r2, r2, #7
 8000c72:	17db      	asrs	r3, r3, #31
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	803b      	strh	r3, [r7, #0]
    rgb.G = rgb.G * 255 / 225;
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4613      	mov	r3, r2
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <TCS34725_GetRGB888+0x1b8>)
 8000c86:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8a:	441a      	add	r2, r3
 8000c8c:	11d2      	asrs	r2, r2, #7
 8000c8e:	17db      	asrs	r3, r3, #31
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	807b      	strh	r3, [r7, #2]
    rgb.B = rgb.B * 255 / 225;
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <TCS34725_GetRGB888+0x1b8>)
 8000ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca6:	441a      	add	r2, r3
 8000ca8:	11d2      	asrs	r2, r2, #7
 8000caa:	17db      	asrs	r3, r3, #31
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	80bb      	strh	r3, [r7, #4]

    if(rgb.R>255)
 8000cb2:	883b      	ldrh	r3, [r7, #0]
 8000cb4:	2bff      	cmp	r3, #255	; 0xff
 8000cb6:	d901      	bls.n	8000cbc <TCS34725_GetRGB888+0x184>
           rgb.R = 255;
 8000cb8:	23ff      	movs	r3, #255	; 0xff
 8000cba:	803b      	strh	r3, [r7, #0]
    if(rgb.G>255)
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	2bff      	cmp	r3, #255	; 0xff
 8000cc0:	d901      	bls.n	8000cc6 <TCS34725_GetRGB888+0x18e>
           rgb.G = 255;
 8000cc2:	23ff      	movs	r3, #255	; 0xff
 8000cc4:	807b      	strh	r3, [r7, #2]
    if(rgb.B>255)
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
 8000cca:	d901      	bls.n	8000cd0 <TCS34725_GetRGB888+0x198>
           rgb.B = 255;
 8000ccc:	23ff      	movs	r3, #255	; 0xff
 8000cce:	80bb      	strh	r3, [r7, #4]
    return (rgb.R << 16) | (rgb.G << 8) | (rgb.B);
 8000cd0:	883b      	ldrh	r3, [r7, #0]
 8000cd2:	041a      	lsls	r2, r3, #16
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	88ba      	ldrh	r2, [r7, #4]
 8000cdc:	4313      	orrs	r3, r2
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	80808081 	.word	0x80808081
 8000cf0:	91a2b3c5 	.word	0x91a2b3c5

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b09f      	sub	sp, #124	; 0x7c
 8000cf8:	af02      	add	r7, sp, #8
	uint8_t b_data;

	char buffer[50];
	int buffer_len;

	char title[] = "Banana Grade:";
 8000cfa:	4b66      	ldr	r3, [pc, #408]	; (8000e94 <main+0x1a0>)
 8000cfc:	f107 040c 	add.w	r4, r7, #12
 8000d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d02:	c407      	stmia	r4!, {r0, r1, r2}
 8000d04:	8023      	strh	r3, [r4, #0]
	char rx_buffer[10] = "";
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	809a      	strh	r2, [r3, #4]
//	uint8_t rx_index = 0;
//	uint32_t rx_index = 0;
	uint8_t lcd_flag = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f000 fc77 	bl	800160a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f8ca 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d20:	f000 f9ee 	bl	8001100 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000d24:	f000 f922 	bl	8000f6c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000d28:	f000 f9ba 	bl	80010a0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000d2c:	f000 f95e 	bl	8000fec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TCS34725_Init();
 8000d30:	f7ff feac 	bl	8000a8c <TCS34725_Init>
//    TCS34725_INTEGRATIONTIME_24MS   = 0xF6,   /**<  24ms  - 10 cycles  - Max Count: 10240 */
//    TCS34725_INTEGRATIONTIME_50MS   = 0xEB,   /**<  50ms  - 20 cycles  - Max Count: 20480 */
//    TCS34725_INTEGRATIONTIME_101MS  = 0xD5,   /**<  101ms - 42 cycles  - Max Count: 43008 */
//    TCS34725_INTEGRATIONTIME_154MS  = 0xC0,   /**<  154ms - 64 cycles  - Max Count: 65535 */
//    TCS34725_INTEGRATIONTIME_700MS  = 0x00    /**<  700ms - 256 cycles - Max Count: 65535 */
  TCS34725_Set_Integration_Time(0xD5);
 8000d34:	20d5      	movs	r0, #213	; 0xd5
 8000d36:	f7ff febb 	bl	8000ab0 <TCS34725_Set_Integration_Time>

//    TCS34725_GAIN_1X                = 0x00,   /**<  No gain  */
//    TCS34725_GAIN_4X                = 0x01,   /**<  4x gain  */
//    TCS34725_GAIN_16X               = 0x02,   /**<  16x gain */
//    TCS34725_GAIN_60X               = 0x03    /**<  60x gain */
  TCS34725_Set_Gain(0x01);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff fec7 	bl	8000ace <TCS34725_Set_Gain>

//  TCS34725_Set_Integration_Time(0x00);
//  TCS34725_Set_Gain(0x01);

  lcd.RS_port = RS_PORT;
 8000d40:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <main+0x1a4>)
 8000d42:	4a56      	ldr	r2, [pc, #344]	; (8000e9c <main+0x1a8>)
 8000d44:	601a      	str	r2, [r3, #0]
  lcd.RS_pin = RS_PIN;
 8000d46:	4b54      	ldr	r3, [pc, #336]	; (8000e98 <main+0x1a4>)
 8000d48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d4c:	809a      	strh	r2, [r3, #4]

  lcd.EN_port = EN_PORT;
 8000d4e:	4b52      	ldr	r3, [pc, #328]	; (8000e98 <main+0x1a4>)
 8000d50:	4a53      	ldr	r2, [pc, #332]	; (8000ea0 <main+0x1ac>)
 8000d52:	611a      	str	r2, [r3, #16]
  lcd.EN_pin = EN_PIN;
 8000d54:	4b50      	ldr	r3, [pc, #320]	; (8000e98 <main+0x1a4>)
 8000d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5a:	829a      	strh	r2, [r3, #20]

  lcd.D4_port = D4_PORT;
 8000d5c:	4b4e      	ldr	r3, [pc, #312]	; (8000e98 <main+0x1a4>)
 8000d5e:	4a4f      	ldr	r2, [pc, #316]	; (8000e9c <main+0x1a8>)
 8000d60:	619a      	str	r2, [r3, #24]
  lcd.D4_pin = D4_PIN;
 8000d62:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <main+0x1a4>)
 8000d64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d68:	839a      	strh	r2, [r3, #28]
  lcd.D5_port = D5_PORT;
 8000d6a:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <main+0x1a4>)
 8000d6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ea0 <main+0x1ac>)
 8000d6e:	621a      	str	r2, [r3, #32]
  lcd.D5_pin = D5_PIN;
 8000d70:	4b49      	ldr	r3, [pc, #292]	; (8000e98 <main+0x1a4>)
 8000d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d76:	849a      	strh	r2, [r3, #36]	; 0x24
  lcd.D6_port = D6_PORT;
 8000d78:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <main+0x1a4>)
 8000d7a:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <main+0x1ac>)
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
  lcd.D6_pin = D6_PIN;
 8000d7e:	4b46      	ldr	r3, [pc, #280]	; (8000e98 <main+0x1a4>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	859a      	strh	r2, [r3, #44]	; 0x2c
  lcd.D7_port = D7_PORT;
 8000d86:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <main+0x1a4>)
 8000d88:	4a44      	ldr	r2, [pc, #272]	; (8000e9c <main+0x1a8>)
 8000d8a:	631a      	str	r2, [r3, #48]	; 0x30
  lcd.D7_pin = D7_PIN;
 8000d8c:	4b42      	ldr	r3, [pc, #264]	; (8000e98 <main+0x1a4>)
 8000d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d92:	869a      	strh	r2, [r3, #52]	; 0x34

  lcd_begin(&lcd, 16, 2, LCD_5x8DOTS);
 8000d94:	2300      	movs	r3, #0
 8000d96:	2202      	movs	r2, #2
 8000d98:	2110      	movs	r1, #16
 8000d9a:	483f      	ldr	r0, [pc, #252]	; (8000e98 <main+0x1a4>)
 8000d9c:	f7ff fc1e 	bl	80005dc <lcd_begin>
  lcd_clear(&lcd);
 8000da0:	483d      	ldr	r0, [pc, #244]	; (8000e98 <main+0x1a4>)
 8000da2:	f7ff fc9e 	bl	80006e2 <lcd_clear>
  HAL_Delay(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f000 fc8c 	bl	80016c4 <HAL_Delay>
  display_message(title, "pending...");
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	493c      	ldr	r1, [pc, #240]	; (8000ea4 <main+0x1b0>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fde0 	bl	8000978 <display_message>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint32_t pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);	// read button in PA3
 8000db8:	2108      	movs	r1, #8
 8000dba:	483b      	ldr	r0, [pc, #236]	; (8000ea8 <main+0x1b4>)
 8000dbc:	f000 fff6 	bl	8001dac <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	66bb      	str	r3, [r7, #104]	; 0x68

	  if (pin_state != GPIO_PIN_SET) {
 8000dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d038      	beq.n	8000e3c <main+0x148>

		  lcd_flag = 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		  rgb=TCS34725_Get_RGBData();		// read sensor
 8000dd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fe89 	bl	8000aec <TCS34725_Get_RGBData>
		  RGB888=TCS34725_GetRGB888(rgb);	// convert sensor data
 8000dda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000de2:	f7ff fea9 	bl	8000b38 <TCS34725_GetRGB888>
 8000de6:	6638      	str	r0, [r7, #96]	; 0x60
		  r_data = RGB888>>16;
 8000de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dea:	0c1b      	lsrs	r3, r3, #16
 8000dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  g_data = (RGB888>>8) & 0xff;
 8000df0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		  b_data = (RGB888) & 0xff;
 8000df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dfa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

		  buffer_len = sprintf(buffer, "%u,%u,%u\n", r_data, g_data, b_data);
 8000dfe:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000e02:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8000e06:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000e0a:	f107 001c 	add.w	r0, r7, #28
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	460b      	mov	r3, r1
 8000e12:	4926      	ldr	r1, [pc, #152]	; (8000eac <main+0x1b8>)
 8000e14:	f004 fd06 	bl	8005824 <siprintf>
 8000e18:	65b8      	str	r0, [r7, #88]	; 0x58
		  status = HAL_UART_Transmit(&huart3, (uint8_t *) buffer, buffer_len, 1000);	// send sensor data to client
 8000e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	f107 011c 	add.w	r1, r7, #28
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	4822      	ldr	r0, [pc, #136]	; (8000eb0 <main+0x1bc>)
 8000e28:	f003 fbe4 	bl	80045f4 <HAL_UART_Transmit>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		  HAL_Delay(1000);
 8000e32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e36:	f000 fc45 	bl	80016c4 <HAL_Delay>
 8000e3a:	e7bd      	b.n	8000db8 <main+0xc4>

	  } else {

		  if (lcd_flag) {
 8000e3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0b9      	beq.n	8000db8 <main+0xc4>

			  HAL_Delay(1000);
 8000e44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e48:	f000 fc3c 	bl	80016c4 <HAL_Delay>

			  status = HAL_UART_Receive(&huart3, (uint8_t *) rx_buffer, 10, 1000); // Receive grade from client
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	220a      	movs	r2, #10
 8000e54:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <main+0x1bc>)
 8000e56:	f003 fc50 	bl	80046fa <HAL_UART_Receive>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			  HAL_Delay(1000);
 8000e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e64:	f000 fc2e 	bl	80016c4 <HAL_Delay>

			  lcd_clear(&lcd);
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <main+0x1a4>)
 8000e6a:	f7ff fc3a 	bl	80006e2 <lcd_clear>
			  HAL_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f000 fc28 	bl	80016c4 <HAL_Delay>
			  display_message(title, rx_buffer); // Display message
 8000e74:	463a      	mov	r2, r7
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fd7b 	bl	8000978 <display_message>

			  if (status == HAL_TIMEOUT) {
 8000e82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d196      	bne.n	8000db8 <main+0xc4>
				  lcd_flag = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  {
 8000e90:	e792      	b.n	8000db8 <main+0xc4>
 8000e92:	bf00      	nop
 8000e94:	0800619c 	.word	0x0800619c
 8000e98:	200001a0 	.word	0x200001a0
 8000e9c:	40021400 	.word	0x40021400
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	08006184 	.word	0x08006184
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	08006190 	.word	0x08006190
 8000eb0:	20000118 	.word	0x20000118

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	; 0x50
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	2234      	movs	r2, #52	; 0x34
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f004 fcce 	bl	8005864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <SystemClock_Config+0xb0>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <SystemClock_Config+0xb0>)
 8000ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <SystemClock_Config+0xb0>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <SystemClock_Config+0xb4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <SystemClock_Config+0xb4>)
 8000efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <SystemClock_Config+0xb4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f10:	2301      	movs	r3, #1
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f14:	2310      	movs	r3, #16
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fd65 	bl	80029f0 <HAL_RCC_OscConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000f2c:	f000 f97e 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f30:	230f      	movs	r3, #15
 8000f32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fffe 	bl	8002f4c <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f56:	f000 f969 	bl	800122c <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	; 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <MX_I2C2_Init+0x78>)
 8000f74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <MX_I2C2_Init+0x7c>)
 8000f7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000fa8:	f000 ff32 	bl	8001e10 <HAL_I2C_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000fb2:	f000 f93b 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000fba:	f001 fc81 	bl	80028c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fc4:	f000 f932 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_I2C2_Init+0x74>)
 8000fcc:	f001 fcc3 	bl	8002956 <HAL_I2CEx_ConfigDigitalFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fd6:	f000 f929 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000078 	.word	0x20000078
 8000fe4:	40005800 	.word	0x40005800
 8000fe8:	00303d5b 	.word	0x00303d5b

08000fec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_TIM3_Init+0xac>)
 8001012:	4a22      	ldr	r2, [pc, #136]	; (800109c <MX_TIM3_Init+0xb0>)
 8001014:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36-1;
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <MX_TIM3_Init+0xac>)
 8001018:	2223      	movs	r2, #35	; 0x23
 800101a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <MX_TIM3_Init+0xac>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_TIM3_Init+0xac>)
 8001024:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001028:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_TIM3_Init+0xac>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_TIM3_Init+0xac>)
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001036:	4818      	ldr	r0, [pc, #96]	; (8001098 <MX_TIM3_Init+0xac>)
 8001038:	f002 fd96 	bl	8003b68 <HAL_TIM_PWM_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001042:	f000 f8f3 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <MX_TIM3_Init+0xac>)
 8001056:	f003 f9f1 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001060:	f000 f8e4 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	220c      	movs	r2, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_TIM3_Init+0xac>)
 800107c:	f002 fdcc 	bl	8003c18 <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001086:	f000 f8d1 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <MX_TIM3_Init+0xac>)
 800108c:	f000 f978 	bl	8001380 <HAL_TIM_MspPostInit>

}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200000cc 	.word	0x200000cc
 800109c:	40000400 	.word	0x40000400

080010a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <MX_USART3_UART_Init+0x5c>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART3_UART_Init+0x58>)
 80010e4:	f003 fa38 	bl	8004558 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010ee:	f000 f89d 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000118 	.word	0x20000118
 80010fc:	40004800 	.word	0x40004800

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <MX_GPIO_Init+0x11c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a40      	ldr	r2, [pc, #256]	; (800121c <MX_GPIO_Init+0x11c>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <MX_GPIO_Init+0x11c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <MX_GPIO_Init+0x11c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a3a      	ldr	r2, [pc, #232]	; (800121c <MX_GPIO_Init+0x11c>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b38      	ldr	r3, [pc, #224]	; (800121c <MX_GPIO_Init+0x11c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b35      	ldr	r3, [pc, #212]	; (800121c <MX_GPIO_Init+0x11c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a34      	ldr	r2, [pc, #208]	; (800121c <MX_GPIO_Init+0x11c>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <MX_GPIO_Init+0x11c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <MX_GPIO_Init+0x11c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2e      	ldr	r2, [pc, #184]	; (800121c <MX_GPIO_Init+0x11c>)
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <MX_GPIO_Init+0x11c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001176:	4b29      	ldr	r3, [pc, #164]	; (800121c <MX_GPIO_Init+0x11c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a28      	ldr	r2, [pc, #160]	; (800121c <MX_GPIO_Init+0x11c>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <MX_GPIO_Init+0x11c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <MX_GPIO_Init+0x11c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a22      	ldr	r2, [pc, #136]	; (800121c <MX_GPIO_Init+0x11c>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <MX_GPIO_Init+0x11c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80011ac:	481c      	ldr	r0, [pc, #112]	; (8001220 <MX_GPIO_Init+0x120>)
 80011ae:	f000 fe15 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_0, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f642 2101 	movw	r1, #10753	; 0x2a01
 80011b8:	481a      	ldr	r0, [pc, #104]	; (8001224 <MX_GPIO_Init+0x124>)
 80011ba:	f000 fe0f 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011be:	2308      	movs	r3, #8
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4815      	ldr	r0, [pc, #84]	; (8001228 <MX_GPIO_Init+0x128>)
 80011d2:	f000 fc3f 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <MX_GPIO_Init+0x120>)
 80011f0:	f000 fc30 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE13 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_0;
 80011f4:	f642 2301 	movw	r3, #10753	; 0x2a01
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_GPIO_Init+0x124>)
 800120e:	f000 fc21 	bl	8001a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001212:	bf00      	nop
 8001214:	3730      	adds	r7, #48	; 0x30
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40021400 	.word	0x40021400
 8001224:	40021000 	.word	0x40021000
 8001228:	40020000 	.word	0x40020000

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_MspInit+0x44>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_MspInit+0x44>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_MspInit+0x44>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_MspInit+0x44>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_MspInit+0x44>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_MspInit+0x44>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0ae      	sub	sp, #184	; 0xb8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2290      	movs	r2, #144	; 0x90
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 fadf 	bl	8005864 <memset>
  if(hi2c->Instance==I2C2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a22      	ldr	r2, [pc, #136]	; (8001334 <HAL_I2C_MspInit+0xb4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d13c      	bne.n	800132a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 f82a 	bl	8003318 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012ca:	f7ff ffaf 	bl	800122c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	2312      	movs	r3, #18
 80012f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001300:	2304      	movs	r3, #4
 8001302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <HAL_I2C_MspInit+0xbc>)
 800130e:	f000 fba1 	bl	8001a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 8001318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_I2C_MspInit+0xb8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	37b8      	adds	r7, #184	; 0xb8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40005800 	.word	0x40005800
 8001338:	40023800 	.word	0x40023800
 800133c:	40020400 	.word	0x40020400

08001340 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_TIM_PWM_MspInit+0x38>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10b      	bne.n	800136a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_TIM_PWM_MspInit+0x3c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <HAL_TIM_PWM_MspInit+0x3c>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_TIM_PWM_MspInit+0x3c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40000400 	.word	0x40000400
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_TIM_MspPostInit+0x64>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d11b      	bne.n	80013da <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_TIM_MspPostInit+0x68>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_TIM_MspPostInit+0x68>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_TIM_MspPostInit+0x68>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013ba:	2302      	movs	r3, #2
 80013bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_TIM_MspPostInit+0x6c>)
 80013d6:	f000 fb3d 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40000400 	.word	0x40000400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020400 	.word	0x40020400

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0ae      	sub	sp, #184	; 0xb8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2290      	movs	r2, #144	; 0x90
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f004 fa27 	bl	8005864 <memset>
  if(huart->Instance==USART3)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <HAL_UART_MspInit+0xc4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d144      	bne.n	80014aa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001424:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001426:	2300      	movs	r3, #0
 8001428:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4618      	mov	r0, r3
 8001430:	f001 ff72 	bl	8003318 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800143a:	f7ff fef7 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_UART_MspInit+0xc8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001488:	2307      	movs	r3, #7
 800148a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001492:	4619      	mov	r1, r3
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <HAL_UART_MspInit+0xcc>)
 8001496:	f000 fadd 	bl	8001a54 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2027      	movs	r0, #39	; 0x27
 80014a0:	f000 fa0f 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014a4:	2027      	movs	r0, #39	; 0x27
 80014a6:	f000 fa28 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	37b8      	adds	r7, #184	; 0xb8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40004800 	.word	0x40004800
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020c00 	.word	0x40020c00

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150c:	f000 f8ba 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <USART3_IRQHandler+0x10>)
 800151a:	f003 f9b3 	bl	8004884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000118 	.word	0x20000118

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f004 f98c 	bl	8005874 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20080000 	.word	0x20080000
 8001588:	00000400 	.word	0x00000400
 800158c:	200001e0 	.word	0x200001e0
 8001590:	20000330 	.word	0x20000330

08001594 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015be:	490e      	ldr	r1, [pc, #56]	; (80015f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d4:	4c0b      	ldr	r4, [pc, #44]	; (8001604 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e2:	f7ff ffd7 	bl	8001594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f004 f94b 	bl	8005880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ea:	f7ff fb83 	bl	8000cf4 <main>
  bx  lr    
 80015ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015fc:	08006208 	.word	0x08006208
  ldr r2, =_sbss
 8001600:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001604:	20000330 	.word	0x20000330

08001608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>

0800160a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160e:	2003      	movs	r0, #3
 8001610:	f000 f94c 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001614:	200f      	movs	r0, #15
 8001616:	f000 f805 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800161a:	f7ff fe0d 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f967 	bl	8001916 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001660:	f000 f92f 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	20000008 	.word	0x20000008
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008
 80016a8:	200001e4 	.word	0x200001e4

080016ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	200001e4 	.word	0x200001e4

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <__NVIC_SetPriorityGrouping+0x40>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	4313      	orrs	r3, r2
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <__NVIC_SetPriorityGrouping+0x40>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00
 8001750:	05fa0000 	.word	0x05fa0000

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4907      	ldr	r1, [pc, #28]	; (80017a8 <__NVIC_EnableIRQ+0x38>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff29 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff3e 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff8e 	bl	8001800 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5d 	bl	80017ac <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff31 	bl	8001770 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff feb6 	bl	80016ac <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d008      	beq.n	8001960 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e052      	b.n	8001a06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0216 	bic.w	r2, r2, #22
 800196e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800197e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	2b00      	cmp	r3, #0
 8001986:	d103      	bne.n	8001990 <HAL_DMA_Abort+0x62>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0208 	bic.w	r2, r2, #8
 800199e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b0:	e013      	b.n	80019da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b2:	f7ff fe7b 	bl	80016ac <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d90c      	bls.n	80019da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e015      	b.n	8001a06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e4      	bne.n	80019b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	223f      	movs	r2, #63	; 0x3f
 80019ee:	409a      	lsls	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d004      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e00c      	b.n	8001a46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2205      	movs	r2, #5
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e175      	b.n	8001d60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 8164 	bne.w	8001d5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d005      	beq.n	8001aaa <HAL_GPIO_Init+0x56>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d130      	bne.n	8001b0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 0201 	and.w	r2, r3, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d017      	beq.n	8001b48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d123      	bne.n	8001b9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	69b9      	ldr	r1, [r7, #24]
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80be 	beq.w	8001d5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <HAL_GPIO_Init+0x324>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a65      	ldr	r2, [pc, #404]	; (8001d78 <HAL_GPIO_Init+0x324>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_GPIO_Init+0x324>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bf6:	4a61      	ldr	r2, [pc, #388]	; (8001d7c <HAL_GPIO_Init+0x328>)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a58      	ldr	r2, [pc, #352]	; (8001d80 <HAL_GPIO_Init+0x32c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d037      	beq.n	8001c92 <HAL_GPIO_Init+0x23e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a57      	ldr	r2, [pc, #348]	; (8001d84 <HAL_GPIO_Init+0x330>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d031      	beq.n	8001c8e <HAL_GPIO_Init+0x23a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d02b      	beq.n	8001c8a <HAL_GPIO_Init+0x236>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a55      	ldr	r2, [pc, #340]	; (8001d8c <HAL_GPIO_Init+0x338>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d025      	beq.n	8001c86 <HAL_GPIO_Init+0x232>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a54      	ldr	r2, [pc, #336]	; (8001d90 <HAL_GPIO_Init+0x33c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01f      	beq.n	8001c82 <HAL_GPIO_Init+0x22e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a53      	ldr	r2, [pc, #332]	; (8001d94 <HAL_GPIO_Init+0x340>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x22a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_GPIO_Init+0x344>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x226>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <HAL_GPIO_Init+0x348>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x222>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a50      	ldr	r2, [pc, #320]	; (8001da0 <HAL_GPIO_Init+0x34c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x21e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4f      	ldr	r2, [pc, #316]	; (8001da4 <HAL_GPIO_Init+0x350>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x21a>
 8001c6a:	2309      	movs	r3, #9
 8001c6c:	e012      	b.n	8001c94 <HAL_GPIO_Init+0x240>
 8001c6e:	230a      	movs	r3, #10
 8001c70:	e010      	b.n	8001c94 <HAL_GPIO_Init+0x240>
 8001c72:	2308      	movs	r3, #8
 8001c74:	e00e      	b.n	8001c94 <HAL_GPIO_Init+0x240>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e00c      	b.n	8001c94 <HAL_GPIO_Init+0x240>
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	e00a      	b.n	8001c94 <HAL_GPIO_Init+0x240>
 8001c7e:	2305      	movs	r3, #5
 8001c80:	e008      	b.n	8001c94 <HAL_GPIO_Init+0x240>
 8001c82:	2304      	movs	r3, #4
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x240>
 8001c86:	2303      	movs	r3, #3
 8001c88:	e004      	b.n	8001c94 <HAL_GPIO_Init+0x240>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_Init+0x240>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_GPIO_Init+0x240>
 8001c92:	2300      	movs	r3, #0
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	f002 0203 	and.w	r2, r2, #3
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ca4:	4935      	ldr	r1, [pc, #212]	; (8001d7c <HAL_GPIO_Init+0x328>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	3302      	adds	r3, #2
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_GPIO_Init+0x354>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cd6:	4a34      	ldr	r2, [pc, #208]	; (8001da8 <HAL_GPIO_Init+0x354>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cdc:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <HAL_GPIO_Init+0x354>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d00:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <HAL_GPIO_Init+0x354>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_GPIO_Init+0x354>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2a:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_GPIO_Init+0x354>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_GPIO_Init+0x354>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d54:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <HAL_GPIO_Init+0x354>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	f67f ae86 	bls.w	8001a74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40021400 	.word	0x40021400
 8001d98:	40021800 	.word	0x40021800
 8001d9c:	40021c00 	.word	0x40021c00
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40022400 	.word	0x40022400
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e001      	b.n	8001dce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e07f      	b.n	8001f22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fa22 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2224      	movs	r2, #36	; 0x24
 8001e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e006      	b.n	8001e98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d104      	bne.n	8001eaa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_I2C_Init+0x11c>)
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69d9      	ldr	r1, [r3, #28]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	02008000 	.word	0x02008000

08001f30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	817b      	strh	r3, [r7, #10]
 8001f42:	460b      	mov	r3, r1
 8001f44:	813b      	strh	r3, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	f040 80f9 	bne.w	800214a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_I2C_Mem_Write+0x34>
 8001f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0ed      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_Mem_Write+0x4e>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e0e6      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f86:	f7ff fb91 	bl	80016ac <HAL_GetTick>
 8001f8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2319      	movs	r3, #25
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 fac3 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0d1      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2221      	movs	r2, #33	; 0x21
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2240      	movs	r2, #64	; 0x40
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fd0:	88f8      	ldrh	r0, [r7, #6]
 8001fd2:	893a      	ldrh	r2, [r7, #8]
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4603      	mov	r3, r0
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f9d3 	bl	800238c <I2C_RequestMemoryWrite>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0a9      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2bff      	cmp	r3, #255	; 0xff
 8002000:	d90e      	bls.n	8002020 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	22ff      	movs	r2, #255	; 0xff
 8002006:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	b2da      	uxtb	r2, r3
 800200e:	8979      	ldrh	r1, [r7, #10]
 8002010:	2300      	movs	r3, #0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 fc1f 	bl	800285c <I2C_TransferConfig>
 800201e:	e00f      	b.n	8002040 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	b2da      	uxtb	r2, r3
 8002030:	8979      	ldrh	r1, [r7, #10]
 8002032:	2300      	movs	r3, #0
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fc0e 	bl	800285c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 faad 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e07b      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d034      	beq.n	80020f8 <HAL_I2C_Mem_Write+0x1c8>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002092:	2b00      	cmp	r3, #0
 8002094:	d130      	bne.n	80020f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	2200      	movs	r2, #0
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fa3f 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e04d      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	d90e      	bls.n	80020d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	22ff      	movs	r2, #255	; 0xff
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	8979      	ldrh	r1, [r7, #10]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fbc3 	bl	800285c <I2C_TransferConfig>
 80020d6:	e00f      	b.n	80020f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	8979      	ldrh	r1, [r7, #10]
 80020ea:	2300      	movs	r3, #0
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fbb2 	bl	800285c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d19e      	bne.n	8002040 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fa8c 	bl	8002624 <I2C_WaitOnSTOPFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e01a      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2220      	movs	r2, #32
 800211c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_I2C_Mem_Write+0x224>)
 800212a:	400b      	ands	r3, r1
 800212c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800214a:	2302      	movs	r3, #2
  }
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	fe00e800 	.word	0xfe00e800

08002158 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4603      	mov	r3, r0
 8002168:	817b      	strh	r3, [r7, #10]
 800216a:	460b      	mov	r3, r1
 800216c:	813b      	strh	r3, [r7, #8]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	f040 80fd 	bne.w	800237a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_I2C_Mem_Read+0x34>
 8002186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0f1      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_I2C_Mem_Read+0x4e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e0ea      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021ae:	f7ff fa7d 	bl	80016ac <HAL_GetTick>
 80021b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2319      	movs	r3, #25
 80021ba:	2201      	movs	r2, #1
 80021bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f9af 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0d5      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2222      	movs	r2, #34	; 0x22
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021f8:	88f8      	ldrh	r0, [r7, #6]
 80021fa:	893a      	ldrh	r2, [r7, #8]
 80021fc:	8979      	ldrh	r1, [r7, #10]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	4603      	mov	r3, r0
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f913 	bl	8002434 <I2C_RequestMemoryRead>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0ad      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	2bff      	cmp	r3, #255	; 0xff
 8002228:	d90e      	bls.n	8002248 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	22ff      	movs	r2, #255	; 0xff
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	b2da      	uxtb	r2, r3
 8002236:	8979      	ldrh	r1, [r7, #10]
 8002238:	4b52      	ldr	r3, [pc, #328]	; (8002384 <HAL_I2C_Mem_Read+0x22c>)
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fb0b 	bl	800285c <I2C_TransferConfig>
 8002246:	e00f      	b.n	8002268 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	b2da      	uxtb	r2, r3
 8002258:	8979      	ldrh	r1, [r7, #10]
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <HAL_I2C_Mem_Read+0x22c>)
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fafa 	bl	800285c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	2200      	movs	r2, #0
 8002270:	2104      	movs	r1, #4
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f956 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e07c      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d034      	beq.n	8002328 <HAL_I2C_Mem_Read+0x1d0>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d130      	bne.n	8002328 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	2200      	movs	r2, #0
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f927 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e04d      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2bff      	cmp	r3, #255	; 0xff
 80022e8:	d90e      	bls.n	8002308 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	22ff      	movs	r2, #255	; 0xff
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	8979      	ldrh	r1, [r7, #10]
 80022f8:	2300      	movs	r3, #0
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 faab 	bl	800285c <I2C_TransferConfig>
 8002306:	e00f      	b.n	8002328 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	b2da      	uxtb	r2, r3
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	2300      	movs	r3, #0
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fa9a 	bl	800285c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d19a      	bne.n	8002268 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f974 	bl	8002624 <I2C_WaitOnSTOPFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e01a      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2220      	movs	r2, #32
 800234c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_I2C_Mem_Read+0x230>)
 800235a:	400b      	ands	r3, r1
 800235c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800237a:	2302      	movs	r3, #2
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	80002400 	.word	0x80002400
 8002388:	fe00e800 	.word	0xfe00e800

0800238c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	460b      	mov	r3, r1
 80023a0:	813b      	strh	r3, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	8979      	ldrh	r1, [r7, #10]
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <I2C_RequestMemoryWrite+0xa4>)
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fa51 	bl	800285c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	69b9      	ldr	r1, [r7, #24]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f8f0 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e02c      	b.n	8002428 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023d4:	893b      	ldrh	r3, [r7, #8]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
 80023de:	e015      	b.n	800240c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023e0:	893b      	ldrh	r3, [r7, #8]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	69b9      	ldr	r1, [r7, #24]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f8d6 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e012      	b.n	8002428 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002402:	893b      	ldrh	r3, [r7, #8]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2200      	movs	r2, #0
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f884 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	80002000 	.word	0x80002000

08002434 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	460b      	mov	r3, r1
 8002448:	813b      	strh	r3, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	8979      	ldrh	r1, [r7, #10]
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <I2C_RequestMemoryRead+0xa4>)
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2300      	movs	r3, #0
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f9fe 	bl	800285c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f89d 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e02c      	b.n	80024ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800247a:	893b      	ldrh	r3, [r7, #8]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
 8002484:	e015      	b.n	80024b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002486:	893b      	ldrh	r3, [r7, #8]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	b29b      	uxth	r3, r3
 800248c:	b2da      	uxtb	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f883 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e012      	b.n	80024ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024a8:	893b      	ldrh	r3, [r7, #8]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2200      	movs	r2, #0
 80024ba:	2140      	movs	r1, #64	; 0x40
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f831 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	80002000 	.word	0x80002000

080024dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d103      	bne.n	80024fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d007      	beq.n	8002518 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	619a      	str	r2, [r3, #24]
  }
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002534:	e022      	b.n	800257c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800253c:	d01e      	beq.n	800257c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7ff f8b5 	bl	80016ac <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d113      	bne.n	800257c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e00f      	b.n	800259c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4013      	ands	r3, r2
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	429a      	cmp	r2, r3
 8002598:	d0cd      	beq.n	8002536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025b0:	e02c      	b.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f870 	bl	800269c <I2C_IsErrorOccurred>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e02a      	b.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025cc:	d01e      	beq.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ce:	f7ff f86d 	bl	80016ac <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d113      	bne.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e007      	b.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b02      	cmp	r3, #2
 8002618:	d1cb      	bne.n	80025b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002630:	e028      	b.n	8002684 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f830 	bl	800269c <I2C_IsErrorOccurred>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e026      	b.n	8002694 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002646:	f7ff f831 	bl	80016ac <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d113      	bne.n	8002684 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e007      	b.n	8002694 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b20      	cmp	r3, #32
 8002690:	d1cf      	bne.n	8002632 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d068      	beq.n	800279a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2210      	movs	r2, #16
 80026ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026d0:	e049      	b.n	8002766 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d8:	d045      	beq.n	8002766 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7fe ffe7 	bl	80016ac <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_IsErrorOccurred+0x54>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d13a      	bne.n	8002766 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002702:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800270e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002712:	d121      	bne.n	8002758 <I2C_IsErrorOccurred+0xbc>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800271a:	d01d      	beq.n	8002758 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	2b20      	cmp	r3, #32
 8002720:	d01a      	beq.n	8002758 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002730:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002732:	f7fe ffbb 	bl	80016ac <HAL_GetTick>
 8002736:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002738:	e00e      	b.n	8002758 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800273a:	f7fe ffb7 	bl	80016ac <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b19      	cmp	r3, #25
 8002746:	d907      	bls.n	8002758 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	f043 0320 	orr.w	r3, r3, #32
 800274e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002756:	e006      	b.n	8002766 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b20      	cmp	r3, #32
 8002764:	d1e9      	bne.n	800273a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b20      	cmp	r3, #32
 8002772:	d003      	beq.n	800277c <I2C_IsErrorOccurred+0xe0>
 8002774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0aa      	beq.n	80026d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800277c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2220      	movs	r2, #32
 800278a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00b      	beq.n	8002808 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	f043 0302 	orr.w	r3, r3, #2
 80027f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01c      	beq.n	800284a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff fe63 	bl	80024dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <I2C_IsErrorOccurred+0x1bc>)
 8002822:	400b      	ands	r3, r1
 8002824:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	431a      	orrs	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800284a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800284e:	4618      	mov	r0, r3
 8002850:	3728      	adds	r7, #40	; 0x28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	fe00e800 	.word	0xfe00e800

0800285c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	4613      	mov	r3, r2
 800286c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002874:	7a7b      	ldrb	r3, [r7, #9]
 8002876:	041b      	lsls	r3, r3, #16
 8002878:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800287c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	4313      	orrs	r3, r2
 8002886:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800288a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	0d5b      	lsrs	r3, r3, #21
 8002896:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <I2C_TransferConfig+0x60>)
 800289c:	430b      	orrs	r3, r1
 800289e:	43db      	mvns	r3, r3
 80028a0:	ea02 0103 	and.w	r1, r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	03ff63ff 	.word	0x03ff63ff

080028c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d138      	bne.n	8002948 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e032      	b.n	800294a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002912:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b20      	cmp	r3, #32
 800296a:	d139      	bne.n	80029e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002976:	2302      	movs	r3, #2
 8002978:	e033      	b.n	80029e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2224      	movs	r2, #36	; 0x24
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	e000      	b.n	80029e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029f8:	2300      	movs	r3, #0
 80029fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e29b      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8087 	beq.w	8002b22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a14:	4b96      	ldr	r3, [pc, #600]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d00c      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a20:	4b93      	ldr	r3, [pc, #588]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d112      	bne.n	8002a52 <HAL_RCC_OscConfig+0x62>
 8002a2c:	4b90      	ldr	r3, [pc, #576]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a38:	d10b      	bne.n	8002a52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3a:	4b8d      	ldr	r3, [pc, #564]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d06c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x130>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d168      	bne.n	8002b20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e275      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_OscConfig+0x7a>
 8002a5c:	4b84      	ldr	r3, [pc, #528]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a83      	ldr	r2, [pc, #524]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	e02e      	b.n	8002ac8 <HAL_RCC_OscConfig+0xd8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x9c>
 8002a72:	4b7f      	ldr	r3, [pc, #508]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a7e      	ldr	r2, [pc, #504]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a7b      	ldr	r2, [pc, #492]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e01d      	b.n	8002ac8 <HAL_RCC_OscConfig+0xd8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xc0>
 8002a96:	4b76      	ldr	r3, [pc, #472]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a75      	ldr	r2, [pc, #468]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b73      	ldr	r3, [pc, #460]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a72      	ldr	r2, [pc, #456]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0xd8>
 8002ab0:	4b6f      	ldr	r3, [pc, #444]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	4b6c      	ldr	r3, [pc, #432]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a6b      	ldr	r2, [pc, #428]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fdec 	bl	80016ac <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fde8 	bl	80016ac <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e229      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0xe8>
 8002af6:	e014      	b.n	8002b22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fdd8 	bl	80016ac <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7fe fdd4 	bl	80016ac <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	; 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e215      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	4b57      	ldr	r3, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x110>
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d069      	beq.n	8002c02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b2e:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3a:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d11c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x190>
 8002b46:	4b4a      	ldr	r3, [pc, #296]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d116      	bne.n	8002b80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_RCC_OscConfig+0x17a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e1e9      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	493d      	ldr	r1, [pc, #244]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	e040      	b.n	8002c02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d023      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fd8a 	bl	80016ac <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9c:	f7fe fd86 	bl	80016ac <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e1c7      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b30      	ldr	r3, [pc, #192]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4929      	ldr	r1, [pc, #164]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
 8002bce:	e018      	b.n	8002c02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a26      	ldr	r2, [pc, #152]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fd66 	bl	80016ac <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be4:	f7fe fd62 	bl	80016ac <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e1a3      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d038      	beq.n	8002c80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d019      	beq.n	8002c4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe fd43 	bl	80016ac <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2a:	f7fe fd3f 	bl	80016ac <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e180      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x23a>
 8002c48:	e01a      	b.n	8002c80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_RCC_OscConfig+0x280>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fe fd29 	bl	80016ac <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fd25 	bl	80016ac <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d903      	bls.n	8002c74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e166      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
 8002c70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	4b92      	ldr	r3, [pc, #584]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ee      	bne.n	8002c5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80a4 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8e:	4b8c      	ldr	r3, [pc, #560]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10d      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b89      	ldr	r3, [pc, #548]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a88      	ldr	r2, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b86      	ldr	r3, [pc, #536]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb6:	4b83      	ldr	r3, [pc, #524]	; (8002ec4 <HAL_RCC_OscConfig+0x4d4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d118      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cc2:	4b80      	ldr	r3, [pc, #512]	; (8002ec4 <HAL_RCC_OscConfig+0x4d4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a7f      	ldr	r2, [pc, #508]	; (8002ec4 <HAL_RCC_OscConfig+0x4d4>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fced 	bl	80016ac <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd6:	f7fe fce9 	bl	80016ac <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b64      	cmp	r3, #100	; 0x64
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e12a      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce8:	4b76      	ldr	r3, [pc, #472]	; (8002ec4 <HAL_RCC_OscConfig+0x4d4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x31a>
 8002cfc:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	4a6f      	ldr	r2, [pc, #444]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
 8002d08:	e02d      	b.n	8002d66 <HAL_RCC_OscConfig+0x376>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x33c>
 8002d12:	4b6b      	ldr	r3, [pc, #428]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a6a      	ldr	r2, [pc, #424]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1e:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a67      	ldr	r2, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2a:	e01c      	b.n	8002d66 <HAL_RCC_OscConfig+0x376>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d10c      	bne.n	8002d4e <HAL_RCC_OscConfig+0x35e>
 8002d34:	4b62      	ldr	r3, [pc, #392]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	4a61      	ldr	r2, [pc, #388]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d3a:	f043 0304 	orr.w	r3, r3, #4
 8002d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d40:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	4a5e      	ldr	r2, [pc, #376]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4c:	e00b      	b.n	8002d66 <HAL_RCC_OscConfig+0x376>
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a5b      	ldr	r2, [pc, #364]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	4a58      	ldr	r2, [pc, #352]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fc9d 	bl	80016ac <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe fc99 	bl	80016ac <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0d8      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ee      	beq.n	8002d76 <HAL_RCC_OscConfig+0x386>
 8002d98:	e014      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fc87 	bl	80016ac <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe fc83 	bl	80016ac <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0c2      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db8:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ee      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d105      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dca:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a3c      	ldr	r2, [pc, #240]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80ae 	beq.w	8002f3c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de0:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d06d      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d14b      	bne.n	8002e8c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	4b32      	ldr	r3, [pc, #200]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a31      	ldr	r2, [pc, #196]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe fc54 	bl	80016ac <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fc50 	bl	80016ac <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e091      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	019b      	lsls	r3, r3, #6
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	071b      	lsls	r3, r3, #28
 8002e52:	491b      	ldr	r1, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fc22 	bl	80016ac <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fc1e 	bl	80016ac <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e05f      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x47c>
 8002e8a:	e057      	b.n	8002f3c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fc08 	bl	80016ac <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fc04 	bl	80016ac <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e045      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCC_OscConfig+0x4d0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4b0>
 8002ebe:	e03d      	b.n	8002f3c <HAL_RCC_OscConfig+0x54c>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <HAL_RCC_OscConfig+0x558>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d030      	beq.n	8002f38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d129      	bne.n	8002f38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d122      	bne.n	8002f38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002efe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d119      	bne.n	8002f38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	3b01      	subs	r3, #1
 8002f12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d10f      	bne.n	8002f38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800

08002f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0d0      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d910      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b67      	ldr	r3, [pc, #412]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 020f 	bic.w	r2, r3, #15
 8002f7a:	4965      	ldr	r1, [pc, #404]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b63      	ldr	r3, [pc, #396]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0b8      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fac:	4b59      	ldr	r3, [pc, #356]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a52      	ldr	r2, [pc, #328]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b50      	ldr	r3, [pc, #320]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	494d      	ldr	r1, [pc, #308]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d040      	beq.n	8003070 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d115      	bne.n	800302e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e073      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e06b      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 0203 	bic.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4936      	ldr	r1, [pc, #216]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003040:	f7fe fb34 	bl	80016ac <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	e00a      	b.n	800305e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003048:	f7fe fb30 	bl	80016ac <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e053      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 020c 	and.w	r2, r3, #12
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	429a      	cmp	r2, r3
 800306e:	d1eb      	bne.n	8003048 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d210      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 020f 	bic.w	r2, r3, #15
 8003086:	4922      	ldr	r1, [pc, #136]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e032      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4916      	ldr	r1, [pc, #88]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	490e      	ldr	r1, [pc, #56]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030de:	f000 f821 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	490a      	ldr	r1, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x1cc>)
 80030f0:	5ccb      	ldrb	r3, [r1, r3]
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_RCC_ClockConfig+0x1d0>)
 80030f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_ClockConfig+0x1d4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fa90 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023c00 	.word	0x40023c00
 8003114:	40023800 	.word	0x40023800
 8003118:	080061ac 	.word	0x080061ac
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003128:	b090      	sub	sp, #64	; 0x40
 800312a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	2300      	movs	r3, #0
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d00d      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x40>
 8003148:	2b08      	cmp	r3, #8
 800314a:	f200 80a1 	bhi.w	8003290 <HAL_RCC_GetSysClockFreq+0x16c>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x34>
 8003152:	2b04      	cmp	r3, #4
 8003154:	d003      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0x3a>
 8003156:	e09b      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800315a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800315c:	e09b      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800315e:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003162:	e098      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003164:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800316e:	4b4d      	ldr	r3, [pc, #308]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d028      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	099b      	lsrs	r3, r3, #6
 8003180:	2200      	movs	r2, #0
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	627a      	str	r2, [r7, #36]	; 0x24
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800318c:	2100      	movs	r1, #0
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003190:	fb03 f201 	mul.w	r2, r3, r1
 8003194:	2300      	movs	r3, #0
 8003196:	fb00 f303 	mul.w	r3, r0, r3
 800319a:	4413      	add	r3, r2
 800319c:	4a43      	ldr	r2, [pc, #268]	; (80032ac <HAL_RCC_GetSysClockFreq+0x188>)
 800319e:	fba0 1202 	umull	r1, r2, r0, r2
 80031a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031a4:	460a      	mov	r2, r1
 80031a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80031a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031aa:	4413      	add	r3, r2
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b0:	2200      	movs	r2, #0
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	61fa      	str	r2, [r7, #28]
 80031b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031be:	f7fd f88f 	bl	80002e0 <__aeabi_uldivmod>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4613      	mov	r3, r2
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ca:	e053      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031cc:	4b35      	ldr	r3, [pc, #212]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	2200      	movs	r2, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	617a      	str	r2, [r7, #20]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031de:	f04f 0b00 	mov.w	fp, #0
 80031e2:	4652      	mov	r2, sl
 80031e4:	465b      	mov	r3, fp
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f4:	0150      	lsls	r0, r2, #5
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	ebb2 080a 	subs.w	r8, r2, sl
 80031fe:	eb63 090b 	sbc.w	r9, r3, fp
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800320e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003212:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003216:	ebb2 0408 	subs.w	r4, r2, r8
 800321a:	eb63 0509 	sbc.w	r5, r3, r9
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	00eb      	lsls	r3, r5, #3
 8003228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800322c:	00e2      	lsls	r2, r4, #3
 800322e:	4614      	mov	r4, r2
 8003230:	461d      	mov	r5, r3
 8003232:	eb14 030a 	adds.w	r3, r4, sl
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	eb45 030b 	adc.w	r3, r5, fp
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800324a:	4629      	mov	r1, r5
 800324c:	028b      	lsls	r3, r1, #10
 800324e:	4621      	mov	r1, r4
 8003250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003254:	4621      	mov	r1, r4
 8003256:	028a      	lsls	r2, r1, #10
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	2200      	movs	r2, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003268:	f7fd f83a 	bl	80002e0 <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4613      	mov	r3, r2
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	0c1b      	lsrs	r3, r3, #16
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	3301      	adds	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800328e:	e002      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003292:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003298:	4618      	mov	r0, r3
 800329a:	3740      	adds	r7, #64	; 0x40
 800329c:	46bd      	mov	sp, r7
 800329e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	00f42400 	.word	0x00f42400
 80032ac:	017d7840 	.word	0x017d7840

080032b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000000 	.word	0x20000000

080032c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032cc:	f7ff fff0 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	0a9b      	lsrs	r3, r3, #10
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	4903      	ldr	r1, [pc, #12]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40023800 	.word	0x40023800
 80032ec:	080061bc 	.word	0x080061bc

080032f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032f4:	f7ff ffdc 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	0b5b      	lsrs	r3, r3, #13
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4903      	ldr	r1, [pc, #12]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	080061bc 	.word	0x080061bc

08003318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003340:	4b69      	ldr	r3, [pc, #420]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a68      	ldr	r2, [pc, #416]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003346:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800334a:	6093      	str	r3, [r2, #8]
 800334c:	4b66      	ldr	r3, [pc, #408]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003354:	4964      	ldr	r1, [pc, #400]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003362:	2301      	movs	r3, #1
 8003364:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d017      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003372:	4b5d      	ldr	r3, [pc, #372]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	4959      	ldr	r1, [pc, #356]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003390:	d101      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003392:	2301      	movs	r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d017      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ae:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	494a      	ldr	r1, [pc, #296]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033cc:	d101      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033ea:	2301      	movs	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 808b 	beq.w	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033fc:	4b3a      	ldr	r3, [pc, #232]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	4a39      	ldr	r2, [pc, #228]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003406:	6413      	str	r3, [r2, #64]	; 0x40
 8003408:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a34      	ldr	r2, [pc, #208]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003420:	f7fe f944 	bl	80016ac <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003428:	f7fe f940 	bl	80016ac <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e38f      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800343a:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d035      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	429a      	cmp	r2, r3
 8003462:	d02e      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003486:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d114      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fe f908 	bl	80016ac <HAL_GetTick>
 800349c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fe f904 	bl	80016ac <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e351      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ee      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ce:	d111      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034de:	400b      	ands	r3, r1
 80034e0:	4901      	ldr	r1, [pc, #4]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
 80034e6:	e00b      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40007000 	.word	0x40007000
 80034f0:	0ffffcff 	.word	0x0ffffcff
 80034f4:	4bac      	ldr	r3, [pc, #688]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4aab      	ldr	r2, [pc, #684]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034fe:	6093      	str	r3, [r2, #8]
 8003500:	4ba9      	ldr	r3, [pc, #676]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003502:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	49a6      	ldr	r1, [pc, #664]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350e:	4313      	orrs	r3, r2
 8003510:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d010      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800351e:	4ba2      	ldr	r3, [pc, #648]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003524:	4aa0      	ldr	r2, [pc, #640]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800352a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800352e:	4b9e      	ldr	r3, [pc, #632]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003530:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	499b      	ldr	r1, [pc, #620]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800354c:	4b96      	ldr	r3, [pc, #600]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355a:	4993      	ldr	r1, [pc, #588]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800356e:	4b8e      	ldr	r3, [pc, #568]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357c:	498a      	ldr	r1, [pc, #552]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003590:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359e:	4982      	ldr	r1, [pc, #520]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035b2:	4b7d      	ldr	r3, [pc, #500]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	4979      	ldr	r1, [pc, #484]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035d4:	4b74      	ldr	r3, [pc, #464]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	4971      	ldr	r1, [pc, #452]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f6:	4b6c      	ldr	r3, [pc, #432]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f023 020c 	bic.w	r2, r3, #12
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	4968      	ldr	r1, [pc, #416]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003618:	4b63      	ldr	r3, [pc, #396]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	4960      	ldr	r1, [pc, #384]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	4957      	ldr	r1, [pc, #348]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800365c:	4b52      	ldr	r3, [pc, #328]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	494f      	ldr	r1, [pc, #316]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800367e:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	4946      	ldr	r1, [pc, #280]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	493e      	ldr	r1, [pc, #248]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036c2:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	4935      	ldr	r1, [pc, #212]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036e4:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f2:	492d      	ldr	r1, [pc, #180]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d011      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003706:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003714:	4924      	ldr	r1, [pc, #144]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003724:	d101      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003726:	2301      	movs	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003754:	4914      	ldr	r1, [pc, #80]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003778:	490b      	ldr	r1, [pc, #44]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00f      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379c:	4902      	ldr	r1, [pc, #8]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037a4:	e002      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037b8:	4b8a      	ldr	r3, [pc, #552]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	4986      	ldr	r1, [pc, #536]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037dc:	4b81      	ldr	r3, [pc, #516]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ec:	497d      	ldr	r1, [pc, #500]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d006      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80d6 	beq.w	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003808:	4b76      	ldr	r3, [pc, #472]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a75      	ldr	r2, [pc, #468]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003814:	f7fd ff4a 	bl	80016ac <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800381c:	f7fd ff46 	bl	80016ac <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e195      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800382e:	4b6d      	ldr	r3, [pc, #436]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d021      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11d      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800384e:	4b65      	ldr	r3, [pc, #404]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800385c:	4b61      	ldr	r3, [pc, #388]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003862:	0e1b      	lsrs	r3, r3, #24
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	019a      	lsls	r2, r3, #6
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	431a      	orrs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	071b      	lsls	r3, r3, #28
 8003882:	4958      	ldr	r1, [pc, #352]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d004      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d02e      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b4:	d129      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038b6:	4b4b      	ldr	r3, [pc, #300]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038c4:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ca:	0f1b      	lsrs	r3, r3, #28
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	019a      	lsls	r2, r3, #6
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	041b      	lsls	r3, r3, #16
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	061b      	lsls	r3, r3, #24
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	071b      	lsls	r3, r3, #28
 80038ea:	493e      	ldr	r1, [pc, #248]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038f2:	4b3c      	ldr	r3, [pc, #240]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f8:	f023 021f 	bic.w	r2, r3, #31
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	3b01      	subs	r3, #1
 8003902:	4938      	ldr	r1, [pc, #224]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01d      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003916:	4b33      	ldr	r3, [pc, #204]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391c:	0e1b      	lsrs	r3, r3, #24
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003924:	4b2f      	ldr	r3, [pc, #188]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392a:	0f1b      	lsrs	r3, r3, #28
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	019a      	lsls	r2, r3, #6
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	431a      	orrs	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	071b      	lsls	r3, r3, #28
 800394a:	4926      	ldr	r1, [pc, #152]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d011      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	019a      	lsls	r2, r3, #6
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	071b      	lsls	r3, r3, #28
 800397a:	491a      	ldr	r1, [pc, #104]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003988:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800398c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398e:	f7fd fe8d 	bl	80016ac <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003996:	f7fd fe89 	bl	80016ac <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b64      	cmp	r3, #100	; 0x64
 80039a2:	d901      	bls.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0d8      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039a8:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	f040 80ce 	bne.w	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c8:	f7fd fe70 	bl	80016ac <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039ce:	e00b      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039d0:	f7fd fe6c 	bl	80016ac <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	; 0x64
 80039dc:	d904      	bls.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e0bb      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039e8:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f4:	d0ec      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02e      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d12a      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a1e:	4b51      	ldr	r3, [pc, #324]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a2c:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	0f1b      	lsrs	r3, r3, #28
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	019a      	lsls	r2, r3, #6
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	061b      	lsls	r3, r3, #24
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	071b      	lsls	r3, r3, #28
 8003a52:	4944      	ldr	r1, [pc, #272]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a5a:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	493d      	ldr	r1, [pc, #244]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d022      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a88:	d11d      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a8a:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	0e1b      	lsrs	r3, r3, #24
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a98:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	0f1b      	lsrs	r3, r3, #28
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	019a      	lsls	r2, r3, #6
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	041b      	lsls	r3, r3, #16
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	061b      	lsls	r3, r3, #24
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	071b      	lsls	r3, r3, #28
 8003abe:	4929      	ldr	r1, [pc, #164]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d028      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ad2:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	0e1b      	lsrs	r3, r3, #24
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	019a      	lsls	r2, r3, #6
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	431a      	orrs	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	071b      	lsls	r3, r3, #28
 8003b06:	4917      	ldr	r1, [pc, #92]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	4911      	ldr	r1, [pc, #68]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b30:	f7fd fdbc 	bl	80016ac <HAL_GetTick>
 8003b34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b38:	f7fd fdb8 	bl	80016ac <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e007      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b56:	d1ef      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800

08003b68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e049      	b.n	8003c0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd fbd6 	bl	8001340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f000 f94a 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e0ff      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b14      	cmp	r3, #20
 8003c42:	f200 80f0 	bhi.w	8003e26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c46:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003ca1 	.word	0x08003ca1
 8003c50:	08003e27 	.word	0x08003e27
 8003c54:	08003e27 	.word	0x08003e27
 8003c58:	08003e27 	.word	0x08003e27
 8003c5c:	08003ce1 	.word	0x08003ce1
 8003c60:	08003e27 	.word	0x08003e27
 8003c64:	08003e27 	.word	0x08003e27
 8003c68:	08003e27 	.word	0x08003e27
 8003c6c:	08003d23 	.word	0x08003d23
 8003c70:	08003e27 	.word	0x08003e27
 8003c74:	08003e27 	.word	0x08003e27
 8003c78:	08003e27 	.word	0x08003e27
 8003c7c:	08003d63 	.word	0x08003d63
 8003c80:	08003e27 	.word	0x08003e27
 8003c84:	08003e27 	.word	0x08003e27
 8003c88:	08003e27 	.word	0x08003e27
 8003c8c:	08003da5 	.word	0x08003da5
 8003c90:	08003e27 	.word	0x08003e27
 8003c94:	08003e27 	.word	0x08003e27
 8003c98:	08003e27 	.word	0x08003e27
 8003c9c:	08003de5 	.word	0x08003de5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f96a 	bl	8003f80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0208 	orr.w	r2, r2, #8
 8003cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0204 	bic.w	r2, r2, #4
 8003cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6999      	ldr	r1, [r3, #24]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	619a      	str	r2, [r3, #24]
      break;
 8003cde:	e0a5      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f9bc 	bl	8004064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6999      	ldr	r1, [r3, #24]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	021a      	lsls	r2, r3, #8
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	619a      	str	r2, [r3, #24]
      break;
 8003d20:	e084      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fa13 	bl	8004154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0208 	orr.w	r2, r2, #8
 8003d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0204 	bic.w	r2, r2, #4
 8003d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69d9      	ldr	r1, [r3, #28]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	61da      	str	r2, [r3, #28]
      break;
 8003d60:	e064      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fa69 	bl	8004240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69d9      	ldr	r1, [r3, #28]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	021a      	lsls	r2, r3, #8
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	61da      	str	r2, [r3, #28]
      break;
 8003da2:	e043      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 faa0 	bl	80042f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0208 	orr.w	r2, r2, #8
 8003dbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0204 	bic.w	r2, r2, #4
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003de2:	e023      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fad2 	bl	8004394 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	021a      	lsls	r2, r3, #8
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e24:	e002      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop

08003e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a40      	ldr	r2, [pc, #256]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d00f      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3d      	ldr	r2, [pc, #244]	; (8003f58 <TIM_Base_SetConfig+0x118>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00b      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a3c      	ldr	r2, [pc, #240]	; (8003f5c <TIM_Base_SetConfig+0x11c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a3b      	ldr	r2, [pc, #236]	; (8003f60 <TIM_Base_SetConfig+0x120>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d108      	bne.n	8003e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2f      	ldr	r2, [pc, #188]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d027      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2c      	ldr	r2, [pc, #176]	; (8003f58 <TIM_Base_SetConfig+0x118>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d023      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <TIM_Base_SetConfig+0x11c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <TIM_Base_SetConfig+0x120>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d017      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <TIM_Base_SetConfig+0x128>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <TIM_Base_SetConfig+0x12c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00f      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <TIM_Base_SetConfig+0x130>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <TIM_Base_SetConfig+0x134>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <TIM_Base_SetConfig+0x138>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <TIM_Base_SetConfig+0x13c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_Base_SetConfig+0xf8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0c      	ldr	r2, [pc, #48]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	615a      	str	r2, [r3, #20]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40010400 	.word	0x40010400
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40014400 	.word	0x40014400
 8003f70:	40014800 	.word	0x40014800
 8003f74:	40001800 	.word	0x40001800
 8003f78:	40001c00 	.word	0x40001c00
 8003f7c:	40002000 	.word	0x40002000

08003f80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <TIM_OC1_SetConfig+0xd8>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 0302 	bic.w	r3, r3, #2
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a21      	ldr	r2, [pc, #132]	; (800405c <TIM_OC1_SetConfig+0xdc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_OC1_SetConfig+0x64>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a20      	ldr	r2, [pc, #128]	; (8004060 <TIM_OC1_SetConfig+0xe0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d10c      	bne.n	8003ffe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f023 0308 	bic.w	r3, r3, #8
 8003fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <TIM_OC1_SetConfig+0xdc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d003      	beq.n	800400e <TIM_OC1_SetConfig+0x8e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a15      	ldr	r2, [pc, #84]	; (8004060 <TIM_OC1_SetConfig+0xe0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d111      	bne.n	8004032 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800401c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	621a      	str	r2, [r3, #32]
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	fffeff8f 	.word	0xfffeff8f
 800405c:	40010000 	.word	0x40010000
 8004060:	40010400 	.word	0x40010400

08004064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f023 0210 	bic.w	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <TIM_OC2_SetConfig+0xe4>)
 8004090:	4013      	ands	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0320 	bic.w	r3, r3, #32
 80040ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a23      	ldr	r2, [pc, #140]	; (800414c <TIM_OC2_SetConfig+0xe8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <TIM_OC2_SetConfig+0x68>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a22      	ldr	r2, [pc, #136]	; (8004150 <TIM_OC2_SetConfig+0xec>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d10d      	bne.n	80040e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a18      	ldr	r2, [pc, #96]	; (800414c <TIM_OC2_SetConfig+0xe8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_OC2_SetConfig+0x94>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a17      	ldr	r2, [pc, #92]	; (8004150 <TIM_OC2_SetConfig+0xec>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d113      	bne.n	8004120 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	feff8fff 	.word	0xfeff8fff
 800414c:	40010000 	.word	0x40010000
 8004150:	40010400 	.word	0x40010400

08004154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <TIM_OC3_SetConfig+0xe0>)
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800419c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a22      	ldr	r2, [pc, #136]	; (8004238 <TIM_OC3_SetConfig+0xe4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_OC3_SetConfig+0x66>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a21      	ldr	r2, [pc, #132]	; (800423c <TIM_OC3_SetConfig+0xe8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10d      	bne.n	80041d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a17      	ldr	r2, [pc, #92]	; (8004238 <TIM_OC3_SetConfig+0xe4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC3_SetConfig+0x92>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a16      	ldr	r2, [pc, #88]	; (800423c <TIM_OC3_SetConfig+0xe8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d113      	bne.n	800420e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	621a      	str	r2, [r3, #32]
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	fffeff8f 	.word	0xfffeff8f
 8004238:	40010000 	.word	0x40010000
 800423c:	40010400 	.word	0x40010400

08004240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <TIM_OC4_SetConfig+0xa4>)
 800426c:	4013      	ands	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800428a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <TIM_OC4_SetConfig+0xa8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_OC4_SetConfig+0x68>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a12      	ldr	r2, [pc, #72]	; (80042ec <TIM_OC4_SetConfig+0xac>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d109      	bne.n	80042bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	feff8fff 	.word	0xfeff8fff
 80042e8:	40010000 	.word	0x40010000
 80042ec:	40010400 	.word	0x40010400

080042f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <TIM_OC5_SetConfig+0x98>)
 800431c:	4013      	ands	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004330:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a12      	ldr	r2, [pc, #72]	; (800438c <TIM_OC5_SetConfig+0x9c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_OC5_SetConfig+0x5e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a11      	ldr	r2, [pc, #68]	; (8004390 <TIM_OC5_SetConfig+0xa0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d109      	bne.n	8004362 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004354:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	621a      	str	r2, [r3, #32]
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	fffeff8f 	.word	0xfffeff8f
 800438c:	40010000 	.word	0x40010000
 8004390:	40010400 	.word	0x40010400

08004394 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <TIM_OC6_SetConfig+0x9c>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	051b      	lsls	r3, r3, #20
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a13      	ldr	r2, [pc, #76]	; (8004434 <TIM_OC6_SetConfig+0xa0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_OC6_SetConfig+0x60>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a12      	ldr	r2, [pc, #72]	; (8004438 <TIM_OC6_SetConfig+0xa4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d109      	bne.n	8004408 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	029b      	lsls	r3, r3, #10
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	feff8fff 	.word	0xfeff8fff
 8004434:	40010000 	.word	0x40010000
 8004438:	40010400 	.word	0x40010400

0800443c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004450:	2302      	movs	r3, #2
 8004452:	e06d      	b.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a30      	ldr	r2, [pc, #192]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2f      	ldr	r2, [pc, #188]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d108      	bne.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800448e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a20      	ldr	r2, [pc, #128]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d01d      	beq.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a15      	ldr	r2, [pc, #84]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a16      	ldr	r2, [pc, #88]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10c      	bne.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800450a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	4313      	orrs	r3, r2
 8004514:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40010000 	.word	0x40010000
 8004540:	40010400 	.word	0x40010400
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800
 800454c:	40000c00 	.word	0x40000c00
 8004550:	40014000 	.word	0x40014000
 8004554:	40001800 	.word	0x40001800

08004558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e040      	b.n	80045ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc ff38 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2224      	movs	r2, #36	; 0x24
 8004584:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fc86 	bl	8004ea8 <UART_SetConfig>
 800459c:	4603      	mov	r3, r0
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e022      	b.n	80045ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fede 	bl	8005370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 ff65 	bl	80054b4 <UART_CheckIdleState>
 80045ea:	4603      	mov	r3, r0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	4613      	mov	r3, r2
 8004602:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004608:	2b20      	cmp	r3, #32
 800460a:	d171      	bne.n	80046f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_UART_Transmit+0x24>
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e06a      	b.n	80046f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2221      	movs	r2, #33	; 0x21
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800462a:	f7fd f83f 	bl	80016ac <HAL_GetTick>
 800462e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004648:	d108      	bne.n	800465c <HAL_UART_Transmit+0x68>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	e003      	b.n	8004664 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004664:	e02c      	b.n	80046c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2200      	movs	r2, #0
 800466e:	2180      	movs	r1, #128	; 0x80
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 ff6c 	bl	800554e <UART_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e038      	b.n	80046f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004694:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	3302      	adds	r3, #2
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e007      	b.n	80046ae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	3301      	adds	r3, #1
 80046ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1cc      	bne.n	8004666 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2200      	movs	r2, #0
 80046d4:	2140      	movs	r1, #64	; 0x40
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 ff39 	bl	800554e <UART_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e005      	b.n	80046f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b08a      	sub	sp, #40	; 0x28
 80046fe:	af02      	add	r7, sp, #8
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4613      	mov	r3, r2
 8004708:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004710:	2b20      	cmp	r3, #32
 8004712:	f040 80b1 	bne.w	8004878 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_UART_Receive+0x28>
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0a9      	b.n	800487a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2222      	movs	r2, #34	; 0x22
 8004732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800473c:	f7fc ffb6 	bl	80016ac <HAL_GetTick>
 8004740:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	d10e      	bne.n	800477a <HAL_UART_Receive+0x80>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d105      	bne.n	8004770 <HAL_UART_Receive+0x76>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f240 12ff 	movw	r2, #511	; 0x1ff
 800476a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800476e:	e02d      	b.n	80047cc <HAL_UART_Receive+0xd2>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	22ff      	movs	r2, #255	; 0xff
 8004774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004778:	e028      	b.n	80047cc <HAL_UART_Receive+0xd2>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10d      	bne.n	800479e <HAL_UART_Receive+0xa4>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <HAL_UART_Receive+0x9a>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	22ff      	movs	r2, #255	; 0xff
 800478e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004792:	e01b      	b.n	80047cc <HAL_UART_Receive+0xd2>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	227f      	movs	r2, #127	; 0x7f
 8004798:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800479c:	e016      	b.n	80047cc <HAL_UART_Receive+0xd2>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047a6:	d10d      	bne.n	80047c4 <HAL_UART_Receive+0xca>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <HAL_UART_Receive+0xc0>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	227f      	movs	r2, #127	; 0x7f
 80047b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047b8:	e008      	b.n	80047cc <HAL_UART_Receive+0xd2>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	223f      	movs	r2, #63	; 0x3f
 80047be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047c2:	e003      	b.n	80047cc <HAL_UART_Receive+0xd2>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047dc:	d108      	bne.n	80047f0 <HAL_UART_Receive+0xf6>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	e003      	b.n	80047f8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047f8:	e032      	b.n	8004860 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	2120      	movs	r1, #32
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fea2 	bl	800554e <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e032      	b.n	800487a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10c      	bne.n	8004834 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	b29a      	uxth	r2, r3
 8004822:	8a7b      	ldrh	r3, [r7, #18]
 8004824:	4013      	ands	r3, r2
 8004826:	b29a      	uxth	r2, r3
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	3302      	adds	r3, #2
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	e00c      	b.n	800484e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	b2da      	uxtb	r2, r3
 800483c:	8a7b      	ldrh	r3, [r7, #18]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	4013      	ands	r3, r2
 8004842:	b2da      	uxtb	r2, r3
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	3301      	adds	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1c6      	bne.n	80047fa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	e000      	b.n	800487a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004878:	2302      	movs	r3, #2
  }
}
 800487a:	4618      	mov	r0, r3
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b0ba      	sub	sp, #232	; 0xe8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80048ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80048b2:	4013      	ands	r3, r2
 80048b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80048b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d115      	bne.n	80048ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00f      	beq.n	80048ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 82ac 	beq.w	8004e3a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
      }
      return;
 80048ea:	e2a6      	b.n	8004e3a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8117 	beq.w	8004b24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004902:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004906:	4b85      	ldr	r3, [pc, #532]	; (8004b1c <HAL_UART_IRQHandler+0x298>)
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 810a 	beq.w	8004b24 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d011      	beq.n	8004940 <HAL_UART_IRQHandler+0xbc>
 800491c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00b      	beq.n	8004940 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2201      	movs	r2, #1
 800492e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004936:	f043 0201 	orr.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d011      	beq.n	8004970 <HAL_UART_IRQHandler+0xec>
 800494c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00b      	beq.n	8004970 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2202      	movs	r2, #2
 800495e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004966:	f043 0204 	orr.w	r2, r3, #4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d011      	beq.n	80049a0 <HAL_UART_IRQHandler+0x11c>
 800497c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00b      	beq.n	80049a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2204      	movs	r2, #4
 800498e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004996:	f043 0202 	orr.w	r2, r3, #2
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d017      	beq.n	80049dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d105      	bne.n	80049c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00b      	beq.n	80049dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2208      	movs	r2, #8
 80049ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d2:	f043 0208 	orr.w	r2, r3, #8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <HAL_UART_IRQHandler+0x18a>
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00c      	beq.n	8004a0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a04:	f043 0220 	orr.w	r2, r3, #32
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8212 	beq.w	8004e3e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d005      	beq.n	8004a66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d04f      	beq.n	8004b06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fe37 	bl	80056da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d141      	bne.n	8004afe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1d9      	bne.n	8004a7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d013      	beq.n	8004af6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad2:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <HAL_UART_IRQHandler+0x29c>)
 8004ad4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fc ff97 	bl	8001a0e <HAL_DMA_Abort_IT>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d017      	beq.n	8004b16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004af0:	4610      	mov	r0, r2
 8004af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	e00f      	b.n	8004b16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f9b6 	bl	8004e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	e00b      	b.n	8004b16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f9b2 	bl	8004e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	e007      	b.n	8004b16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9ae 	bl	8004e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004b14:	e193      	b.n	8004e3e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b16:	bf00      	nop
    return;
 8004b18:	e191      	b.n	8004e3e <HAL_UART_IRQHandler+0x5ba>
 8004b1a:	bf00      	nop
 8004b1c:	04000120 	.word	0x04000120
 8004b20:	080057a3 	.word	0x080057a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	f040 814c 	bne.w	8004dc6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8145 	beq.w	8004dc6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 813e 	beq.w	8004dc6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2210      	movs	r2, #16
 8004b50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	f040 80b6 	bne.w	8004cce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8165 	beq.w	8004e42 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b82:	429a      	cmp	r2, r3
 8004b84:	f080 815d 	bcs.w	8004e42 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9c:	f000 8086 	beq.w	8004cac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1da      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfc:	f023 0301 	bic.w	r3, r3, #1
 8004c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e1      	bne.n	8004bea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3308      	adds	r3, #8
 8004c46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e3      	bne.n	8004c26 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7c:	f023 0310 	bic.w	r3, r3, #16
 8004c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e4      	bne.n	8004c6c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fc fe41 	bl	800192e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f8d8 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ccc:	e0b9      	b.n	8004e42 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80ab 	beq.w	8004e46 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80a6 	beq.w	8004e46 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e4      	bne.n	8004cfa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3308      	adds	r3, #8
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	623b      	str	r3, [r7, #32]
   return(result);
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d54:	633a      	str	r2, [r7, #48]	; 0x30
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e3      	bne.n	8004d30 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f023 0310 	bic.w	r3, r3, #16
 8004d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	69b9      	ldr	r1, [r7, #24]
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	617b      	str	r3, [r7, #20]
   return(result);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e4      	bne.n	8004d7c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f85c 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dc4:	e03f      	b.n	8004e46 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00e      	beq.n	8004df0 <HAL_UART_IRQHandler+0x56c>
 8004dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004de6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f853 	bl	8004e94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dee:	e02d      	b.n	8004e4c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00e      	beq.n	8004e1a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01c      	beq.n	8004e4a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
    }
    return;
 8004e18:	e017      	b.n	8004e4a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d012      	beq.n	8004e4c <HAL_UART_IRQHandler+0x5c8>
 8004e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00c      	beq.n	8004e4c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fccb 	bl	80057ce <UART_EndTransmit_IT>
    return;
 8004e38:	e008      	b.n	8004e4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004e3a:	bf00      	nop
 8004e3c:	e006      	b.n	8004e4c <HAL_UART_IRQHandler+0x5c8>
    return;
 8004e3e:	bf00      	nop
 8004e40:	e004      	b.n	8004e4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <HAL_UART_IRQHandler+0x5c8>
    return;
 8004e4a:	bf00      	nop
  }

}
 8004e4c:	37e8      	adds	r7, #232	; 0xe8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop

08004e54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4ba6      	ldr	r3, [pc, #664]	; (800516c <UART_SetConfig+0x2c4>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	6979      	ldr	r1, [r7, #20]
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a94      	ldr	r2, [pc, #592]	; (8005170 <UART_SetConfig+0x2c8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d120      	bne.n	8004f66 <UART_SetConfig+0xbe>
 8004f24:	4b93      	ldr	r3, [pc, #588]	; (8005174 <UART_SetConfig+0x2cc>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d816      	bhi.n	8004f60 <UART_SetConfig+0xb8>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <UART_SetConfig+0x90>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f55 	.word	0x08004f55
 8004f40:	08004f4f 	.word	0x08004f4f
 8004f44:	08004f5b 	.word	0x08004f5b
 8004f48:	2301      	movs	r3, #1
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e150      	b.n	80051f0 <UART_SetConfig+0x348>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e14d      	b.n	80051f0 <UART_SetConfig+0x348>
 8004f54:	2304      	movs	r3, #4
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e14a      	b.n	80051f0 <UART_SetConfig+0x348>
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	77fb      	strb	r3, [r7, #31]
 8004f5e:	e147      	b.n	80051f0 <UART_SetConfig+0x348>
 8004f60:	2310      	movs	r3, #16
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e144      	b.n	80051f0 <UART_SetConfig+0x348>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a83      	ldr	r2, [pc, #524]	; (8005178 <UART_SetConfig+0x2d0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d132      	bne.n	8004fd6 <UART_SetConfig+0x12e>
 8004f70:	4b80      	ldr	r3, [pc, #512]	; (8005174 <UART_SetConfig+0x2cc>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	2b0c      	cmp	r3, #12
 8004f7c:	d828      	bhi.n	8004fd0 <UART_SetConfig+0x128>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0xdc>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004fb9 	.word	0x08004fb9
 8004f88:	08004fd1 	.word	0x08004fd1
 8004f8c:	08004fd1 	.word	0x08004fd1
 8004f90:	08004fd1 	.word	0x08004fd1
 8004f94:	08004fc5 	.word	0x08004fc5
 8004f98:	08004fd1 	.word	0x08004fd1
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	08004fd1 	.word	0x08004fd1
 8004fa4:	08004fbf 	.word	0x08004fbf
 8004fa8:	08004fd1 	.word	0x08004fd1
 8004fac:	08004fd1 	.word	0x08004fd1
 8004fb0:	08004fd1 	.word	0x08004fd1
 8004fb4:	08004fcb 	.word	0x08004fcb
 8004fb8:	2300      	movs	r3, #0
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e118      	b.n	80051f0 <UART_SetConfig+0x348>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e115      	b.n	80051f0 <UART_SetConfig+0x348>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e112      	b.n	80051f0 <UART_SetConfig+0x348>
 8004fca:	2308      	movs	r3, #8
 8004fcc:	77fb      	strb	r3, [r7, #31]
 8004fce:	e10f      	b.n	80051f0 <UART_SetConfig+0x348>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e10c      	b.n	80051f0 <UART_SetConfig+0x348>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a68      	ldr	r2, [pc, #416]	; (800517c <UART_SetConfig+0x2d4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d120      	bne.n	8005022 <UART_SetConfig+0x17a>
 8004fe0:	4b64      	ldr	r3, [pc, #400]	; (8005174 <UART_SetConfig+0x2cc>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fea:	2b30      	cmp	r3, #48	; 0x30
 8004fec:	d013      	beq.n	8005016 <UART_SetConfig+0x16e>
 8004fee:	2b30      	cmp	r3, #48	; 0x30
 8004ff0:	d814      	bhi.n	800501c <UART_SetConfig+0x174>
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d009      	beq.n	800500a <UART_SetConfig+0x162>
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d810      	bhi.n	800501c <UART_SetConfig+0x174>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <UART_SetConfig+0x15c>
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d006      	beq.n	8005010 <UART_SetConfig+0x168>
 8005002:	e00b      	b.n	800501c <UART_SetConfig+0x174>
 8005004:	2300      	movs	r3, #0
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e0f2      	b.n	80051f0 <UART_SetConfig+0x348>
 800500a:	2302      	movs	r3, #2
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e0ef      	b.n	80051f0 <UART_SetConfig+0x348>
 8005010:	2304      	movs	r3, #4
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e0ec      	b.n	80051f0 <UART_SetConfig+0x348>
 8005016:	2308      	movs	r3, #8
 8005018:	77fb      	strb	r3, [r7, #31]
 800501a:	e0e9      	b.n	80051f0 <UART_SetConfig+0x348>
 800501c:	2310      	movs	r3, #16
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e0e6      	b.n	80051f0 <UART_SetConfig+0x348>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a56      	ldr	r2, [pc, #344]	; (8005180 <UART_SetConfig+0x2d8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d120      	bne.n	800506e <UART_SetConfig+0x1c6>
 800502c:	4b51      	ldr	r3, [pc, #324]	; (8005174 <UART_SetConfig+0x2cc>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005036:	2bc0      	cmp	r3, #192	; 0xc0
 8005038:	d013      	beq.n	8005062 <UART_SetConfig+0x1ba>
 800503a:	2bc0      	cmp	r3, #192	; 0xc0
 800503c:	d814      	bhi.n	8005068 <UART_SetConfig+0x1c0>
 800503e:	2b80      	cmp	r3, #128	; 0x80
 8005040:	d009      	beq.n	8005056 <UART_SetConfig+0x1ae>
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d810      	bhi.n	8005068 <UART_SetConfig+0x1c0>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <UART_SetConfig+0x1a8>
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d006      	beq.n	800505c <UART_SetConfig+0x1b4>
 800504e:	e00b      	b.n	8005068 <UART_SetConfig+0x1c0>
 8005050:	2300      	movs	r3, #0
 8005052:	77fb      	strb	r3, [r7, #31]
 8005054:	e0cc      	b.n	80051f0 <UART_SetConfig+0x348>
 8005056:	2302      	movs	r3, #2
 8005058:	77fb      	strb	r3, [r7, #31]
 800505a:	e0c9      	b.n	80051f0 <UART_SetConfig+0x348>
 800505c:	2304      	movs	r3, #4
 800505e:	77fb      	strb	r3, [r7, #31]
 8005060:	e0c6      	b.n	80051f0 <UART_SetConfig+0x348>
 8005062:	2308      	movs	r3, #8
 8005064:	77fb      	strb	r3, [r7, #31]
 8005066:	e0c3      	b.n	80051f0 <UART_SetConfig+0x348>
 8005068:	2310      	movs	r3, #16
 800506a:	77fb      	strb	r3, [r7, #31]
 800506c:	e0c0      	b.n	80051f0 <UART_SetConfig+0x348>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a44      	ldr	r2, [pc, #272]	; (8005184 <UART_SetConfig+0x2dc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d125      	bne.n	80050c4 <UART_SetConfig+0x21c>
 8005078:	4b3e      	ldr	r3, [pc, #248]	; (8005174 <UART_SetConfig+0x2cc>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005086:	d017      	beq.n	80050b8 <UART_SetConfig+0x210>
 8005088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800508c:	d817      	bhi.n	80050be <UART_SetConfig+0x216>
 800508e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005092:	d00b      	beq.n	80050ac <UART_SetConfig+0x204>
 8005094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005098:	d811      	bhi.n	80050be <UART_SetConfig+0x216>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <UART_SetConfig+0x1fe>
 800509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a2:	d006      	beq.n	80050b2 <UART_SetConfig+0x20a>
 80050a4:	e00b      	b.n	80050be <UART_SetConfig+0x216>
 80050a6:	2300      	movs	r3, #0
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e0a1      	b.n	80051f0 <UART_SetConfig+0x348>
 80050ac:	2302      	movs	r3, #2
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e09e      	b.n	80051f0 <UART_SetConfig+0x348>
 80050b2:	2304      	movs	r3, #4
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e09b      	b.n	80051f0 <UART_SetConfig+0x348>
 80050b8:	2308      	movs	r3, #8
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e098      	b.n	80051f0 <UART_SetConfig+0x348>
 80050be:	2310      	movs	r3, #16
 80050c0:	77fb      	strb	r3, [r7, #31]
 80050c2:	e095      	b.n	80051f0 <UART_SetConfig+0x348>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <UART_SetConfig+0x2e0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d125      	bne.n	800511a <UART_SetConfig+0x272>
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <UART_SetConfig+0x2cc>)
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050dc:	d017      	beq.n	800510e <UART_SetConfig+0x266>
 80050de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050e2:	d817      	bhi.n	8005114 <UART_SetConfig+0x26c>
 80050e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e8:	d00b      	beq.n	8005102 <UART_SetConfig+0x25a>
 80050ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ee:	d811      	bhi.n	8005114 <UART_SetConfig+0x26c>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <UART_SetConfig+0x254>
 80050f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f8:	d006      	beq.n	8005108 <UART_SetConfig+0x260>
 80050fa:	e00b      	b.n	8005114 <UART_SetConfig+0x26c>
 80050fc:	2301      	movs	r3, #1
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	e076      	b.n	80051f0 <UART_SetConfig+0x348>
 8005102:	2302      	movs	r3, #2
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	e073      	b.n	80051f0 <UART_SetConfig+0x348>
 8005108:	2304      	movs	r3, #4
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e070      	b.n	80051f0 <UART_SetConfig+0x348>
 800510e:	2308      	movs	r3, #8
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e06d      	b.n	80051f0 <UART_SetConfig+0x348>
 8005114:	2310      	movs	r3, #16
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e06a      	b.n	80051f0 <UART_SetConfig+0x348>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1b      	ldr	r2, [pc, #108]	; (800518c <UART_SetConfig+0x2e4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d138      	bne.n	8005196 <UART_SetConfig+0x2ee>
 8005124:	4b13      	ldr	r3, [pc, #76]	; (8005174 <UART_SetConfig+0x2cc>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800512e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005132:	d017      	beq.n	8005164 <UART_SetConfig+0x2bc>
 8005134:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005138:	d82a      	bhi.n	8005190 <UART_SetConfig+0x2e8>
 800513a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513e:	d00b      	beq.n	8005158 <UART_SetConfig+0x2b0>
 8005140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005144:	d824      	bhi.n	8005190 <UART_SetConfig+0x2e8>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <UART_SetConfig+0x2aa>
 800514a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514e:	d006      	beq.n	800515e <UART_SetConfig+0x2b6>
 8005150:	e01e      	b.n	8005190 <UART_SetConfig+0x2e8>
 8005152:	2300      	movs	r3, #0
 8005154:	77fb      	strb	r3, [r7, #31]
 8005156:	e04b      	b.n	80051f0 <UART_SetConfig+0x348>
 8005158:	2302      	movs	r3, #2
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e048      	b.n	80051f0 <UART_SetConfig+0x348>
 800515e:	2304      	movs	r3, #4
 8005160:	77fb      	strb	r3, [r7, #31]
 8005162:	e045      	b.n	80051f0 <UART_SetConfig+0x348>
 8005164:	2308      	movs	r3, #8
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e042      	b.n	80051f0 <UART_SetConfig+0x348>
 800516a:	bf00      	nop
 800516c:	efff69f3 	.word	0xefff69f3
 8005170:	40011000 	.word	0x40011000
 8005174:	40023800 	.word	0x40023800
 8005178:	40004400 	.word	0x40004400
 800517c:	40004800 	.word	0x40004800
 8005180:	40004c00 	.word	0x40004c00
 8005184:	40005000 	.word	0x40005000
 8005188:	40011400 	.word	0x40011400
 800518c:	40007800 	.word	0x40007800
 8005190:	2310      	movs	r3, #16
 8005192:	77fb      	strb	r3, [r7, #31]
 8005194:	e02c      	b.n	80051f0 <UART_SetConfig+0x348>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a72      	ldr	r2, [pc, #456]	; (8005364 <UART_SetConfig+0x4bc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d125      	bne.n	80051ec <UART_SetConfig+0x344>
 80051a0:	4b71      	ldr	r3, [pc, #452]	; (8005368 <UART_SetConfig+0x4c0>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051ae:	d017      	beq.n	80051e0 <UART_SetConfig+0x338>
 80051b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051b4:	d817      	bhi.n	80051e6 <UART_SetConfig+0x33e>
 80051b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ba:	d00b      	beq.n	80051d4 <UART_SetConfig+0x32c>
 80051bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c0:	d811      	bhi.n	80051e6 <UART_SetConfig+0x33e>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <UART_SetConfig+0x326>
 80051c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ca:	d006      	beq.n	80051da <UART_SetConfig+0x332>
 80051cc:	e00b      	b.n	80051e6 <UART_SetConfig+0x33e>
 80051ce:	2300      	movs	r3, #0
 80051d0:	77fb      	strb	r3, [r7, #31]
 80051d2:	e00d      	b.n	80051f0 <UART_SetConfig+0x348>
 80051d4:	2302      	movs	r3, #2
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e00a      	b.n	80051f0 <UART_SetConfig+0x348>
 80051da:	2304      	movs	r3, #4
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e007      	b.n	80051f0 <UART_SetConfig+0x348>
 80051e0:	2308      	movs	r3, #8
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e004      	b.n	80051f0 <UART_SetConfig+0x348>
 80051e6:	2310      	movs	r3, #16
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e001      	b.n	80051f0 <UART_SetConfig+0x348>
 80051ec:	2310      	movs	r3, #16
 80051ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f8:	d15b      	bne.n	80052b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051fa:	7ffb      	ldrb	r3, [r7, #31]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d828      	bhi.n	8005252 <UART_SetConfig+0x3aa>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <UART_SetConfig+0x360>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005235 	.word	0x08005235
 8005210:	0800523d 	.word	0x0800523d
 8005214:	08005253 	.word	0x08005253
 8005218:	08005243 	.word	0x08005243
 800521c:	08005253 	.word	0x08005253
 8005220:	08005253 	.word	0x08005253
 8005224:	08005253 	.word	0x08005253
 8005228:	0800524b 	.word	0x0800524b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522c:	f7fe f84c 	bl	80032c8 <HAL_RCC_GetPCLK1Freq>
 8005230:	61b8      	str	r0, [r7, #24]
        break;
 8005232:	e013      	b.n	800525c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005234:	f7fe f85c 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 8005238:	61b8      	str	r0, [r7, #24]
        break;
 800523a:	e00f      	b.n	800525c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800523c:	4b4b      	ldr	r3, [pc, #300]	; (800536c <UART_SetConfig+0x4c4>)
 800523e:	61bb      	str	r3, [r7, #24]
        break;
 8005240:	e00c      	b.n	800525c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005242:	f7fd ff6f 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8005246:	61b8      	str	r0, [r7, #24]
        break;
 8005248:	e008      	b.n	800525c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800524e:	61bb      	str	r3, [r7, #24]
        break;
 8005250:	e004      	b.n	800525c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	77bb      	strb	r3, [r7, #30]
        break;
 800525a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d074      	beq.n	800534c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	005a      	lsls	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	441a      	add	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b0f      	cmp	r3, #15
 800527c:	d916      	bls.n	80052ac <UART_SetConfig+0x404>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005284:	d212      	bcs.n	80052ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f023 030f 	bic.w	r3, r3, #15
 800528e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	b29a      	uxth	r2, r3
 800529c:	89fb      	ldrh	r3, [r7, #14]
 800529e:	4313      	orrs	r3, r2
 80052a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	89fa      	ldrh	r2, [r7, #14]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	e04f      	b.n	800534c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	77bb      	strb	r3, [r7, #30]
 80052b0:	e04c      	b.n	800534c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052b2:	7ffb      	ldrb	r3, [r7, #31]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d828      	bhi.n	800530a <UART_SetConfig+0x462>
 80052b8:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <UART_SetConfig+0x418>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	0800530b 	.word	0x0800530b
 80052d0:	080052fb 	.word	0x080052fb
 80052d4:	0800530b 	.word	0x0800530b
 80052d8:	0800530b 	.word	0x0800530b
 80052dc:	0800530b 	.word	0x0800530b
 80052e0:	08005303 	.word	0x08005303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fd fff0 	bl	80032c8 <HAL_RCC_GetPCLK1Freq>
 80052e8:	61b8      	str	r0, [r7, #24]
        break;
 80052ea:	e013      	b.n	8005314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ec:	f7fe f800 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 80052f0:	61b8      	str	r0, [r7, #24]
        break;
 80052f2:	e00f      	b.n	8005314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <UART_SetConfig+0x4c4>)
 80052f6:	61bb      	str	r3, [r7, #24]
        break;
 80052f8:	e00c      	b.n	8005314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fa:	f7fd ff13 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80052fe:	61b8      	str	r0, [r7, #24]
        break;
 8005300:	e008      	b.n	8005314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005306:	61bb      	str	r3, [r7, #24]
        break;
 8005308:	e004      	b.n	8005314 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	77bb      	strb	r3, [r7, #30]
        break;
 8005312:	bf00      	nop
    }

    if (pclk != 0U)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d018      	beq.n	800534c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	085a      	lsrs	r2, r3, #1
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b0f      	cmp	r3, #15
 8005332:	d909      	bls.n	8005348 <UART_SetConfig+0x4a0>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533a:	d205      	bcs.n	8005348 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60da      	str	r2, [r3, #12]
 8005346:	e001      	b.n	800534c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005358:	7fbb      	ldrb	r3, [r7, #30]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40007c00 	.word	0x40007c00
 8005368:	40023800 	.word	0x40023800
 800536c:	00f42400 	.word	0x00f42400

08005370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01a      	beq.n	8005486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800546e:	d10a      	bne.n	8005486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	605a      	str	r2, [r3, #4]
  }
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054c4:	f7fc f8f2 	bl	80016ac <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d10e      	bne.n	80054f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f831 	bl	800554e <UART_WaitOnFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e027      	b.n	8005546 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b04      	cmp	r3, #4
 8005502:	d10e      	bne.n	8005522 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f81b 	bl	800554e <UART_WaitOnFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e011      	b.n	8005546 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b09c      	sub	sp, #112	; 0x70
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	4613      	mov	r3, r2
 800555c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555e:	e0a7      	b.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005566:	f000 80a3 	beq.w	80056b0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556a:	f7fc f89f 	bl	80016ac <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005576:	429a      	cmp	r2, r3
 8005578:	d302      	bcc.n	8005580 <UART_WaitOnFlagUntilTimeout+0x32>
 800557a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800557c:	2b00      	cmp	r3, #0
 800557e:	d13f      	bne.n	8005600 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800558e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005590:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005594:	667b      	str	r3, [r7, #100]	; 0x64
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800559e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e6      	bne.n	8005580 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3308      	adds	r3, #8
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	f023 0301 	bic.w	r3, r3, #1
 80055c8:	663b      	str	r3, [r7, #96]	; 0x60
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80055d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e5      	bne.n	80055b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e068      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d050      	beq.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800561c:	d148      	bne.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005626:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800563c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800564c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e6      	bne.n	8005628 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	613b      	str	r3, [r7, #16]
   return(result);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	66bb      	str	r3, [r7, #104]	; 0x68
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800567a:	623a      	str	r2, [r7, #32]
 800567c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	69f9      	ldr	r1, [r7, #28]
 8005680:	6a3a      	ldr	r2, [r7, #32]
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	61bb      	str	r3, [r7, #24]
   return(result);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e010      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69da      	ldr	r2, [r3, #28]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4013      	ands	r3, r2
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	429a      	cmp	r2, r3
 80056be:	bf0c      	ite	eq
 80056c0:	2301      	moveq	r3, #1
 80056c2:	2300      	movne	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	f43f af48 	beq.w	8005560 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3770      	adds	r7, #112	; 0x70
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056da:	b480      	push	{r7}
 80056dc:	b095      	sub	sp, #84	; 0x54
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005700:	643b      	str	r3, [r7, #64]	; 0x40
 8005702:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e6      	bne.n	80056e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	61fb      	str	r3, [r7, #28]
   return(result);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f023 0301 	bic.w	r3, r3, #1
 800572a:	64bb      	str	r3, [r7, #72]	; 0x48
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3308      	adds	r3, #8
 8005732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005734:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800573a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e5      	bne.n	8005714 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574c:	2b01      	cmp	r3, #1
 800574e:	d118      	bne.n	8005782 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	60bb      	str	r3, [r7, #8]
   return(result);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f023 0310 	bic.w	r3, r3, #16
 8005764:	647b      	str	r3, [r7, #68]	; 0x44
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6979      	ldr	r1, [r7, #20]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	613b      	str	r3, [r7, #16]
   return(result);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e6      	bne.n	8005750 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005796:	bf00      	nop
 8005798:	3754      	adds	r7, #84	; 0x54
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7ff fb51 	bl	8004e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057c6:	bf00      	nop
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b088      	sub	sp, #32
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	6979      	ldr	r1, [r7, #20]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	613b      	str	r3, [r7, #16]
   return(result);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e6      	bne.n	80057d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff fb1d 	bl	8004e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800581a:	bf00      	nop
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <siprintf>:
 8005824:	b40e      	push	{r1, r2, r3}
 8005826:	b500      	push	{lr}
 8005828:	b09c      	sub	sp, #112	; 0x70
 800582a:	ab1d      	add	r3, sp, #116	; 0x74
 800582c:	9002      	str	r0, [sp, #8]
 800582e:	9006      	str	r0, [sp, #24]
 8005830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005834:	4809      	ldr	r0, [pc, #36]	; (800585c <siprintf+0x38>)
 8005836:	9107      	str	r1, [sp, #28]
 8005838:	9104      	str	r1, [sp, #16]
 800583a:	4909      	ldr	r1, [pc, #36]	; (8005860 <siprintf+0x3c>)
 800583c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005840:	9105      	str	r1, [sp, #20]
 8005842:	6800      	ldr	r0, [r0, #0]
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	a902      	add	r1, sp, #8
 8005848:	f000 f89a 	bl	8005980 <_svfiprintf_r>
 800584c:	9b02      	ldr	r3, [sp, #8]
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	b01c      	add	sp, #112	; 0x70
 8005854:	f85d eb04 	ldr.w	lr, [sp], #4
 8005858:	b003      	add	sp, #12
 800585a:	4770      	bx	lr
 800585c:	20000058 	.word	0x20000058
 8005860:	ffff0208 	.word	0xffff0208

08005864 <memset>:
 8005864:	4402      	add	r2, r0
 8005866:	4603      	mov	r3, r0
 8005868:	4293      	cmp	r3, r2
 800586a:	d100      	bne.n	800586e <memset+0xa>
 800586c:	4770      	bx	lr
 800586e:	f803 1b01 	strb.w	r1, [r3], #1
 8005872:	e7f9      	b.n	8005868 <memset+0x4>

08005874 <__errno>:
 8005874:	4b01      	ldr	r3, [pc, #4]	; (800587c <__errno+0x8>)
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000058 	.word	0x20000058

08005880 <__libc_init_array>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4d0d      	ldr	r5, [pc, #52]	; (80058b8 <__libc_init_array+0x38>)
 8005884:	4c0d      	ldr	r4, [pc, #52]	; (80058bc <__libc_init_array+0x3c>)
 8005886:	1b64      	subs	r4, r4, r5
 8005888:	10a4      	asrs	r4, r4, #2
 800588a:	2600      	movs	r6, #0
 800588c:	42a6      	cmp	r6, r4
 800588e:	d109      	bne.n	80058a4 <__libc_init_array+0x24>
 8005890:	4d0b      	ldr	r5, [pc, #44]	; (80058c0 <__libc_init_array+0x40>)
 8005892:	4c0c      	ldr	r4, [pc, #48]	; (80058c4 <__libc_init_array+0x44>)
 8005894:	f000 fc6a 	bl	800616c <_init>
 8005898:	1b64      	subs	r4, r4, r5
 800589a:	10a4      	asrs	r4, r4, #2
 800589c:	2600      	movs	r6, #0
 800589e:	42a6      	cmp	r6, r4
 80058a0:	d105      	bne.n	80058ae <__libc_init_array+0x2e>
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a8:	4798      	blx	r3
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7ee      	b.n	800588c <__libc_init_array+0xc>
 80058ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b2:	4798      	blx	r3
 80058b4:	3601      	adds	r6, #1
 80058b6:	e7f2      	b.n	800589e <__libc_init_array+0x1e>
 80058b8:	08006200 	.word	0x08006200
 80058bc:	08006200 	.word	0x08006200
 80058c0:	08006200 	.word	0x08006200
 80058c4:	08006204 	.word	0x08006204

080058c8 <__retarget_lock_acquire_recursive>:
 80058c8:	4770      	bx	lr

080058ca <__retarget_lock_release_recursive>:
 80058ca:	4770      	bx	lr

080058cc <__ssputs_r>:
 80058cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	688e      	ldr	r6, [r1, #8]
 80058d2:	461f      	mov	r7, r3
 80058d4:	42be      	cmp	r6, r7
 80058d6:	680b      	ldr	r3, [r1, #0]
 80058d8:	4682      	mov	sl, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	4690      	mov	r8, r2
 80058de:	d82c      	bhi.n	800593a <__ssputs_r+0x6e>
 80058e0:	898a      	ldrh	r2, [r1, #12]
 80058e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058e6:	d026      	beq.n	8005936 <__ssputs_r+0x6a>
 80058e8:	6965      	ldr	r5, [r4, #20]
 80058ea:	6909      	ldr	r1, [r1, #16]
 80058ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f0:	eba3 0901 	sub.w	r9, r3, r1
 80058f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058f8:	1c7b      	adds	r3, r7, #1
 80058fa:	444b      	add	r3, r9
 80058fc:	106d      	asrs	r5, r5, #1
 80058fe:	429d      	cmp	r5, r3
 8005900:	bf38      	it	cc
 8005902:	461d      	movcc	r5, r3
 8005904:	0553      	lsls	r3, r2, #21
 8005906:	d527      	bpl.n	8005958 <__ssputs_r+0x8c>
 8005908:	4629      	mov	r1, r5
 800590a:	f000 f957 	bl	8005bbc <_malloc_r>
 800590e:	4606      	mov	r6, r0
 8005910:	b360      	cbz	r0, 800596c <__ssputs_r+0xa0>
 8005912:	6921      	ldr	r1, [r4, #16]
 8005914:	464a      	mov	r2, r9
 8005916:	f000 fbc7 	bl	80060a8 <memcpy>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	6126      	str	r6, [r4, #16]
 8005928:	6165      	str	r5, [r4, #20]
 800592a:	444e      	add	r6, r9
 800592c:	eba5 0509 	sub.w	r5, r5, r9
 8005930:	6026      	str	r6, [r4, #0]
 8005932:	60a5      	str	r5, [r4, #8]
 8005934:	463e      	mov	r6, r7
 8005936:	42be      	cmp	r6, r7
 8005938:	d900      	bls.n	800593c <__ssputs_r+0x70>
 800593a:	463e      	mov	r6, r7
 800593c:	6820      	ldr	r0, [r4, #0]
 800593e:	4632      	mov	r2, r6
 8005940:	4641      	mov	r1, r8
 8005942:	f000 fb86 	bl	8006052 <memmove>
 8005946:	68a3      	ldr	r3, [r4, #8]
 8005948:	1b9b      	subs	r3, r3, r6
 800594a:	60a3      	str	r3, [r4, #8]
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	4433      	add	r3, r6
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	2000      	movs	r0, #0
 8005954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005958:	462a      	mov	r2, r5
 800595a:	f000 fb4b 	bl	8005ff4 <_realloc_r>
 800595e:	4606      	mov	r6, r0
 8005960:	2800      	cmp	r0, #0
 8005962:	d1e0      	bne.n	8005926 <__ssputs_r+0x5a>
 8005964:	6921      	ldr	r1, [r4, #16]
 8005966:	4650      	mov	r0, sl
 8005968:	f000 fbac 	bl	80060c4 <_free_r>
 800596c:	230c      	movs	r3, #12
 800596e:	f8ca 3000 	str.w	r3, [sl]
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800597e:	e7e9      	b.n	8005954 <__ssputs_r+0x88>

08005980 <_svfiprintf_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	4698      	mov	r8, r3
 8005986:	898b      	ldrh	r3, [r1, #12]
 8005988:	061b      	lsls	r3, r3, #24
 800598a:	b09d      	sub	sp, #116	; 0x74
 800598c:	4607      	mov	r7, r0
 800598e:	460d      	mov	r5, r1
 8005990:	4614      	mov	r4, r2
 8005992:	d50e      	bpl.n	80059b2 <_svfiprintf_r+0x32>
 8005994:	690b      	ldr	r3, [r1, #16]
 8005996:	b963      	cbnz	r3, 80059b2 <_svfiprintf_r+0x32>
 8005998:	2140      	movs	r1, #64	; 0x40
 800599a:	f000 f90f 	bl	8005bbc <_malloc_r>
 800599e:	6028      	str	r0, [r5, #0]
 80059a0:	6128      	str	r0, [r5, #16]
 80059a2:	b920      	cbnz	r0, 80059ae <_svfiprintf_r+0x2e>
 80059a4:	230c      	movs	r3, #12
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ac:	e0d0      	b.n	8005b50 <_svfiprintf_r+0x1d0>
 80059ae:	2340      	movs	r3, #64	; 0x40
 80059b0:	616b      	str	r3, [r5, #20]
 80059b2:	2300      	movs	r3, #0
 80059b4:	9309      	str	r3, [sp, #36]	; 0x24
 80059b6:	2320      	movs	r3, #32
 80059b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c0:	2330      	movs	r3, #48	; 0x30
 80059c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b68 <_svfiprintf_r+0x1e8>
 80059c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ca:	f04f 0901 	mov.w	r9, #1
 80059ce:	4623      	mov	r3, r4
 80059d0:	469a      	mov	sl, r3
 80059d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d6:	b10a      	cbz	r2, 80059dc <_svfiprintf_r+0x5c>
 80059d8:	2a25      	cmp	r2, #37	; 0x25
 80059da:	d1f9      	bne.n	80059d0 <_svfiprintf_r+0x50>
 80059dc:	ebba 0b04 	subs.w	fp, sl, r4
 80059e0:	d00b      	beq.n	80059fa <_svfiprintf_r+0x7a>
 80059e2:	465b      	mov	r3, fp
 80059e4:	4622      	mov	r2, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	4638      	mov	r0, r7
 80059ea:	f7ff ff6f 	bl	80058cc <__ssputs_r>
 80059ee:	3001      	adds	r0, #1
 80059f0:	f000 80a9 	beq.w	8005b46 <_svfiprintf_r+0x1c6>
 80059f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f6:	445a      	add	r2, fp
 80059f8:	9209      	str	r2, [sp, #36]	; 0x24
 80059fa:	f89a 3000 	ldrb.w	r3, [sl]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80a1 	beq.w	8005b46 <_svfiprintf_r+0x1c6>
 8005a04:	2300      	movs	r3, #0
 8005a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a0e:	f10a 0a01 	add.w	sl, sl, #1
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	9307      	str	r3, [sp, #28]
 8005a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a1c:	4654      	mov	r4, sl
 8005a1e:	2205      	movs	r2, #5
 8005a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a24:	4850      	ldr	r0, [pc, #320]	; (8005b68 <_svfiprintf_r+0x1e8>)
 8005a26:	f7fa fc0b 	bl	8000240 <memchr>
 8005a2a:	9a04      	ldr	r2, [sp, #16]
 8005a2c:	b9d8      	cbnz	r0, 8005a66 <_svfiprintf_r+0xe6>
 8005a2e:	06d0      	lsls	r0, r2, #27
 8005a30:	bf44      	itt	mi
 8005a32:	2320      	movmi	r3, #32
 8005a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a38:	0711      	lsls	r1, r2, #28
 8005a3a:	bf44      	itt	mi
 8005a3c:	232b      	movmi	r3, #43	; 0x2b
 8005a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a42:	f89a 3000 	ldrb.w	r3, [sl]
 8005a46:	2b2a      	cmp	r3, #42	; 0x2a
 8005a48:	d015      	beq.n	8005a76 <_svfiprintf_r+0xf6>
 8005a4a:	9a07      	ldr	r2, [sp, #28]
 8005a4c:	4654      	mov	r4, sl
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f04f 0c0a 	mov.w	ip, #10
 8005a54:	4621      	mov	r1, r4
 8005a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a5a:	3b30      	subs	r3, #48	; 0x30
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d94d      	bls.n	8005afc <_svfiprintf_r+0x17c>
 8005a60:	b1b0      	cbz	r0, 8005a90 <_svfiprintf_r+0x110>
 8005a62:	9207      	str	r2, [sp, #28]
 8005a64:	e014      	b.n	8005a90 <_svfiprintf_r+0x110>
 8005a66:	eba0 0308 	sub.w	r3, r0, r8
 8005a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	46a2      	mov	sl, r4
 8005a74:	e7d2      	b.n	8005a1c <_svfiprintf_r+0x9c>
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	1d19      	adds	r1, r3, #4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	9103      	str	r1, [sp, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bfbb      	ittet	lt
 8005a82:	425b      	neglt	r3, r3
 8005a84:	f042 0202 	orrlt.w	r2, r2, #2
 8005a88:	9307      	strge	r3, [sp, #28]
 8005a8a:	9307      	strlt	r3, [sp, #28]
 8005a8c:	bfb8      	it	lt
 8005a8e:	9204      	strlt	r2, [sp, #16]
 8005a90:	7823      	ldrb	r3, [r4, #0]
 8005a92:	2b2e      	cmp	r3, #46	; 0x2e
 8005a94:	d10c      	bne.n	8005ab0 <_svfiprintf_r+0x130>
 8005a96:	7863      	ldrb	r3, [r4, #1]
 8005a98:	2b2a      	cmp	r3, #42	; 0x2a
 8005a9a:	d134      	bne.n	8005b06 <_svfiprintf_r+0x186>
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	1d1a      	adds	r2, r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	9203      	str	r2, [sp, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bfb8      	it	lt
 8005aa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005aac:	3402      	adds	r4, #2
 8005aae:	9305      	str	r3, [sp, #20]
 8005ab0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005b78 <_svfiprintf_r+0x1f8>
 8005ab4:	7821      	ldrb	r1, [r4, #0]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	4650      	mov	r0, sl
 8005aba:	f7fa fbc1 	bl	8000240 <memchr>
 8005abe:	b138      	cbz	r0, 8005ad0 <_svfiprintf_r+0x150>
 8005ac0:	9b04      	ldr	r3, [sp, #16]
 8005ac2:	eba0 000a 	sub.w	r0, r0, sl
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	4082      	lsls	r2, r0
 8005aca:	4313      	orrs	r3, r2
 8005acc:	3401      	adds	r4, #1
 8005ace:	9304      	str	r3, [sp, #16]
 8005ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad4:	4825      	ldr	r0, [pc, #148]	; (8005b6c <_svfiprintf_r+0x1ec>)
 8005ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ada:	2206      	movs	r2, #6
 8005adc:	f7fa fbb0 	bl	8000240 <memchr>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d038      	beq.n	8005b56 <_svfiprintf_r+0x1d6>
 8005ae4:	4b22      	ldr	r3, [pc, #136]	; (8005b70 <_svfiprintf_r+0x1f0>)
 8005ae6:	bb1b      	cbnz	r3, 8005b30 <_svfiprintf_r+0x1b0>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	3307      	adds	r3, #7
 8005aec:	f023 0307 	bic.w	r3, r3, #7
 8005af0:	3308      	adds	r3, #8
 8005af2:	9303      	str	r3, [sp, #12]
 8005af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af6:	4433      	add	r3, r6
 8005af8:	9309      	str	r3, [sp, #36]	; 0x24
 8005afa:	e768      	b.n	80059ce <_svfiprintf_r+0x4e>
 8005afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b00:	460c      	mov	r4, r1
 8005b02:	2001      	movs	r0, #1
 8005b04:	e7a6      	b.n	8005a54 <_svfiprintf_r+0xd4>
 8005b06:	2300      	movs	r3, #0
 8005b08:	3401      	adds	r4, #1
 8005b0a:	9305      	str	r3, [sp, #20]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f04f 0c0a 	mov.w	ip, #10
 8005b12:	4620      	mov	r0, r4
 8005b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b18:	3a30      	subs	r2, #48	; 0x30
 8005b1a:	2a09      	cmp	r2, #9
 8005b1c:	d903      	bls.n	8005b26 <_svfiprintf_r+0x1a6>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0c6      	beq.n	8005ab0 <_svfiprintf_r+0x130>
 8005b22:	9105      	str	r1, [sp, #20]
 8005b24:	e7c4      	b.n	8005ab0 <_svfiprintf_r+0x130>
 8005b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e7f0      	b.n	8005b12 <_svfiprintf_r+0x192>
 8005b30:	ab03      	add	r3, sp, #12
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	462a      	mov	r2, r5
 8005b36:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <_svfiprintf_r+0x1f4>)
 8005b38:	a904      	add	r1, sp, #16
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	f3af 8000 	nop.w
 8005b40:	1c42      	adds	r2, r0, #1
 8005b42:	4606      	mov	r6, r0
 8005b44:	d1d6      	bne.n	8005af4 <_svfiprintf_r+0x174>
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	065b      	lsls	r3, r3, #25
 8005b4a:	f53f af2d 	bmi.w	80059a8 <_svfiprintf_r+0x28>
 8005b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b50:	b01d      	add	sp, #116	; 0x74
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	ab03      	add	r3, sp, #12
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <_svfiprintf_r+0x1f4>)
 8005b5e:	a904      	add	r1, sp, #16
 8005b60:	4638      	mov	r0, r7
 8005b62:	f000 f919 	bl	8005d98 <_printf_i>
 8005b66:	e7eb      	b.n	8005b40 <_svfiprintf_r+0x1c0>
 8005b68:	080061c4 	.word	0x080061c4
 8005b6c:	080061ce 	.word	0x080061ce
 8005b70:	00000000 	.word	0x00000000
 8005b74:	080058cd 	.word	0x080058cd
 8005b78:	080061ca 	.word	0x080061ca

08005b7c <sbrk_aligned>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	4e0e      	ldr	r6, [pc, #56]	; (8005bb8 <sbrk_aligned+0x3c>)
 8005b80:	460c      	mov	r4, r1
 8005b82:	6831      	ldr	r1, [r6, #0]
 8005b84:	4605      	mov	r5, r0
 8005b86:	b911      	cbnz	r1, 8005b8e <sbrk_aligned+0x12>
 8005b88:	f000 fa7e 	bl	8006088 <_sbrk_r>
 8005b8c:	6030      	str	r0, [r6, #0]
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4628      	mov	r0, r5
 8005b92:	f000 fa79 	bl	8006088 <_sbrk_r>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	d00a      	beq.n	8005bb0 <sbrk_aligned+0x34>
 8005b9a:	1cc4      	adds	r4, r0, #3
 8005b9c:	f024 0403 	bic.w	r4, r4, #3
 8005ba0:	42a0      	cmp	r0, r4
 8005ba2:	d007      	beq.n	8005bb4 <sbrk_aligned+0x38>
 8005ba4:	1a21      	subs	r1, r4, r0
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f000 fa6e 	bl	8006088 <_sbrk_r>
 8005bac:	3001      	adds	r0, #1
 8005bae:	d101      	bne.n	8005bb4 <sbrk_aligned+0x38>
 8005bb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	20000328 	.word	0x20000328

08005bbc <_malloc_r>:
 8005bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc0:	1ccd      	adds	r5, r1, #3
 8005bc2:	f025 0503 	bic.w	r5, r5, #3
 8005bc6:	3508      	adds	r5, #8
 8005bc8:	2d0c      	cmp	r5, #12
 8005bca:	bf38      	it	cc
 8005bcc:	250c      	movcc	r5, #12
 8005bce:	2d00      	cmp	r5, #0
 8005bd0:	4607      	mov	r7, r0
 8005bd2:	db01      	blt.n	8005bd8 <_malloc_r+0x1c>
 8005bd4:	42a9      	cmp	r1, r5
 8005bd6:	d905      	bls.n	8005be4 <_malloc_r+0x28>
 8005bd8:	230c      	movs	r3, #12
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	2600      	movs	r6, #0
 8005bde:	4630      	mov	r0, r6
 8005be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005be4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cb8 <_malloc_r+0xfc>
 8005be8:	f000 f9f8 	bl	8005fdc <__malloc_lock>
 8005bec:	f8d8 3000 	ldr.w	r3, [r8]
 8005bf0:	461c      	mov	r4, r3
 8005bf2:	bb5c      	cbnz	r4, 8005c4c <_malloc_r+0x90>
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	f7ff ffc0 	bl	8005b7c <sbrk_aligned>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	4604      	mov	r4, r0
 8005c00:	d155      	bne.n	8005cae <_malloc_r+0xf2>
 8005c02:	f8d8 4000 	ldr.w	r4, [r8]
 8005c06:	4626      	mov	r6, r4
 8005c08:	2e00      	cmp	r6, #0
 8005c0a:	d145      	bne.n	8005c98 <_malloc_r+0xdc>
 8005c0c:	2c00      	cmp	r4, #0
 8005c0e:	d048      	beq.n	8005ca2 <_malloc_r+0xe6>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	4631      	mov	r1, r6
 8005c14:	4638      	mov	r0, r7
 8005c16:	eb04 0903 	add.w	r9, r4, r3
 8005c1a:	f000 fa35 	bl	8006088 <_sbrk_r>
 8005c1e:	4581      	cmp	r9, r0
 8005c20:	d13f      	bne.n	8005ca2 <_malloc_r+0xe6>
 8005c22:	6821      	ldr	r1, [r4, #0]
 8005c24:	1a6d      	subs	r5, r5, r1
 8005c26:	4629      	mov	r1, r5
 8005c28:	4638      	mov	r0, r7
 8005c2a:	f7ff ffa7 	bl	8005b7c <sbrk_aligned>
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d037      	beq.n	8005ca2 <_malloc_r+0xe6>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	442b      	add	r3, r5
 8005c36:	6023      	str	r3, [r4, #0]
 8005c38:	f8d8 3000 	ldr.w	r3, [r8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d038      	beq.n	8005cb2 <_malloc_r+0xf6>
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	42a2      	cmp	r2, r4
 8005c44:	d12b      	bne.n	8005c9e <_malloc_r+0xe2>
 8005c46:	2200      	movs	r2, #0
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	e00f      	b.n	8005c6c <_malloc_r+0xb0>
 8005c4c:	6822      	ldr	r2, [r4, #0]
 8005c4e:	1b52      	subs	r2, r2, r5
 8005c50:	d41f      	bmi.n	8005c92 <_malloc_r+0xd6>
 8005c52:	2a0b      	cmp	r2, #11
 8005c54:	d917      	bls.n	8005c86 <_malloc_r+0xca>
 8005c56:	1961      	adds	r1, r4, r5
 8005c58:	42a3      	cmp	r3, r4
 8005c5a:	6025      	str	r5, [r4, #0]
 8005c5c:	bf18      	it	ne
 8005c5e:	6059      	strne	r1, [r3, #4]
 8005c60:	6863      	ldr	r3, [r4, #4]
 8005c62:	bf08      	it	eq
 8005c64:	f8c8 1000 	streq.w	r1, [r8]
 8005c68:	5162      	str	r2, [r4, r5]
 8005c6a:	604b      	str	r3, [r1, #4]
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	f104 060b 	add.w	r6, r4, #11
 8005c72:	f000 f9b9 	bl	8005fe8 <__malloc_unlock>
 8005c76:	f026 0607 	bic.w	r6, r6, #7
 8005c7a:	1d23      	adds	r3, r4, #4
 8005c7c:	1af2      	subs	r2, r6, r3
 8005c7e:	d0ae      	beq.n	8005bde <_malloc_r+0x22>
 8005c80:	1b9b      	subs	r3, r3, r6
 8005c82:	50a3      	str	r3, [r4, r2]
 8005c84:	e7ab      	b.n	8005bde <_malloc_r+0x22>
 8005c86:	42a3      	cmp	r3, r4
 8005c88:	6862      	ldr	r2, [r4, #4]
 8005c8a:	d1dd      	bne.n	8005c48 <_malloc_r+0x8c>
 8005c8c:	f8c8 2000 	str.w	r2, [r8]
 8005c90:	e7ec      	b.n	8005c6c <_malloc_r+0xb0>
 8005c92:	4623      	mov	r3, r4
 8005c94:	6864      	ldr	r4, [r4, #4]
 8005c96:	e7ac      	b.n	8005bf2 <_malloc_r+0x36>
 8005c98:	4634      	mov	r4, r6
 8005c9a:	6876      	ldr	r6, [r6, #4]
 8005c9c:	e7b4      	b.n	8005c08 <_malloc_r+0x4c>
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	e7cc      	b.n	8005c3c <_malloc_r+0x80>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	f000 f99e 	bl	8005fe8 <__malloc_unlock>
 8005cac:	e797      	b.n	8005bde <_malloc_r+0x22>
 8005cae:	6025      	str	r5, [r4, #0]
 8005cb0:	e7dc      	b.n	8005c6c <_malloc_r+0xb0>
 8005cb2:	605b      	str	r3, [r3, #4]
 8005cb4:	deff      	udf	#255	; 0xff
 8005cb6:	bf00      	nop
 8005cb8:	20000324 	.word	0x20000324

08005cbc <_printf_common>:
 8005cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc0:	4616      	mov	r6, r2
 8005cc2:	4699      	mov	r9, r3
 8005cc4:	688a      	ldr	r2, [r1, #8]
 8005cc6:	690b      	ldr	r3, [r1, #16]
 8005cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	bfb8      	it	lt
 8005cd0:	4613      	movlt	r3, r2
 8005cd2:	6033      	str	r3, [r6, #0]
 8005cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cd8:	4607      	mov	r7, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	b10a      	cbz	r2, 8005ce2 <_printf_common+0x26>
 8005cde:	3301      	adds	r3, #1
 8005ce0:	6033      	str	r3, [r6, #0]
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	0699      	lsls	r1, r3, #26
 8005ce6:	bf42      	ittt	mi
 8005ce8:	6833      	ldrmi	r3, [r6, #0]
 8005cea:	3302      	addmi	r3, #2
 8005cec:	6033      	strmi	r3, [r6, #0]
 8005cee:	6825      	ldr	r5, [r4, #0]
 8005cf0:	f015 0506 	ands.w	r5, r5, #6
 8005cf4:	d106      	bne.n	8005d04 <_printf_common+0x48>
 8005cf6:	f104 0a19 	add.w	sl, r4, #25
 8005cfa:	68e3      	ldr	r3, [r4, #12]
 8005cfc:	6832      	ldr	r2, [r6, #0]
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	42ab      	cmp	r3, r5
 8005d02:	dc26      	bgt.n	8005d52 <_printf_common+0x96>
 8005d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d08:	1e13      	subs	r3, r2, #0
 8005d0a:	6822      	ldr	r2, [r4, #0]
 8005d0c:	bf18      	it	ne
 8005d0e:	2301      	movne	r3, #1
 8005d10:	0692      	lsls	r2, r2, #26
 8005d12:	d42b      	bmi.n	8005d6c <_printf_common+0xb0>
 8005d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d18:	4649      	mov	r1, r9
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	47c0      	blx	r8
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d01e      	beq.n	8005d60 <_printf_common+0xa4>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	6922      	ldr	r2, [r4, #16]
 8005d26:	f003 0306 	and.w	r3, r3, #6
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	bf02      	ittt	eq
 8005d2e:	68e5      	ldreq	r5, [r4, #12]
 8005d30:	6833      	ldreq	r3, [r6, #0]
 8005d32:	1aed      	subeq	r5, r5, r3
 8005d34:	68a3      	ldr	r3, [r4, #8]
 8005d36:	bf0c      	ite	eq
 8005d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d3c:	2500      	movne	r5, #0
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	bfc4      	itt	gt
 8005d42:	1a9b      	subgt	r3, r3, r2
 8005d44:	18ed      	addgt	r5, r5, r3
 8005d46:	2600      	movs	r6, #0
 8005d48:	341a      	adds	r4, #26
 8005d4a:	42b5      	cmp	r5, r6
 8005d4c:	d11a      	bne.n	8005d84 <_printf_common+0xc8>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	e008      	b.n	8005d64 <_printf_common+0xa8>
 8005d52:	2301      	movs	r3, #1
 8005d54:	4652      	mov	r2, sl
 8005d56:	4649      	mov	r1, r9
 8005d58:	4638      	mov	r0, r7
 8005d5a:	47c0      	blx	r8
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d103      	bne.n	8005d68 <_printf_common+0xac>
 8005d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d68:	3501      	adds	r5, #1
 8005d6a:	e7c6      	b.n	8005cfa <_printf_common+0x3e>
 8005d6c:	18e1      	adds	r1, r4, r3
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	2030      	movs	r0, #48	; 0x30
 8005d72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d76:	4422      	add	r2, r4
 8005d78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d80:	3302      	adds	r3, #2
 8005d82:	e7c7      	b.n	8005d14 <_printf_common+0x58>
 8005d84:	2301      	movs	r3, #1
 8005d86:	4622      	mov	r2, r4
 8005d88:	4649      	mov	r1, r9
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	47c0      	blx	r8
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d0e6      	beq.n	8005d60 <_printf_common+0xa4>
 8005d92:	3601      	adds	r6, #1
 8005d94:	e7d9      	b.n	8005d4a <_printf_common+0x8e>
	...

08005d98 <_printf_i>:
 8005d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d9c:	7e0f      	ldrb	r7, [r1, #24]
 8005d9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005da0:	2f78      	cmp	r7, #120	; 0x78
 8005da2:	4691      	mov	r9, r2
 8005da4:	4680      	mov	r8, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	469a      	mov	sl, r3
 8005daa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dae:	d807      	bhi.n	8005dc0 <_printf_i+0x28>
 8005db0:	2f62      	cmp	r7, #98	; 0x62
 8005db2:	d80a      	bhi.n	8005dca <_printf_i+0x32>
 8005db4:	2f00      	cmp	r7, #0
 8005db6:	f000 80d4 	beq.w	8005f62 <_printf_i+0x1ca>
 8005dba:	2f58      	cmp	r7, #88	; 0x58
 8005dbc:	f000 80c0 	beq.w	8005f40 <_printf_i+0x1a8>
 8005dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dc8:	e03a      	b.n	8005e40 <_printf_i+0xa8>
 8005dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dce:	2b15      	cmp	r3, #21
 8005dd0:	d8f6      	bhi.n	8005dc0 <_printf_i+0x28>
 8005dd2:	a101      	add	r1, pc, #4	; (adr r1, 8005dd8 <_printf_i+0x40>)
 8005dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dd8:	08005e31 	.word	0x08005e31
 8005ddc:	08005e45 	.word	0x08005e45
 8005de0:	08005dc1 	.word	0x08005dc1
 8005de4:	08005dc1 	.word	0x08005dc1
 8005de8:	08005dc1 	.word	0x08005dc1
 8005dec:	08005dc1 	.word	0x08005dc1
 8005df0:	08005e45 	.word	0x08005e45
 8005df4:	08005dc1 	.word	0x08005dc1
 8005df8:	08005dc1 	.word	0x08005dc1
 8005dfc:	08005dc1 	.word	0x08005dc1
 8005e00:	08005dc1 	.word	0x08005dc1
 8005e04:	08005f49 	.word	0x08005f49
 8005e08:	08005e71 	.word	0x08005e71
 8005e0c:	08005f03 	.word	0x08005f03
 8005e10:	08005dc1 	.word	0x08005dc1
 8005e14:	08005dc1 	.word	0x08005dc1
 8005e18:	08005f6b 	.word	0x08005f6b
 8005e1c:	08005dc1 	.word	0x08005dc1
 8005e20:	08005e71 	.word	0x08005e71
 8005e24:	08005dc1 	.word	0x08005dc1
 8005e28:	08005dc1 	.word	0x08005dc1
 8005e2c:	08005f0b 	.word	0x08005f0b
 8005e30:	682b      	ldr	r3, [r5, #0]
 8005e32:	1d1a      	adds	r2, r3, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	602a      	str	r2, [r5, #0]
 8005e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e40:	2301      	movs	r3, #1
 8005e42:	e09f      	b.n	8005f84 <_printf_i+0x1ec>
 8005e44:	6820      	ldr	r0, [r4, #0]
 8005e46:	682b      	ldr	r3, [r5, #0]
 8005e48:	0607      	lsls	r7, r0, #24
 8005e4a:	f103 0104 	add.w	r1, r3, #4
 8005e4e:	6029      	str	r1, [r5, #0]
 8005e50:	d501      	bpl.n	8005e56 <_printf_i+0xbe>
 8005e52:	681e      	ldr	r6, [r3, #0]
 8005e54:	e003      	b.n	8005e5e <_printf_i+0xc6>
 8005e56:	0646      	lsls	r6, r0, #25
 8005e58:	d5fb      	bpl.n	8005e52 <_printf_i+0xba>
 8005e5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e5e:	2e00      	cmp	r6, #0
 8005e60:	da03      	bge.n	8005e6a <_printf_i+0xd2>
 8005e62:	232d      	movs	r3, #45	; 0x2d
 8005e64:	4276      	negs	r6, r6
 8005e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e6a:	485a      	ldr	r0, [pc, #360]	; (8005fd4 <_printf_i+0x23c>)
 8005e6c:	230a      	movs	r3, #10
 8005e6e:	e012      	b.n	8005e96 <_printf_i+0xfe>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	6820      	ldr	r0, [r4, #0]
 8005e74:	1d19      	adds	r1, r3, #4
 8005e76:	6029      	str	r1, [r5, #0]
 8005e78:	0605      	lsls	r5, r0, #24
 8005e7a:	d501      	bpl.n	8005e80 <_printf_i+0xe8>
 8005e7c:	681e      	ldr	r6, [r3, #0]
 8005e7e:	e002      	b.n	8005e86 <_printf_i+0xee>
 8005e80:	0641      	lsls	r1, r0, #25
 8005e82:	d5fb      	bpl.n	8005e7c <_printf_i+0xe4>
 8005e84:	881e      	ldrh	r6, [r3, #0]
 8005e86:	4853      	ldr	r0, [pc, #332]	; (8005fd4 <_printf_i+0x23c>)
 8005e88:	2f6f      	cmp	r7, #111	; 0x6f
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2308      	moveq	r3, #8
 8005e8e:	230a      	movne	r3, #10
 8005e90:	2100      	movs	r1, #0
 8005e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e96:	6865      	ldr	r5, [r4, #4]
 8005e98:	60a5      	str	r5, [r4, #8]
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	bfa2      	ittt	ge
 8005e9e:	6821      	ldrge	r1, [r4, #0]
 8005ea0:	f021 0104 	bicge.w	r1, r1, #4
 8005ea4:	6021      	strge	r1, [r4, #0]
 8005ea6:	b90e      	cbnz	r6, 8005eac <_printf_i+0x114>
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	d04b      	beq.n	8005f44 <_printf_i+0x1ac>
 8005eac:	4615      	mov	r5, r2
 8005eae:	fbb6 f1f3 	udiv	r1, r6, r3
 8005eb2:	fb03 6711 	mls	r7, r3, r1, r6
 8005eb6:	5dc7      	ldrb	r7, [r0, r7]
 8005eb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ebc:	4637      	mov	r7, r6
 8005ebe:	42bb      	cmp	r3, r7
 8005ec0:	460e      	mov	r6, r1
 8005ec2:	d9f4      	bls.n	8005eae <_printf_i+0x116>
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d10b      	bne.n	8005ee0 <_printf_i+0x148>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	07de      	lsls	r6, r3, #31
 8005ecc:	d508      	bpl.n	8005ee0 <_printf_i+0x148>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	6861      	ldr	r1, [r4, #4]
 8005ed2:	4299      	cmp	r1, r3
 8005ed4:	bfde      	ittt	le
 8005ed6:	2330      	movle	r3, #48	; 0x30
 8005ed8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005edc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ee0:	1b52      	subs	r2, r2, r5
 8005ee2:	6122      	str	r2, [r4, #16]
 8005ee4:	f8cd a000 	str.w	sl, [sp]
 8005ee8:	464b      	mov	r3, r9
 8005eea:	aa03      	add	r2, sp, #12
 8005eec:	4621      	mov	r1, r4
 8005eee:	4640      	mov	r0, r8
 8005ef0:	f7ff fee4 	bl	8005cbc <_printf_common>
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d14a      	bne.n	8005f8e <_printf_i+0x1f6>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005efc:	b004      	add	sp, #16
 8005efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	f043 0320 	orr.w	r3, r3, #32
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	4833      	ldr	r0, [pc, #204]	; (8005fd8 <_printf_i+0x240>)
 8005f0c:	2778      	movs	r7, #120	; 0x78
 8005f0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	6829      	ldr	r1, [r5, #0]
 8005f16:	061f      	lsls	r7, r3, #24
 8005f18:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f1c:	d402      	bmi.n	8005f24 <_printf_i+0x18c>
 8005f1e:	065f      	lsls	r7, r3, #25
 8005f20:	bf48      	it	mi
 8005f22:	b2b6      	uxthmi	r6, r6
 8005f24:	07df      	lsls	r7, r3, #31
 8005f26:	bf48      	it	mi
 8005f28:	f043 0320 	orrmi.w	r3, r3, #32
 8005f2c:	6029      	str	r1, [r5, #0]
 8005f2e:	bf48      	it	mi
 8005f30:	6023      	strmi	r3, [r4, #0]
 8005f32:	b91e      	cbnz	r6, 8005f3c <_printf_i+0x1a4>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	f023 0320 	bic.w	r3, r3, #32
 8005f3a:	6023      	str	r3, [r4, #0]
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	e7a7      	b.n	8005e90 <_printf_i+0xf8>
 8005f40:	4824      	ldr	r0, [pc, #144]	; (8005fd4 <_printf_i+0x23c>)
 8005f42:	e7e4      	b.n	8005f0e <_printf_i+0x176>
 8005f44:	4615      	mov	r5, r2
 8005f46:	e7bd      	b.n	8005ec4 <_printf_i+0x12c>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	6826      	ldr	r6, [r4, #0]
 8005f4c:	6961      	ldr	r1, [r4, #20]
 8005f4e:	1d18      	adds	r0, r3, #4
 8005f50:	6028      	str	r0, [r5, #0]
 8005f52:	0635      	lsls	r5, r6, #24
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	d501      	bpl.n	8005f5c <_printf_i+0x1c4>
 8005f58:	6019      	str	r1, [r3, #0]
 8005f5a:	e002      	b.n	8005f62 <_printf_i+0x1ca>
 8005f5c:	0670      	lsls	r0, r6, #25
 8005f5e:	d5fb      	bpl.n	8005f58 <_printf_i+0x1c0>
 8005f60:	8019      	strh	r1, [r3, #0]
 8005f62:	2300      	movs	r3, #0
 8005f64:	6123      	str	r3, [r4, #16]
 8005f66:	4615      	mov	r5, r2
 8005f68:	e7bc      	b.n	8005ee4 <_printf_i+0x14c>
 8005f6a:	682b      	ldr	r3, [r5, #0]
 8005f6c:	1d1a      	adds	r2, r3, #4
 8005f6e:	602a      	str	r2, [r5, #0]
 8005f70:	681d      	ldr	r5, [r3, #0]
 8005f72:	6862      	ldr	r2, [r4, #4]
 8005f74:	2100      	movs	r1, #0
 8005f76:	4628      	mov	r0, r5
 8005f78:	f7fa f962 	bl	8000240 <memchr>
 8005f7c:	b108      	cbz	r0, 8005f82 <_printf_i+0x1ea>
 8005f7e:	1b40      	subs	r0, r0, r5
 8005f80:	6060      	str	r0, [r4, #4]
 8005f82:	6863      	ldr	r3, [r4, #4]
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	2300      	movs	r3, #0
 8005f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f8c:	e7aa      	b.n	8005ee4 <_printf_i+0x14c>
 8005f8e:	6923      	ldr	r3, [r4, #16]
 8005f90:	462a      	mov	r2, r5
 8005f92:	4649      	mov	r1, r9
 8005f94:	4640      	mov	r0, r8
 8005f96:	47d0      	blx	sl
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d0ad      	beq.n	8005ef8 <_printf_i+0x160>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	079b      	lsls	r3, r3, #30
 8005fa0:	d413      	bmi.n	8005fca <_printf_i+0x232>
 8005fa2:	68e0      	ldr	r0, [r4, #12]
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	4298      	cmp	r0, r3
 8005fa8:	bfb8      	it	lt
 8005faa:	4618      	movlt	r0, r3
 8005fac:	e7a6      	b.n	8005efc <_printf_i+0x164>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	47d0      	blx	sl
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d09d      	beq.n	8005ef8 <_printf_i+0x160>
 8005fbc:	3501      	adds	r5, #1
 8005fbe:	68e3      	ldr	r3, [r4, #12]
 8005fc0:	9903      	ldr	r1, [sp, #12]
 8005fc2:	1a5b      	subs	r3, r3, r1
 8005fc4:	42ab      	cmp	r3, r5
 8005fc6:	dcf2      	bgt.n	8005fae <_printf_i+0x216>
 8005fc8:	e7eb      	b.n	8005fa2 <_printf_i+0x20a>
 8005fca:	2500      	movs	r5, #0
 8005fcc:	f104 0619 	add.w	r6, r4, #25
 8005fd0:	e7f5      	b.n	8005fbe <_printf_i+0x226>
 8005fd2:	bf00      	nop
 8005fd4:	080061d5 	.word	0x080061d5
 8005fd8:	080061e6 	.word	0x080061e6

08005fdc <__malloc_lock>:
 8005fdc:	4801      	ldr	r0, [pc, #4]	; (8005fe4 <__malloc_lock+0x8>)
 8005fde:	f7ff bc73 	b.w	80058c8 <__retarget_lock_acquire_recursive>
 8005fe2:	bf00      	nop
 8005fe4:	20000320 	.word	0x20000320

08005fe8 <__malloc_unlock>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__malloc_unlock+0x8>)
 8005fea:	f7ff bc6e 	b.w	80058ca <__retarget_lock_release_recursive>
 8005fee:	bf00      	nop
 8005ff0:	20000320 	.word	0x20000320

08005ff4 <_realloc_r>:
 8005ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	4614      	mov	r4, r2
 8005ffc:	460e      	mov	r6, r1
 8005ffe:	b921      	cbnz	r1, 800600a <_realloc_r+0x16>
 8006000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006004:	4611      	mov	r1, r2
 8006006:	f7ff bdd9 	b.w	8005bbc <_malloc_r>
 800600a:	b92a      	cbnz	r2, 8006018 <_realloc_r+0x24>
 800600c:	f000 f85a 	bl	80060c4 <_free_r>
 8006010:	4625      	mov	r5, r4
 8006012:	4628      	mov	r0, r5
 8006014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006018:	f000 f8a0 	bl	800615c <_malloc_usable_size_r>
 800601c:	4284      	cmp	r4, r0
 800601e:	4607      	mov	r7, r0
 8006020:	d802      	bhi.n	8006028 <_realloc_r+0x34>
 8006022:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006026:	d812      	bhi.n	800604e <_realloc_r+0x5a>
 8006028:	4621      	mov	r1, r4
 800602a:	4640      	mov	r0, r8
 800602c:	f7ff fdc6 	bl	8005bbc <_malloc_r>
 8006030:	4605      	mov	r5, r0
 8006032:	2800      	cmp	r0, #0
 8006034:	d0ed      	beq.n	8006012 <_realloc_r+0x1e>
 8006036:	42bc      	cmp	r4, r7
 8006038:	4622      	mov	r2, r4
 800603a:	4631      	mov	r1, r6
 800603c:	bf28      	it	cs
 800603e:	463a      	movcs	r2, r7
 8006040:	f000 f832 	bl	80060a8 <memcpy>
 8006044:	4631      	mov	r1, r6
 8006046:	4640      	mov	r0, r8
 8006048:	f000 f83c 	bl	80060c4 <_free_r>
 800604c:	e7e1      	b.n	8006012 <_realloc_r+0x1e>
 800604e:	4635      	mov	r5, r6
 8006050:	e7df      	b.n	8006012 <_realloc_r+0x1e>

08006052 <memmove>:
 8006052:	4288      	cmp	r0, r1
 8006054:	b510      	push	{r4, lr}
 8006056:	eb01 0402 	add.w	r4, r1, r2
 800605a:	d902      	bls.n	8006062 <memmove+0x10>
 800605c:	4284      	cmp	r4, r0
 800605e:	4623      	mov	r3, r4
 8006060:	d807      	bhi.n	8006072 <memmove+0x20>
 8006062:	1e43      	subs	r3, r0, #1
 8006064:	42a1      	cmp	r1, r4
 8006066:	d008      	beq.n	800607a <memmove+0x28>
 8006068:	f811 2b01 	ldrb.w	r2, [r1], #1
 800606c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006070:	e7f8      	b.n	8006064 <memmove+0x12>
 8006072:	4402      	add	r2, r0
 8006074:	4601      	mov	r1, r0
 8006076:	428a      	cmp	r2, r1
 8006078:	d100      	bne.n	800607c <memmove+0x2a>
 800607a:	bd10      	pop	{r4, pc}
 800607c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006080:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006084:	e7f7      	b.n	8006076 <memmove+0x24>
	...

08006088 <_sbrk_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d06      	ldr	r5, [pc, #24]	; (80060a4 <_sbrk_r+0x1c>)
 800608c:	2300      	movs	r3, #0
 800608e:	4604      	mov	r4, r0
 8006090:	4608      	mov	r0, r1
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	f7fb fa48 	bl	8001528 <_sbrk>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_sbrk_r+0x1a>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_sbrk_r+0x1a>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	2000032c 	.word	0x2000032c

080060a8 <memcpy>:
 80060a8:	440a      	add	r2, r1
 80060aa:	4291      	cmp	r1, r2
 80060ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80060b0:	d100      	bne.n	80060b4 <memcpy+0xc>
 80060b2:	4770      	bx	lr
 80060b4:	b510      	push	{r4, lr}
 80060b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060be:	4291      	cmp	r1, r2
 80060c0:	d1f9      	bne.n	80060b6 <memcpy+0xe>
 80060c2:	bd10      	pop	{r4, pc}

080060c4 <_free_r>:
 80060c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c6:	2900      	cmp	r1, #0
 80060c8:	d044      	beq.n	8006154 <_free_r+0x90>
 80060ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ce:	9001      	str	r0, [sp, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f1a1 0404 	sub.w	r4, r1, #4
 80060d6:	bfb8      	it	lt
 80060d8:	18e4      	addlt	r4, r4, r3
 80060da:	f7ff ff7f 	bl	8005fdc <__malloc_lock>
 80060de:	4a1e      	ldr	r2, [pc, #120]	; (8006158 <_free_r+0x94>)
 80060e0:	9801      	ldr	r0, [sp, #4]
 80060e2:	6813      	ldr	r3, [r2, #0]
 80060e4:	b933      	cbnz	r3, 80060f4 <_free_r+0x30>
 80060e6:	6063      	str	r3, [r4, #4]
 80060e8:	6014      	str	r4, [r2, #0]
 80060ea:	b003      	add	sp, #12
 80060ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060f0:	f7ff bf7a 	b.w	8005fe8 <__malloc_unlock>
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	d908      	bls.n	800610a <_free_r+0x46>
 80060f8:	6825      	ldr	r5, [r4, #0]
 80060fa:	1961      	adds	r1, r4, r5
 80060fc:	428b      	cmp	r3, r1
 80060fe:	bf01      	itttt	eq
 8006100:	6819      	ldreq	r1, [r3, #0]
 8006102:	685b      	ldreq	r3, [r3, #4]
 8006104:	1949      	addeq	r1, r1, r5
 8006106:	6021      	streq	r1, [r4, #0]
 8006108:	e7ed      	b.n	80060e6 <_free_r+0x22>
 800610a:	461a      	mov	r2, r3
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	b10b      	cbz	r3, 8006114 <_free_r+0x50>
 8006110:	42a3      	cmp	r3, r4
 8006112:	d9fa      	bls.n	800610a <_free_r+0x46>
 8006114:	6811      	ldr	r1, [r2, #0]
 8006116:	1855      	adds	r5, r2, r1
 8006118:	42a5      	cmp	r5, r4
 800611a:	d10b      	bne.n	8006134 <_free_r+0x70>
 800611c:	6824      	ldr	r4, [r4, #0]
 800611e:	4421      	add	r1, r4
 8006120:	1854      	adds	r4, r2, r1
 8006122:	42a3      	cmp	r3, r4
 8006124:	6011      	str	r1, [r2, #0]
 8006126:	d1e0      	bne.n	80060ea <_free_r+0x26>
 8006128:	681c      	ldr	r4, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	6053      	str	r3, [r2, #4]
 800612e:	440c      	add	r4, r1
 8006130:	6014      	str	r4, [r2, #0]
 8006132:	e7da      	b.n	80060ea <_free_r+0x26>
 8006134:	d902      	bls.n	800613c <_free_r+0x78>
 8006136:	230c      	movs	r3, #12
 8006138:	6003      	str	r3, [r0, #0]
 800613a:	e7d6      	b.n	80060ea <_free_r+0x26>
 800613c:	6825      	ldr	r5, [r4, #0]
 800613e:	1961      	adds	r1, r4, r5
 8006140:	428b      	cmp	r3, r1
 8006142:	bf04      	itt	eq
 8006144:	6819      	ldreq	r1, [r3, #0]
 8006146:	685b      	ldreq	r3, [r3, #4]
 8006148:	6063      	str	r3, [r4, #4]
 800614a:	bf04      	itt	eq
 800614c:	1949      	addeq	r1, r1, r5
 800614e:	6021      	streq	r1, [r4, #0]
 8006150:	6054      	str	r4, [r2, #4]
 8006152:	e7ca      	b.n	80060ea <_free_r+0x26>
 8006154:	b003      	add	sp, #12
 8006156:	bd30      	pop	{r4, r5, pc}
 8006158:	20000324 	.word	0x20000324

0800615c <_malloc_usable_size_r>:
 800615c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006160:	1f18      	subs	r0, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	bfbc      	itt	lt
 8006166:	580b      	ldrlt	r3, [r1, r0]
 8006168:	18c0      	addlt	r0, r0, r3
 800616a:	4770      	bx	lr

0800616c <_init>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr

08006178 <_fini>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr
